{"version":3,"sources":["../../../api/utils.ts","components/ErrorBoundary/ErrorBoundary.js","static/images/icons/default-charm-icon.svg","app/utils/utils.js","app/selectors.js","../../../../api/facades/admin-v3.ts","../../../api/client.ts","../../../../api/facades/action-v7.ts","../../../../api/facades/all-watcher-v2.ts","../../../../api/facades/annotations-v2.ts","../../../../api/facades/application-v14.ts","../../../../api/facades/client-v5.ts","../../../../api/facades/cloud-v7.ts","../../../../api/facades/controller-v11.ts","../../../../api/facades/model-manager-v9.ts","../../../../api/facades/pinger-v1.ts","app/jimm-facade.js","juju/actions.js","juju/index.js","app/model-poller.js","app/actions.js","animations/FadeUpIn.tsx","static/images/logo/logo-black-on-white.svg","components/LogIn/LogIn.js","static/images/logo/logo-mark.svg","static/images/logo/jaas-text.svg","static/images/logo/juju-text.svg","components/Logo/Logo.js","components/Banner/Banner.tsx","hooks/useAnalytics.tsx","ui/actions.ts","ui/selectors.ts","components/UserMenu/UserMenu.js","components/PrimaryNav/PrimaryNav.js","hooks/useEventListener.js","animations/SlideInOut.tsx","components/Aside/Aside.tsx","components/ConfirmationModal/ConfirmationModal.tsx","components/PanelHeader/PanelHeader.tsx","components/LoadingHandler/LoadingHandler.tsx","components/RadioInputBox/RadioInputBox.tsx","components/RadioInputBox/DescriptionSummary.tsx","components/RadioInputBox/OptionInputs.tsx","panels/ActionsPanel/ActionOptions.tsx","panels/ActionsPanel/ActionsPanel.tsx","hooks/useLocalStorage.js","panels/RegisterController/RegisterController.js","hooks/useModelStatus.js","animations/SlideDownFadeOut.tsx","components/ShareCard/ShareCard.tsx","components/ToastCard/ToastCard.tsx","panels/ShareModelPanel/ShareModel.tsx","panels/panels.tsx","layout/BaseLayout/BaseLayout.tsx","hooks/useOffline.js","components/Header/Header.tsx","animations/FadeIn.tsx","hooks/useWindowTitle.js","components/DonutChart/DonutChart.js","pages/ControllersIndex/ControllerChart/ControllerChart.js","pages/ControllersIndex/ControllerOverview/ControllerOverview.js","pages/ControllersIndex/ControllersIndex.js","hooks/useActiveUser.tsx","static/images/logo/cloud/aws.svg","static/images/logo/cloud/azure.svg","static/images/logo/cloud/gce.svg","static/images/logo/cloud/kubernetes.svg","components/ModelTableList/shared.js","components/ModelTableList/StatusGroup.js","components/ModelTableList/CloudGroup.js","components/ModelTableList/OwnerGroup.js","components/ModelTableList/ModelTableList.js","components/ButtonGroup/ButtonGroup.tsx","components/ChipGroup/ChipGroup.tsx","pages/ModelsIndex/ModelsIndex.js","hooks/useModelAttributes.js","juju/model-selectors.ts","tables/tableHeaders.tsx","tables/tableRows.js","components/Topology/Topology.js","components/InfoPanel/InfoPanel.tsx","components/ContentReveal/ContentReveal.tsx","components/WebCLI/Output.js","components/WebCLI/connection.js","components/WebCLI/WebCLI.js","components/SlidePanel/SlidePanel.js","components/Breadcrumb/Breadcrumb.tsx","static/images/bulb.svg","static/images/no-config-params.svg","panels/ConfigPanel/BooleanConfig.tsx","panels/ConfigPanel/TextAreaConfig.tsx","panels/ConfigPanel/ConfigPanel.tsx","panels/shared.tsx","panels/RemoteAppsPanel/RemoteAppsPanel.tsx","panels/OffersPanel/OffersPanel.tsx","pages/EntityDetails/EntityDetails.js","components/EntityInfo/EntityInfo.tsx","pages/EntityDetails/Model/ActionLogs/ActionLogs.tsx","hooks/useTableRowClick.tsx","pages/EntityDetails/counts.ts","pages/EntityDetails/Model/Model.tsx","components/FormikFormData/FormikFormData.tsx","static/images/run-action-icon.svg","static/images/action-logs-icon.svg","pages/EntityDetails/App/App.tsx","pages/EntityDetails/Unit/Unit.tsx","pages/EntityDetails/Machine/Machine.tsx","pages/ModelDetails/ModelDetails.tsx","pages/Settings/Settings.js","components/NotFound/NotFound.tsx","pages/PageNotFound/PageNotFound.js","components/Routes/Routes.tsx","components/App/App.js","app/check-auth.js","app/root.js","ui/index.ts","juju/types.ts","juju/watchers.ts","juju/reducer.js","serviceWorker.js","index.js"],"names":["ErrorBoundary","Component","constructor","props","super","this","state","hasError","error","componentDidCatch","info","Sentry","scope","setExtras","eventId","setState","render","children","className","href","generateEntityIdentifier","charmId","name","subordinate","title","generateIconImg","generateStatusElement","status","count","useIcon","actionsLogs","statusClass","toLowerCase","countValue","undefined","statusOrder","setHighestStatus","entityStatus","highestStatus","indexOf","checkHighestStatus","length","getModelStatusGroupData","model","messages","applications","Object","keys","forEach","appName","app","appStatus","getApplicationStatusGroup","push","units","unitId","unit","unitStatus","getUnitStatusGroup","application","response","message","includes","getMachineStatusGroup","machine","extractOwnerName","tag","split","replace","pluralize","value","string","special","active","allocating","down","joined","lost","running","started","unknown","waiting","extractCloudName","extractCredentialName","cred","extractRevisionNumber","charmName","pop","generateIconPath","defaultCharmIcon","substr","lastIndexOf","match","isSet","val","iconSrc","alt","width","height","src","generateRelationIconImage","applicationName","canAdministerModelAccess","userName","modelUsers","hasPermission","sharingAccess","userObj","user","access","getModelData","juju","modelData","getControllerData","controllers","getBakery","root","bakery","getConfig","config","getUserPass","wsControllerURL","credentials","getLoginError","loginError","getAppVersion","appVersion","getFilteredModelData","filters","createSelector","controllerData","filterModelData","groupModelsByStatus","grouped","blocked","alert","modelUUID","groupModelsByOwner","owner","groupModelsByCloud","cloud","clonedModelData","cloneDeep","entries","controllerName","modelInfo","some","controller","find","uuid","path","filterSegments","filter","data","modelName","credential","region","combinedModelAttributes","segment","valuesArr","values","includesMatch","v","getModelUUID","getModelUUIDByName","isLoggedIn","storedMacaroons","storage","_store","macaroons","decodedMacaroons","key","JSON","parse","atob","err","console","controllerConnections","identity","getControllerConnection","getControllerConnections","getActiveUserTag","getModelStatus","getModelDataByUUID","getGroupedModelDataByStatus","getGroupedMachinesDataByStatus","machineID","machines","getGroupedUnitsDataByStatus","applicationID","unitID","getGroupedApplicationsDataByStatus","getGroupedModelStatusCounts","groupedModelStatuses","getWSControllerURL","controllerAPIEndpoint","autoBind","require","JIMMV1","transport","_transport","_info","version","disableControllerUUIDMasking","Promise","resolve","reject","req","type","request","params","write","listControllers","NAME","VERSION","actionsList","updateControllerList","payload","updateModelList","models","updateModelInfo","generateConnectionOptions","usePinger","onClose","facades","actions","allWatcher","annotations","client","modelManager","jimm","pinger","closeCallback","debug","wsclass","WebSocket","determineLoginParams","identityProviderAvailable","loginParams","username","password","startPingerLoop","conn","intervalId","window","setInterval","ping","catch","e","stopPingerLoop","clearInterval","async","connectAndLoginWithTimeout","modelURL","options","timeout","setTimeout","connectAndLogin","race","then","resp","fetchAndStoreModelStatus","dispatch","getState","appState","baseWSControllerURL","useIdentityProvider","controllerCredentials","logout","fullStatus","entities","map","get","results","item","entity","fetchModelStatus","updateModelStatus","fetchModelInfo","fetchAllModelStatuses","modelUUIDList","reduxStore","queue","Limiter","concurrency","result","isController","updatedControllers","location","log","addControllerCloudRegion","done","onDone","connectAndLoginToModel","startModelWatcher","watcherHandle","watchAll","callback","deltas","id","pingerIntervalId","connectAndListModels","additionalControllers","storeState","isJuju","controllerList","concat","connectedControllers","connect","login","loginWithBakery","storeLoginError","serverVersion","updateControllerConnection","updateJujuAPIInstance","updatePingerIntervalId","additionalController","jimM","c","controllerConfig","fetchControllerList","listModels","connectAndPollController","storeUserPass","logOut","store","jujus","getJujuAPIInstances","pingerIntervalIds","getPingerIntervalIds","removeItem","localStorage","connectAndStartPolling","getItem","FadeUpIn","isActive","AnimatePresence","motion","div","initial","opacity","y","animate","LogIn","useSelector","wsControllerURLs","useStore","userIsLoggedIn","logo","IdentityProviderForm","UserPassForm","generateErrorMessage","loginErrorMessage","visitURL","Button","useDispatch","focus","useRef","useEffect","current","onSubmit","preventDefault","elements","currentTarget","htmlFor","ref","rel","target","disabled","text","Logo","logoMark","jujuText","jaasText","Banner","variant","bannerClosed","setBannerClosed","useState","onClick","classnames","useAnalytics","category","action","disableAnalytics","process","ReactGA","pageview","event","sideNavCollapsed","toggle","isUserMenuActive","ui","userMenuActive","isSideNavCollapsed","UserMenu","sendAnalytics","activeUser","toggleUserMenuActive","classNames","onKeyPress","role","tabIndex","url","to","activeClassName","pages","label","icon","PrimaryNav","navItem","useEventListener","eventName","handler","element","savedHandler","addEventListener","eventListener","removeEventListener","SlideInOut","x","exit","transition","Aside","pinned","loading","isSplit","ConfirmationModal","buttonRow","modalRef","portalHost","document","querySelector","body","neutralButton","createPortal","Modal","PanelHeader","panelQs","setPanelQs","useQueryParams","panel","StringParam","removalObj","queryString","LoadingHandler","hasData","noDataMessage","RadioInputBox","description","selectedInput","onSelect","opened","setOpened","inputBoxRef","containerRef","style","initialHeight","wrapper","container","startHeight","endHeight","duration","offsetHeight","easing","onfinish","handleSelect","labelId","onChange","DescriptionSummary","OptionInputs","onValuesChange","useFormikContext","option","inputKey","required","ActionOptions","collectedOptions","useMemo","collectOptions","properties","property","initialValues","ActionsPanel","appStore","useParams","getModelUUIDMemo","disableSubmit","setDisableSubmit","actionData","setActionData","fetchingActionData","setFetchingActionData","confirmType","setConfirmType","selectedAction","setSelectedAction","actionOptionsValues","selectedUnits","useQueryParam","withDefault","ArrayParam","closePanel","applicationsCharmsActions","getActionsForApplication","namespace","charm","executeAction","actionName","actionOptions","generatedActions","receiver","parameters","enqueueOperation","executeActionOnUnits","changeHandler","useCallback","optionValues","updatedValues","enableSubmit","selectHandler","unitLength","generateTitle","reduce","acc","unitName","unitCount","unitList","confirmFunction","cancelFunction","unitNames","appearance","SubmitConfirmation","generateConfirmationModal","optionsValues","hasNoOptions","requiredPopulated","optionsValidate","selected","useLocalStorage","initialValue","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","RegisterController","formValues","setFormValues","setAdditionalControllers","history","useHistory","handleInputChange","newFormValues","checked","wsControllerHost","defaultChecked","controllerIP","dashboardLink","generateTheControllerLink","certificateAccepted","useModelStatus","queryParams","getModelStatusMemo","SlideDownFadeOut","isAnimating","ShareCard","lastConnected","isOwner","removeUser","accessSelectChange","inFocus","setInFocus","hasBeenRemoved","setHasBeenRemoved","showStatus","setShowStatus","updateStatus","setUpdateStatus","timeOut","clearTimeout","date","formatDistanceToNow","parseISO","as","onFocus","onBlur","accessChange","getStatusIconClassNames","ToastCard","iconName","toastInstance","undo","handleClose","toast","remove","dangerouslySetInnerHTML","__html","ShareModel","usersAccess","setUsersAccess","newUserFormSubmitActive","setNewUserFormSubmitActive","showAddNewUser","setShowAddNewUser","modelStatusData","controllerUUID","modelControllerDataByUUID","modelController","modelControllerData","subController","clonedModelController","getModelControllerDataByUUID","modelControllerURL","users","clonedUserAccess","displayName","updatePermissions","permissionTo","permissionFrom","controllerURL","modifyAccess","modifyModelAccess","changes","setModelSharingPermissions","custom","t","handleAccessSelectChange","handleRemoveUser","sortedUsers","i","unshift","splice","layout","validate","accessLevel","handleValidateNewUser","resetForm","userEntry","userAlreadyHasAccess","newUserName","newUserPermission","handleNewUserFormSubmit","placeholder","close","queryStringSetter","code","Panels","generatePanel","BaseLayout","mobileMenuCollapsed","setMobileMenuCollapsed","useLocation","collapseSidebar","isOffline","setIsOffline","offlineEvent","onlineEvent","useOffline","pathname","position","containerClassName","toastOptions","reverseOrder","Header","FadeIn","useWindowTitle","titlePart","DonutChart","chartData","svgRef","isDisabled","radius","Math","min","svg","d3","attr","append","color","domain","range","dataReady","d","pie","selectAll","enter","innerRadius","outerRadius","getPercentage","denominator","numerator","trunc","Number","isNaN","ControllerChart","totalLabel","totalCount","ControllersOverview","groupedMachinesDataByStatus","groupedApplicationsDataByStatus","groupedUnitsDataByStatus","machinesChartData","applicationsChartData","unitsChartData","Details","controllerMap","applicationKeys","headers","content","sortKey","additionalHeaders","generatePathValue","column","generateRow","cloudRegion","publicAccess","Public","columns","additionalRows","row","rows","ControllersIndex","controllerCount","modelCount","useActiveUser","generateModelDetailsLink","ownerTag","modelDetailsPath","getStatusValue","returnValue","applicationCount","machineCount","prev","since","generateCloudCell","awsLogo","gceLogo","azureLogo","kubernetesLogo","generateCloudAndRegion","generateAccessButton","generateStatusTableHeaders","generateWarningMessage","join","link","generateModelNameCell","groupLabel","StatusGroup","groupedAndFilteredData","getGroupedByStatusAndFilteredModelData","blockedRows","alertRows","runningRows","groupedModels","lastUpdated","slice","sortData","generateModelTableDataByStatus","emptyStateMsg","sortable","generateCloudTableHeaders","CloudGroup","getGroupedByCloudAndFilteredModelData","cloudRows","generateModelTableDataByCloud","cloudTables","cloudModels","modelGroup","generateOwnerTableHeaders","OwnerGroup","getGroupedByOwnerAndFilteredModelData","ownerRows","generateModelTableDataByOwner","ownerTables","ownerModels","ModelTableList","groupedBy","ButtonGroup","buttons","activeButton","setActiveButton","ChipGroup","chips","descriptor","numberOfChips","total","chipValue","getSumTotal","labelType","getLabelType","Models","groupModelsBy","setGroupModelsBy","setFilters","clouds","regions","owners","cloudFilter","regionFilter","ownerFilter","credentialFilter","useModelAttributes","generateChips","lead","chipValues","activeFilters","existingSearchData","modelsLoaded","filterPanelData","heading","returnSearchData","searchData","obj1","obj2","chipLead","getModelWatcherData","modelWatcherData","getModelList","getModelWatcherDataByUUID","getModelInfo","ownerName","modelList","getModelApplications","getModelUnits","getModelRelations","relations","getModelMachines","Statuses","getAllModelApplicationStatus","applicationStatuses","unitData","workloadStatus","agentStatus","worstStatusIndex","max","localApplicationTableHeaders","remoteApplicationTableHeaders","unitTableHeaders","machineTableHeaders","relationTableHeaders","consumedTableHeaders","offersTableHeaders","appsOffersTableHeaders","generateLocalApplicationRows","tableRowClick","query","rev","charmURL","scale","notes","generateUnitRows","showCheckbox","hideMachines","clonedUnits","principal","subordinates","unitRows","workload","agent","publicAddress","ports","portData","number","generatePortsList","fieldID","ariaLabeledBy","generateMachineRows","selectedEntity","generateMachineApps","machineId","appsOnMachine","unitInfo","az","series","dnsName","instanceId","isSubordinate","subordinateTo","applyDelta","delta","parseFloat","getRelationPosition","translateValues","getElement","index","getRect","exec","node","getAttribute","getData","element1","element2","app1","app2","x1","y1","x2","y2","Topology","applicationData","relationData","annotationData","deltaX","deltaY","guiX","guiY","computePositionDelta","annotation","maxX","maxY","computeMaxXY","extractor","endpoints","relation","parts","deDupedRelations","Set","pair","applicationNames","topo","appIcons","gridCount","appIcon","classed","call","_","svgWidth","svgHeight","getBoundingClientRect","padding","translateX","translateY","relationLines","insert","infoPanelDimensions","de","documentElement","clientWidth","innerWidth","getViewportWidth","InfoPanel","showExpandedTopology","setShowExpandedTopology","getModelAnnotations","applicationsCount","clientHeight","innerHeight","expandedTopologyDimensions","topologySize","handleExpandTopology","ContentReveal","openByDefault","isOpen","setIsOpen","handleToggle","onKeyDown","ansiColors","findANSICode","colorize","colors","Array","from","matchAll","colorizedContent","previousIndex","ansiCode","ansiCodeNumber","substring","endIndex","part","fgColor","bgColor","getStyle","WebCLIOutput","helpMessage","showHelp","setShouldShowHelp","resizeDeltaY","setHeight","resize","viewPortHeight","newHeight","clientY","addResizeListener","classList","layerY","removeResizeListener","Connection","_messageBuffer","_messageCallback","messageCallback","address","wsOnOpen","onopen","wsOnClose","onclose","ws","_wsOnOpen","_wsOnClose","onmessage","_handleMessage","bind","_ws","send","disconnect","output","_pushToMessageBuffer","WebCLI","controllerWSHost","protocol","connection","setConnection","shouldShowHelp","inputRef","wsMessageStore","setOutput","wsAddress","authentication","origin","URL","deserialized","originalWSOrigin","commands","command","trim","autoComplete","autoCorrect","autoCapitalize","spellCheck","SlidePanel","isLoading","closest","Breadcrumb","entityType","view","generateBreadcrumbs","BooleanConfig","selectedConfig","setSelectedConfig","setNewValue","inputFocused","setInputFocused","inputChanged","setInputChanged","showDescription","setShowDescription","showUseDefault","setShowUseDefault","default","trueRef","falseRef","descriptionRef","maxDescriptionHeight","setMaxDescriptionHeight","inputValue","handleOptionChange","bool","newValue","firstChild","maxHeight","TextAreaConfig","handleShowDescription","ConfigPanel","setConfig","enableSave","setEnableSave","showResetAll","setShowResetAll","setIsLoading","savingConfig","setSavingConfig","checkAllDefaults","shouldShow","cfg","checkEnableSave","newConfig","fieldChanged","hasChangedFields","_submitToJuju","setValues","set","setApplicationConfig","generateConfigElementList","changedConfigList","accumulator","generateChangedKeyValues","SaveConfirmation","CancelConfirmation","generateConfirmationDialog","NoDescriptionMessage","NoConfigMessage","getApplicationConfig","configs","boxImage","bulbImage","generatePanelTableRows","th","td","RemoteAppsPanel","appId","remoteApp","tableDataArr","OffersPanel","offers","accordionPanelId","setAccordionPanelId","handleAccordionToggle","offerInfo","generatePanelContent","activePanel","panelRowClick","EntityDetails","setQuery","activeView","closePanelConfig","showWebCLI","setShowWebCLI","primaryControllerData","getControllerDataByUUID","handleNavClick","section","scrollIntoView","behavior","block","inline","entityName","entityPanel","links","items","generateTabItems","generateActivePanel","EntityInfo","generateLinkToApp","generateAppIcon","ActionLogs","operations","setOperations","fetchedOperations","setFetchedOperations","applicationList","operationList","queryArgs","listOperations","queryOperationsList","fetchData","tableData","operationData","operationId","operation","defaultRow","taskId","completed","newData","columnData","accessor","emptyMsg","useTableRowClick","setEntity","entityId","incrementCounts","counts","generateOfferCounts","offerCount","offer","totalConnectedCount","generateSecondaryCounts","selector","renderCounts","countType","Model","localApplicationTableRows","remoteApplicationTableRows","offerUrl","interfaces","endpointInterface","interface","offer_url","generateRemoteApplicationRows","machinesTableRows","relationTableRows","relationId","provider","requirer","peer","providerApplicationName","requirerApplicationName","peerApplicationName","endpoint","extractRelationEndpoints","providerLabel","requirerLabel","generateRelationRows","consumedTableRows","remoteApplications","offerName","generateConsumedRows","offersTableRows","offerId","activeConnectedCount","generateOffersRows","appOffersRows","generateAppOffersRows","modelInfoData","LocalAppChips","appOffersChips","remoteAppChips","localAppTableLength","appOffersTableLength","remoteAppsTableLength","AppOffersTable","LocalAppsTable","RemoteAppsTable","visibleTables","tablesLengths","numberOfTables","tableLength","countVisibleTables","cloudTag","sla","level","FormikFormData","onFormChange","onSetup","setFieldValue","App","enableActionButtonRow","setEnableActionButtonRow","tablesRef","setFieldsValues","filteredMachineList","filteredMachines","machinesPanelRows","selectContent","removeMachines","header","generateSelectableUnitTableHeaders","filteredUnitList","filteredUnits","unitPanelRows","tableView","setTableView","appEntityData","os","revision","unitChipData","generateUnitCounts","machineChipData","machineIds","generateMachineCounts","setPanel","showActions","hasIcon","runActionImage","actionLogsImage","formData","Unit","unitIdentifier","filteredApplicationList","filteredApps","machineRows","applicationRows","unitEntityData","Machine","appList","add","hardware","MachineEntityData","memory","disk","cpu","cores","ModelDetails","populateMissingAllWatcherData","loadFullData","watcherHandleId","stopModelWatcher","exact","Settings","setDisableAnalytics","NotFound","PageNotFound","Routes","isProduction","baseAppURL","initialize","basename","ReactRouterRoute","Route","actionAllowlist","thunkAllowlist","checkLoggedIn","next","rootReducer","immerProduce","draftState","connections","intervals","uiReducer","confirmationModalActive","DeltaEntityTypes","DeltaChangeTypes","ReduxDeltaEntityTypes","_processDelta","actionType","CHANGE","formatted","mergeWith","REMOVE","MODEL","processDeltas","charms","constraints","life","_process","ACTION","ACTIONS","ANNOTATION","ANNOTATIONS","APPLICATION","APPLICATIONS","CHARM","CHARMS","MACHINE","MACHINES","RELATION","RELATIONS","UNIT","UNITS","applicationUnitCounts","defaultState","jujuReducer","userModels","lastConnection","Boolean","hostname","dsn","checkCounter","checkConfigExists","jujuDashboardConfig","host","baseControllerURL","createStore","combineReducers","composeWithDevTools","applyMiddleware","checkAuth","thunk","storeConfig","Bakery","visitPage","Info","VisitURL","BakeryStorage","storeBakery","rootElement","getElementById","ReactDOM","bootstrap","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9613f97c.chunk.js","sourcesContent":["// Copyright 2020 Canonical Ltd.\n// Licensed under the LGPLv3, see LICENCE.txt file for details.\n/**\n  Automatically bind all methods of the given object to the object itself.\n  @param {Object} obj The object whose method must be bound.\n*/\nexport function autoBind(obj) {\n    const names = Object.getOwnPropertyNames(obj.constructor.prototype);\n    for (let i = 0; i < names.length; i++) {\n        const name = names[i];\n        if (name !== \"constructor\" && typeof obj[name] === \"function\") {\n            obj[name] = obj[name].bind(obj);\n        }\n    }\n}\n/**\n  Create an async handler which will either return a value to a supplied\n  callback, or call the appropriate method on the promise resolve/reject.\n\n  @param {Function} [callback] The optional callback.\n  @param {Function} [resolve] The optional promise resolve function.\n  @param {Function} [reject] The optional promise reject function.\n  @param {Function} [transform] The optional response transform function.\n  @return {Function} The returned function takes two arguments (err, value).\n    If the the callback is a function the two arguments will be passed through\n    to the callback in the same order. If no callback is supplied, the promise\n    resolve or reject method will be called depending on the existence of an\n    error value.\n*/\nexport function createAsyncHandler(callback, resolve, reject, transform) {\n    return (err, value) => {\n        if (err) {\n            callback ? callback(err, null) : reject(err);\n            return;\n        }\n        if (transform) {\n            value = transform(value);\n        }\n        callback ? callback(null, value) : resolve(value);\n    };\n}\n//# sourceMappingURL=utils.js.map","import { Component } from \"react\";\nimport * as Sentry from \"@sentry/browser\";\n\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return {\n      hasError: true,\n      error,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    Sentry.withScope((scope) => {\n      scope.setExtras(info);\n      const eventId = Sentry.captureException(error);\n      this.setState({ eventId });\n    });\n  }\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n    if (hasError) {\n      return (\n        <div className=\"p-notification--negative\">\n          <p className=\"p-notification__response\">\n            <span className=\"p-notification__status\">Error: </span>Something has\n            gone wrong. If this issue persists,{\" \"}\n            <a href=\"https://github.com/canonical-web-and-design/jaas-dashboard/issues/new?assignees=&labels=&template=bug_report.md&title=\">\n              please raise an issue on GitHub.\n            </a>\n          </p>\n        </div>\n      );\n    }\n\n    return children;\n  }\n}\n","export default __webpack_public_path__ + \"static/media/default-charm-icon.22a7fa5d.svg\";","import { parseISO, formatDistanceToNow } from \"date-fns\";\n\nimport defaultCharmIcon from \"static/images/icons/default-charm-icon.svg\";\n\nexport function generateEntityIdentifier(charmId, name, subordinate) {\n  if (!charmId) {\n    return null;\n  }\n\n  return (\n    <div className=\"entity-name u-truncate\" title={name}>\n      {subordinate && <span className=\"subordinate\"></span>}\n      {charmId && generateIconImg(name, charmId)}\n      {name}\n    </div>\n  );\n}\n\nexport const generateStatusElement = (\n  status = \"unknown\",\n  count,\n  useIcon = true,\n  actionsLogs = false\n) => {\n  let statusClass = status ? `is-${status.toLowerCase()}` : \"\";\n  let countValue = \"\";\n  if (count !== undefined) {\n    countValue = ` (${count})`;\n  }\n  const className = useIcon ? \"status-icon \" + statusClass : \"\";\n  // ActionLogs uses a spinner icon if 'running'\n  if (actionsLogs && statusClass === \"is-running\") {\n    return (\n      <span className=\"status-icon is-spinner\">\n        <i className=\"p-icon--spinner u-animation--spin\"></i>\n        {status}\n      </span>\n    );\n  }\n\n  return (\n    <span className={className}>\n      {status}\n      {countValue}\n    </span>\n  );\n};\n\nexport const generateSpanClass = (className, value) => {\n  return <span className={className}>{value}</span>;\n};\n\n// Highest status to the right\nconst statusOrder = [\"running\", \"alert\", \"blocked\"];\n\nconst setHighestStatus = (entityStatus, highestStatus) => {\n  if (statusOrder.indexOf(entityStatus) > statusOrder.indexOf(highestStatus)) {\n    return entityStatus;\n  }\n  return highestStatus;\n};\n\n// If it's the highest status then we don't need to continue looping\n// applications or units.\nconst checkHighestStatus = (highestStatus) => {\n  return highestStatus === statusOrder[statusOrder.length - 1];\n};\n\nexport const getModelStatusGroupData = (model) => {\n  let highestStatus = statusOrder[0]; // Set the highest status to the lowest.\n  let messages = [];\n  const applications = model.applications || {};\n  Object.keys(applications).forEach((appName) => {\n    const app = applications[appName];\n    const { status: appStatus } = getApplicationStatusGroup(app);\n    highestStatus = setHighestStatus(appStatus, highestStatus);\n    if (checkHighestStatus(highestStatus)) {\n      // If it's the highest status then we want to store the message.\n      messages.push(app.status.info);\n      return;\n    }\n    const units = app.units || {}; // subordinates do not have units.\n    Object.keys(units).forEach((unitId) => {\n      const unit = units[unitId];\n      const { status: unitStatus } = getUnitStatusGroup(unit);\n      highestStatus = setHighestStatus(unitStatus, highestStatus);\n      if (checkHighestStatus(highestStatus)) {\n        // If it's the highest status then we want to store the message.\n        messages.push(unit[\"agent-status\"].info);\n        return;\n      }\n    });\n  });\n  return {\n    highestStatus,\n    messages,\n  };\n};\n\n/**\n  Returns the status for the application.\n  @param {Object} application The application to check the status of in the\n    format stored in the redux store.\n  @returns {Object} The status of the application and any relevent messaging.\n*/\nexport const getApplicationStatusGroup = (application) => {\n  // Possible \"blocked\" or error states in application statuses.\n  const blocked = [\"blocked\"];\n  // Possible \"alert\" states in application statuses.\n  const alert = [\"unknown\"];\n  const status = application.status.status;\n  const response = {\n    status: \"running\",\n    message: null,\n  };\n  if (blocked.includes(status)) {\n    response.status = \"blocked\";\n  }\n  if (alert.includes(status)) {\n    response.status = \"alert\";\n  }\n  return response;\n};\n\n/**\n  Returns the status level for the machine.\n  @param {Object} machine The machine to check the status of in the\n    format stored in the redux store.\n  @returns {Object} The status of the machine and any relevent messaging.\n*/\nexport const getMachineStatusGroup = (machine) => {\n  // Possible \"blocked\" or error states in machine statuses.\n  const blocked = [\"down\"];\n  // Possible \"alert\" states in machine statuses.\n  const alert = [\"pending\"];\n  const status = machine[\"agent-status\"].status;\n  const response = {\n    status: \"running\",\n    message: null,\n  };\n  if (blocked.includes(status)) {\n    response.status = \"blocked\";\n  }\n  if (alert.includes(status)) {\n    response.status = \"alert\";\n  }\n  return response;\n};\n\n/**\n  Returns the status level for the unit.\n  @param {Object} unit The unit to check the status of in the\n    format stored in the redux store.\n  @returns {Object} The status of the unit and any relevent messaging.\n*/\nexport const getUnitStatusGroup = (unit) => {\n  // Possible \"blocked\" or error states in the unit statuses.\n  const blocked = [\"lost\"];\n  // Possible \"alert\" states in the unit statuses.\n  const alert = [\"allocating\"];\n  const status = unit[\"agent-status\"].status;\n  const response = {\n    status: \"running\",\n    message: null,\n  };\n  if (blocked.includes(status)) {\n    response.status = \"blocked\";\n  }\n  if (alert.includes(status)) {\n    response.status = \"alert\";\n  }\n  return response;\n};\n\n/**\n  Returns owner string from ownerTag\n  @param {string} ownerTag The ownerTag identifier returns from the API\n  @returns {string} The simplified owner string\n*/\nexport const extractOwnerName = (tag) => {\n  return tag.split(\"@\")[0].replace(\"user-\", \"\");\n};\n\n/**\n  Pluralizes the supplied word based on the provided dataset.\n  @param {Number} value The integer to be checked\n  @param {string} string The item name to be pluralized\n  @returns {string} The item pluralized if required\n*/\nexport const pluralize = (value, string) => {\n  const special = {\n    active: \"active\",\n    allocating: \"allocating\",\n    down: \"down\",\n    joined: \"joined\",\n    lost: \"lost\",\n    running: \"running\",\n    started: \"started\",\n    unknown: \"unknown\",\n    waiting: \"waiting\",\n  };\n  if (value === 1) {\n    return string;\n  } else if (special[string]) {\n    return special[string];\n  }\n  return `${string}s`;\n};\n\n/**\n  Returns cloud string from cloudTag\n  @param {string} cloudTag The cloudTag identifier returns from the API\n  @returns {string} The simplified cloud string\n*/\nexport const extractCloudName = (tag = \"\") => {\n  return tag.replace(\"cloud-\", \"\");\n};\n\n/**\n  Returns credential string from Tag\n  @param {string} cloudTag The cloudTag identifier returns from the API\n  @returns {string} The simplified cloud string\n*/\nexport const extractCredentialName = (tag) => {\n  // @ is not there in local boostraps\n  // cloudcred-localhost_admin_localhost\n  if (!tag) return \"-\";\n  let cred = tag.split(\"cloudcred-\")[1];\n  if (cred.indexOf(\"@\") > -1) {\n    return cred.split(\"@\")[1].split(\"_\")[1];\n  }\n  return cred.split(\"_\")[1];\n};\n\n/**\n  Returns the version of the supplied charm string.\n  @param {String} charmName The full path of the charm e.g. cs:foo/bar-123\n*/\nexport const extractRevisionNumber = (charmName = \"\") =>\n  charmName.split(\"-\").pop();\n\n/**\n  Returns a link to the charm icon for the provided charm name.\n  @param {String} charmId The fully qualified charm name.\n  @returns {String} The link to the charm icon.\n*/\nexport const generateIconPath = (charmId) => {\n  if (charmId.indexOf(\"local:\") === 0) {\n    return defaultCharmIcon;\n  }\n  if (charmId.indexOf(\"cs:\") === 0) {\n    // Strip unnessesary prefixes\n    // before: cs:~containers/lxd-container-47\n    // after:  containers/lxd-container-47\n    charmId = charmId.replace(\"cs:~\", \"\");\n    charmId = charmId.replace(\"cs:\", \"\");\n\n    // Remove release from the charmId\n    // before: containers/trusty/lxd-container-47\n    // after:  containers/lxd-container-47\n    charmId = charmId.replace(\"precise/\", \"\");\n    charmId = charmId.replace(\"trusty/\", \"\");\n    charmId = charmId.replace(\"xenial/\", \"\");\n    charmId = charmId.replace(\"bionic/\", \"\");\n    charmId = charmId.replace(\"focal/\", \"\");\n\n    // Combine owner and charm name\n    // before: containers/lxd-container-47\n    // after:  containers-lxd-container-47\n    charmId = charmId.replace(\"/\", \"-\");\n\n    // Strip the revision number from the end\n    // before: containers-lxd-container-47\n    // after:  containers-lxd-container\n    charmId = charmId.substr(0, charmId.lastIndexOf(\"-\", charmId.length));\n\n    return `https://charmhub.io/${charmId}/icon`;\n  }\n  if (charmId.indexOf(\"ch:\") === 0) {\n    // Regex explanation:\n    // \"ch:amd64/xenial/content-cache-425\".match(/\\/(.+)\\/(.+)-\\d+/)\n    // Array(3) [ \"/xenial/content-cache-425\", \"xenial\", \"content-cache\" ]\n    const charmName = charmId.match(/\\/(.+)\\/(.+)-\\d+/)[2];\n    return `https://charmhub.io/${charmName}/icon`;\n  }\n  return \"\";\n};\n\n/**\n  @returns {Int || 0} Returns the current viewport width\n*/\nexport const getViewportWidth = () => {\n  const de = document.documentElement;\n  return Math.max(de.clientWidth, window.innerWidth || 0);\n};\n\n/**\n * @param {function} fn Function to debounce\n * @param {Number} wait Time in milliseconds to wait\n */\nexport const debounce = (fn, wait) => {\n  let t;\n  return function () {\n    clearTimeout(t);\n    t = setTimeout(() => fn.apply(this, arguments), wait);\n  };\n};\n\n/**\n  Returns a bool on whether a user can admin controllers\n  @param {Obj} conn The user connection.\n  @returns {Boolean} If they are an admin or not.\n*/\nexport const userIsControllerAdmin = (conn) => {\n  const controllerAccess = conn?.info?.user?.controllerAccess;\n  return [\"superuser\", \"admin\"].includes(controllerAccess);\n};\n\nexport const isSet = (val) => val || val !== undefined;\n\nexport const extractRelationEndpoints = (relation) => {\n  const endpoints = {};\n  relation.endpoints.forEach((endpoint) => {\n    const role = endpoint.relation.role;\n    endpoints[role] =\n      endpoint[\"application-name\"] + \":\" + endpoint.relation.name;\n    endpoints[`${role}ApplicationName`] = endpoint[\"application-name\"];\n  });\n  return endpoints;\n};\n\nexport const generateIconImg = (name, charmId) => {\n  let iconSrc = defaultCharmIcon;\n  if (charmId.indexOf(\"local:\") !== 0) {\n    iconSrc = generateIconPath(charmId);\n  }\n  return (\n    <img\n      alt={name + \" icon\"}\n      key={name}\n      title={name}\n      width=\"24\"\n      height=\"24\"\n      className=\"entity-icon\"\n      src={iconSrc}\n    />\n  );\n};\n\nexport const generateRelationIconImage = (applicationName, applications) => {\n  const application = applications[applicationName];\n  if (!application || !applicationName) {\n    return;\n  }\n  return generateIconImg(applicationName, application[\"charm-url\"]);\n};\n\nexport const formatFriendlyDateToNow = (date) => {\n  const formattedDate = formatDistanceToNow(parseISO(date));\n  return formattedDate.concat(\" ago\");\n};\n\nexport const canAdministerModelAccess = (userName, modelUsers) => {\n  let hasPermission = false;\n  const sharingAccess = [\"admin\", \"write\", \"owner\"];\n  modelUsers &&\n    modelUsers.forEach((userObj) => {\n      if (userObj.user === userName && sharingAccess.includes(userObj.access)) {\n        hasPermission = true;\n      }\n    });\n  return hasPermission;\n};\n","import { createSelector } from \"reselect\";\nimport cloneDeep from \"clone-deep\";\nimport {\n  getModelStatusGroupData,\n  extractOwnerName,\n  extractCloudName,\n  getApplicationStatusGroup,\n  getMachineStatusGroup,\n  getUnitStatusGroup,\n  extractCredentialName,\n} from \"./utils/utils\";\n\n// ---- Selectors for top level keys\n\n/**\n  Fetches the model data from state.\n  @param {Object} state The application state.\n  @returns {Object|Null} The list of model data or null if none found.\n*/\nexport const getModelData = (state) => {\n  if (state?.juju?.modelData) {\n    return state.juju.modelData;\n  }\n  return null;\n};\n\n/**\n  Fetches the controller data from state.\n  @param {Object} state The application state.\n  @returns {Object|Null} The list of controller data or null if none found.\n*/\nexport const getControllerData = (state) => state?.juju?.controllers;\n\n/**\n  Fetches the bakery from state.\n  @param {Object} state The application state.\n  @returns {Object|Null} The bakery instance or null if none found.\n*/\nexport const getBakery = (state) => state?.root?.bakery;\n\n/**\n  Fetches the application config from state.\n  @param {Object} state The application state.\n  @returns {Object|Null} The config object or null if none found.\n*/\nexport const getConfig = (state) => state?.root?.config;\n\n/**\n  Fetches the username and password from state.\n  @param {String} wsControllerURL The fully qualified wsController URL to\n    retrieve the credentials from.\n  @param {Object} state The application state.\n  @returns {Object|Null} The username and password or null if none found.\n*/\nexport const getUserPass = (wsControllerURL, state) =>\n  state?.root?.credentials?.[wsControllerURL];\n\n/**\n  Fetches a login error from state\n  @param {Object} state The application state.\n  @returns {String|Undefined} The error message if any.\n*/\nexport const getLoginError = (state) => state?.root?.loginError;\n\n/**\n  Fetches the juju api instance from state.\n  @param {Object} state The application state.\n  @returns {Object|Null} The juju api instance or null if none found.\n*/\nexport const getJujuAPIInstances = (state) => state?.root?.jujus;\n\n/**\n  Fetches the pinger intervalId from state.\n  @param {Object} state The application state.\n  @returns {Object|Null} The pinger intervalId or null if none found.\n*/\nexport const getPingerIntervalIds = (state) => state?.root?.pingerIntervalIds;\n\n/**\n  Fetches the application version.\n  @param {Object} state The application state.\n  @returns {Object|Undefined} The application version or undefined\n*/\nexport const getAppVersion = (state) => state?.root?.appVersion;\n\n// ---- Utility selectors\n\n/**\n  Returns a selector for the filtered model data.\n  @param {Object} filters The filters to filter the model data by.\n  @returns {Object} A selector for the filtered model data.\n*/\nconst getFilteredModelData = (filters) =>\n  createSelector(\n    [getModelData, getControllerData],\n    (modelData, controllerData) =>\n      filterModelData(filters, modelData, controllerData)\n  );\n\n// ---- Utility functions\n\n/**\n  Pull the users macaroon credentials from state.\n  @param {Object} state The application state.\n  @returns {Object} The macaroons extracted from the bakery in state.\n*/\nconst getUserCredentials = (state) => {\n  let storedMacaroons = null;\n  if (state?.root?.bakery) {\n    storedMacaroons = state.root.bakery.storage._store;\n  }\n  return storedMacaroons;\n};\n\n/**\n  Base64 decode and json parse the supplied macaroons from the bakery.\n  @param {Object} macaroons The macaroons data from the bakery.\n  @returns {Object} The users decoded macaroons.\n*/\nconst getDecodedMacaroons = (macaroons) => {\n  if (!macaroons) {\n    return null;\n  }\n  let decodedMacaroons = {};\n  Object.keys(macaroons).forEach((key) => {\n    try {\n      decodedMacaroons[key] = JSON.parse(atob(macaroons[key]));\n    } catch (err) {\n      console.error(\"Unable to decode macaroons\", err);\n    }\n  });\n  return decodedMacaroons;\n};\n\n/**\n  Gets the model UUID from the supplied name.\n  @param {String} name The name of the model.\n  @param {Object} modelData The list of models.\n  @returns {Object|Null} The model UUID or null if none found.\n*/\nconst getModelUUIDByName = (name, modelData) => {\n  let owner = null;\n  let modelName = null;\n  if (name?.includes(\"/\")) {\n    [owner, modelName] = name.split(\"/\");\n  } else {\n    modelName = name;\n  }\n  if (modelData) {\n    for (let uuid in modelData) {\n      const model = modelData[uuid].info;\n      if (model && model.name === modelName) {\n        if (owner) {\n          if (model[\"owner-tag\"] === `user-${owner}`) {\n            // If this is a shared model then we'll also have an owner name\n            return uuid;\n          }\n        } else {\n          return uuid;\n        }\n      }\n    }\n  }\n  return null;\n};\n\n/**\n  Returns the modelStatus for the supplied modelUUID.\n  @param {String} modelUUID\n  @param {Object} modelData\n  @returns {Object|Null} The model status or null if none found\n*/\nconst getModelDataByUUID = (modelUUID, modelData) => {\n  if (modelData && modelData[modelUUID]) {\n    return modelData[modelUUID];\n  }\n  return null;\n};\n\n/**\n  Returns a grouped collection of model statuses.\n  @param {Object} modelData\n  @returns {Object} The grouped model statuses.\n*/\nconst groupModelsByStatus = (modelData) => {\n  const grouped = {\n    blocked: [],\n    alert: [],\n    running: [],\n  };\n  if (!modelData) {\n    return grouped;\n  }\n  for (let modelUUID in modelData) {\n    const model = modelData[modelUUID];\n    const { highestStatus } = getModelStatusGroupData(model);\n    grouped[highestStatus].push(model);\n  }\n  return grouped;\n};\n\n/**\n  Returns a grouped collection of machine instances.\n  @param {Object} modelData\n  @returns {Object} The grouped machine instances.\n*/\nconst groupMachinesByStatus = (modelData) => {\n  const grouped = {\n    blocked: [],\n    alert: [],\n    running: [],\n  };\n  if (!modelData) {\n    return grouped;\n  }\n  for (let modelUUID in modelData) {\n    const model = modelData[modelUUID];\n    for (let machineID in model.machines) {\n      const machine = model.machines[machineID];\n      grouped[getMachineStatusGroup(machine).status].push(machine);\n    }\n  }\n  return grouped;\n};\n\n/**\n  Returns a grouped collection of unit instances.\n  @param {Object} modelData\n  @returns {Function} The grouped unit instances.\n*/\nconst groupUnitsByStatus = (modelData) => {\n  const grouped = {\n    blocked: [],\n    alert: [],\n    running: [],\n  };\n  if (!modelData) {\n    return grouped;\n  }\n  for (let modelUUID in modelData) {\n    const model = modelData[modelUUID];\n    for (let applicationID in model.applications) {\n      const application = model.applications[applicationID];\n      for (let unitID in application.units) {\n        const unit = application.units[unitID];\n        grouped[getUnitStatusGroup(unit).status].push(unit);\n      }\n    }\n  }\n  return grouped;\n};\n\n/**\n  Returns a grouped collection of machine instances.\n  @param {Object} modelData\n  @returns {Object} The grouped machine instances.\n*/\nconst groupApplicationsByStatus = (modelData) => {\n  const grouped = {\n    blocked: [],\n    alert: [],\n    running: [],\n  };\n  if (!modelData) {\n    return grouped;\n  }\n  for (let modelUUID in modelData) {\n    const model = modelData[modelUUID];\n    for (let applicationID in model.applications) {\n      const application = model.applications[applicationID];\n      grouped[getApplicationStatusGroup(application).status].push(application);\n    }\n  }\n  return grouped;\n};\n\n/**\n  Returns a grouped collection of model statuses by owner.\n  @param {Object} modelData\n  @returns {Object} The grouped model statuses by owner.\n*/\nconst groupModelsByOwner = (modelData) => {\n  const grouped = {};\n  if (!modelData) {\n    return grouped;\n  }\n  for (let modelUUID in modelData) {\n    const model = modelData[modelUUID];\n    if (model.info) {\n      const owner = extractOwnerName(model.info[\"owner-tag\"]);\n      if (!grouped[owner]) {\n        grouped[owner] = [];\n      }\n      grouped[owner].push(model);\n    }\n  }\n  return grouped;\n};\n\n/**\n  Returns a grouped collection of model statuses by cloud.\n  @param {Object} modelData\n  @returns {Object} The grouped model statuses by cloud.\n*/\nconst groupModelsByCloud = (modelData) => {\n  const grouped = {};\n  if (!modelData) {\n    return grouped;\n  }\n  for (let modelUUID in modelData) {\n    const model = modelData[modelUUID];\n    if (model.info) {\n      const cloud = extractCloudName(model.info[\"cloud-tag\"]);\n      if (!grouped[cloud]) {\n        grouped[cloud] = [];\n      }\n      grouped[cloud].push(model);\n    }\n  }\n  return grouped;\n};\n\n/**\n  Returns an object containing the grouped model status counts.\n  @param {Object} groupedModelStatuses\n  @returns {Object} The counts for each group of model statuses.\n*/\nconst countModelStatusGroups = (groupedModelStatuses) => {\n  const counts = {\n    blocked: groupedModelStatuses.blocked.length,\n    alert: groupedModelStatuses.alert.length,\n    running: groupedModelStatuses.running.length,\n  };\n  return counts;\n};\n\n/**\n  Uses the supplied filters object to filter down the supplied modelData and\n  returns the filtered object.\n  @param {Object} filters The filters to filter by in the format:\n    {segment: [values]}\n  @param {Object} modelData The model data from the redux store.\n  @param {Array} controllers The controllers from the redux store.\n  @returns {Object} The filtered model data.\n*/\nconst filterModelData = (filters, modelData, controllers) => {\n  const clonedModelData = cloneDeep(modelData);\n  // Add the controller name to the model data where we have a valid name.\n  Object.entries(clonedModelData).forEach((model) => {\n    if (model[1].info) {\n      let controllerName = null;\n      const modelInfo = model[1].info;\n      if (controllers) {\n        Object.entries(controllers).some((controller) => {\n          controllerName = controller[1].find(\n            (controller) => modelInfo[\"controller-uuid\"] === controller.uuid\n          )?.path;\n          return controllerName;\n        });\n      }\n      if (\n        modelInfo[\"controller-uuid\"] === \"a030379a-940f-4760-8fcf-3062b41a04e7\"\n      ) {\n        controllerName = \"JAAS\";\n      }\n      if (!controllerName) {\n        controllerName = modelInfo[\"controller-uuid\"];\n      }\n      modelInfo.controllerName = controllerName;\n    }\n  });\n  if (!filters) {\n    return clonedModelData;\n  }\n  const filterSegments = {};\n\n  // Collect segments from filter data\n  Object.entries(filters).forEach((filter) => {\n    if (filter[1].length === 0) return;\n    if (!filterSegments[filter[0]]) {\n      filterSegments[filter[0]] = [];\n    }\n    filterSegments[filter[0]].push(filter[1]);\n  });\n\n  Object.entries(clonedModelData).forEach(([uuid, data]) => {\n    const modelName = data?.model?.name;\n    const cloud = data?.model && extractCloudName(data.model[\"cloud-tag\"]);\n    const credential =\n      data?.info && extractCredentialName(data.info[\"cloud-credential-tag\"]);\n    const region = data?.model && data.model.region;\n    const owner = data?.info && extractOwnerName(data.info[\"owner-tag\"]);\n    // Combine all of the above to create string for fuzzy custom search\n    const combinedModelAttributes = `${modelName} ${cloud} ${credential} ${region} ${owner}`;\n\n    const remove = Object.entries(filterSegments).some(\n      ([segment, valuesArr]) => {\n        const values = valuesArr[0];\n        switch (segment) {\n          case \"cloud\":\n            return !values.includes(cloud);\n          case \"credential\":\n            if (data.info) {\n              return !values.includes(credential);\n            }\n            break;\n          case \"region\":\n            return !values.includes(region);\n          case \"owner\":\n            if (data.info) {\n              return !values.includes(owner);\n            }\n            break;\n          case \"custom\":\n            function includesMatch(v) {\n              return combinedModelAttributes.includes(v);\n            }\n            return !values.some((v) => includesMatch(v));\n        }\n        return false;\n      }\n    );\n    if (remove) {\n      delete clonedModelData[uuid];\n    }\n  });\n  return clonedModelData;\n};\n\n// ----- Exported functions\n\n/**\n  Gets the model UUID from the supplied name using a memoized selector\n  Usage:\n    const getModelUUIDMemo = useMemo(getModelUUID.bind(null, modelName), [\n      modelName\n    ]);\n\n  @param {String} modelName The name of the model.\n  @returns {Function} The memoized selector to return a modelUUID.\n*/\nexport const getModelUUID = (modelName) => {\n  return createSelector(getModelData, (modelData) =>\n    getModelUUIDByName(modelName, modelData)\n  );\n};\n\n/**\n  Gets the model UUID from the supplied name using a memoized selector\n  Usage:\n    const macaroons = useSelector(getMacaroons);\n\n  @returns {Function} The memoized selector to return the users macaroons.\n*/\nexport const getMacaroons = createSelector(\n  getUserCredentials,\n  getDecodedMacaroons\n);\n\n/**\n  Checks state to see if the user is logged in.\n  Usage:\n    const userIsLoggedIn = useSelector(isLoggedIn);\n\n  @param {Object} state The application state.\n  @returns {Boolean} If the user is logged in.\n*/\nexport const isLoggedIn = (wsControllerURL, state) => {\n  return state.root.controllerConnections?.[wsControllerURL]?.info?.user\n    ?.identity;\n};\n\nexport const getControllerConnection = (wsControllerURL, state) =>\n  state?.root?.controllerConnections?.[wsControllerURL];\n\nexport const getControllerConnections = (state) =>\n  state?.root?.controllerConnections;\n\nexport const isConnecting = (state) => !!state.root.visitURL;\n/**\n  Returns the users current controller logged in identity\n  @param {String} wsControllerURL The controller url to make the query on.\n  @param {Object} state The application state.\n  @returns {String} The users userTag.\n*/\nexport const getActiveUserTag = (wsControllerURL, state) =>\n  state?.root?.controllerConnections?.[wsControllerURL]?.info.user.identity;\n\n/**\n  Returns a model status for the supplied modelUUID.\n  @param {String} modelUUID The model UUID to fetch the status for\n  @returns {Function} The memoized selector to return the model status.\n*/\nexport const getModelStatus = (modelUUID) => {\n  return createSelector(getModelData, (modelData) =>\n    getModelDataByUUID(modelUUID, modelData)\n  );\n};\n\n/**\n  Returns the model data filtered and grouped by status.\n  @param {Object} filters The filters to filter the model data by.\n  @returns {Object} The filtered and grouped model data.\n*/\nexport const getGroupedByStatusAndFilteredModelData = (filters) =>\n  createSelector(getFilteredModelData(filters), groupModelsByStatus);\n\n/**\n  Returns the model data filtered and grouped by cloud.\n  @param {Object} filters The filters to filter the model data by.\n  @returns {Object} The filtered and grouped model data.\n*/\nexport const getGroupedByCloudAndFilteredModelData = (filters) =>\n  createSelector(getFilteredModelData(filters), groupModelsByCloud);\n\n/**\n  Returns the model data filtered and grouped by owner.\n  @param {Object} filters The filters to filter the model data by.\n  @returns {Object} The filtered and grouped model data.\n*/\nexport const getGroupedByOwnerAndFilteredModelData = (filters) =>\n  createSelector(getFilteredModelData(filters), groupModelsByOwner);\n\n/**\n  Returns the model statuses sorted by status.\n  @returns {Function} The memoized selector to return the sorted model statuses.\n*/\nexport const getGroupedModelDataByStatus = createSelector(\n  getModelData,\n  groupModelsByStatus\n);\n\n/**\n  Returns the machine instances sorted by status.\n  @returns {Function} The memoized selector to return the sorted machine instances.\n*/\nexport const getGroupedMachinesDataByStatus = createSelector(\n  getModelData,\n  groupMachinesByStatus\n);\n\n/**\n  Returns the unit instances sorted by status.\n  @returns {Function} The memoized selector to return the sorted unit instances.\n*/\nexport const getGroupedUnitsDataByStatus = createSelector(\n  getModelData,\n  groupUnitsByStatus\n);\n\n/**\n  Returns the application instances sorted by status.\n  @returns {Function} The memoized selector to return the sorted application instances.\n*/\nexport const getGroupedApplicationsDataByStatus = createSelector(\n  getModelData,\n  groupApplicationsByStatus\n);\n\n/**\n  Returns the counts of the model statuses\n  @returns {Function} The memoized selector to return the model status counts.\n*/\nexport const getGroupedModelStatusCounts = createSelector(\n  getGroupedModelDataByStatus,\n  countModelStatusGroups\n);\n\n/**\n  Returns the fully qualified websocket controller API URL.\n  @returns {Function} The memoized selector to return the controller websocket api url.\n*/\nexport const getWSControllerURL = createSelector(\n  getConfig,\n  (config) => config.controllerAPIEndpoint\n);\n\n/**\n  Returns the controller data in the format of an Object.entries output.\n  [wsControllerURL, [data]]\n  @param {String} controllerUUID The full controller UUID.\n  @returns {Array} The controller data in the format of an Object.entries output.\n*/\nexport const getControllerDataByUUID = (controllerUUID) => {\n  return createSelector(getControllerData, (controllerData) => {\n    if (!controllerData) return null;\n    const found = Object.entries(controllerData).find((controller) => {\n      // Loop through the sub controllers for each primary controller.\n      // This is typically only seen in JAAS. Outside of JAAS there is only ever\n      // a single sub controller.\n      return controller[1].find(\n        (subController) => controllerUUID === subController.uuid\n      );\n    });\n    return found;\n  });\n};\n\n/**\n  @param {String} controllerUUID The full controller UUID.\n  @returns {Object} The controllerData.\n*/\nexport const getModelControllerDataByUUID = (controllerUUID) => {\n  return createSelector(getControllerData, (controllerData) => {\n    if (!controllerData) return null;\n    let modelController = null;\n    Object.entries(controllerData).some((controller) => {\n      // Loop through the sub controllers for each primary controller.\n      // This is typically only seen in JAAS. Outside of JAAS there is only ever\n      // a single sub controller.\n      const modelControllerData = controller[1].find(\n        (subController) => controllerUUID === subController.uuid\n      );\n      if (modelControllerData) {\n        modelController = modelControllerData;\n        return true;\n      }\n      return false;\n    });\n    // This adds the controller url to existing model controller info so it can be used to access the\n    // write facades on the api\n    const clonedModelController = cloneDeep(modelController);\n    if (clonedModelController) {\n      clonedModelController.url = Object.keys(controllerData)[0];\n    }\n    return clonedModelController;\n  });\n};\n","/**\n  Juju Admin version 3.\n  This facade is available on:\n    Controller-machine-agent\n    Machine-agent\n    Unit-agent\n    Controllers\n    Models\n\n  NOTE: This file was generated on Wed, 20 Jul 2022 18:17:45 GMT using\n  the Juju schema from  Juju 3.0-beta3 at the git SHA 1ec5e6d156.\n  Do not manually edit this file.\n*/\nimport { autoBind } from \"../utils.js\";\n/**\n  admin is the only object that unlogged-in clients can access. It holds any\n  methods that are needed to log in.\n*/\nclass AdminV3 {\n    constructor(transport, info) {\n        this.version = 3;\n        this._transport = transport;\n        this._info = info;\n        // Automatically bind all methods to instances.\n        autoBind(this);\n    }\n    /**\n      Login logs in with the provided credentials.  All subsequent requests on the\n      connection will act as the authenticated user.\n    */\n    login(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Admin',\n                request: 'Login',\n                version: 3,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      RedirectInfo returns redirected host information for the model.\n      In Juju it always returns an error because the Juju controller\n      does not multiplex controllers.\n    */\n    redirectInfo() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Admin',\n                request: 'RedirectInfo',\n                version: 3,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n}\nAdminV3.NAME = 'Admin';\nAdminV3.VERSION = 3;\nexport default AdminV3;\n//# sourceMappingURL=admin-v3.js.map","// Copyright 2020 Canonical Ltd.\n// Licensed under the LGPLv3, see LICENCE.txt file for details.\n/**\n  This library is the JavaScript Juju API client. Use the connect function to\n  get access to the API. See the examples/ folder for detailed examples on how\n  to use this API.\n*/\nimport Admin from \"./facades/admin-v3.js\";\nimport { createAsyncHandler } from \"./utils.js\";\n/**\n  Connect to the Juju controller or model at the given URL.\n\n  @param {String} url The WebSocket URL of the Juju controller or model.\n  @param {Object} options Connections options, including:\n    - facades (default=[]): the list of facade classes to include in the API\n      connection object. Those classes are usually auto-generated and can be\n      found in the facades directory of the project. When multiple versions of\n      the same facade are included, the most recent version supported by the\n      server is made available as part of the connection object;\n    - debug (default=false): when enabled, all API messages are logged at debug\n      level;\n    - wsclass (default=W3C browser native WebSocket): the WebSocket class to\n      use for opening the connection and sending/receiving messages. Server\n      side, require('websocket').w3cwebsocket can be used safely, as it\n      implements the W3C browser native WebSocket API;\n    - bakery (default: null): the bakery client to use when macaroon discharges\n      are required, in the case an external user is used to connect to Juju;\n      see <https://www.npmjs.com/package/macaroon-bakery>;\n    - closeCallback: a callback to be called with the exit code when the\n      connection is closed.\n  @param {Function} [callback=null] Called when the connection is made, the\n    callback receives an error and a client object. If there are no errors, the\n    client can be used to login and logout to Juju. See the docstring for the\n    Client class for information on how to use the client.\n  @return {Promise} This promise will be rejected if there is an error\n    connecting, or resolved with a new Client instance. Note that the promise\n    will not be resolved or rejected if a callback is provided.\n*/\nfunction connect(url, options = {}, callback = null) {\n    if (!options.bakery) {\n        options.bakery = null;\n    }\n    if (!options.closeCallback) {\n        options.closeCallback = () => { };\n    }\n    if (!options.debug) {\n        options.debug = false;\n    }\n    if (!options.facades) {\n        options.facades = [];\n    }\n    if (!options.wsclass) {\n        console.error(\"No websocket provided. define 'wsclass'.\");\n    }\n    return new Promise((resolve, reject) => {\n        // Instantiate the WebSocket, and make the client available when the\n        // connection is open.\n        // @ts-ignore The following line is ignored because TS thinks that\n        // WebSocket is not instantiable.\n        const ws = new options.wsclass(url);\n        const handler = createAsyncHandler(callback, resolve, reject);\n        ws.onopen = (evt) => {\n            handler(null, new Client(ws, options));\n        };\n        ws.onclose = (evt) => {\n            handler(\"cannot connect WebSocket: \" + evt.reason, null);\n        };\n        ws.onerror = (evt) => {\n            console.log(\"--\", evt);\n        };\n    });\n}\n/**\n  Connect to the Juju controller or model at the given URL and the authenticate\n  using the given credentials.\n\n  @param {String} url The WebSocket URL of the Juju controller or model.\n  @param {Object} credentials An object with the user and password fields for\n    userpass authentication or the macaroons field for bakery authentication.\n    If an empty object is provided a full bakery discharge will be attempted\n    for logging in with macaroons. Any necessary third party discharges are\n    performed using the bakery instance provided in the options (see below).\n  @param {Object} options Connections options, including:\n    - facades (default=[]): the list of facade classes to include in the API\n      connection object. Those classes are usually auto-generated and can be\n      found in the facades directory of the project. When multiple versions of\n      the same facade are included, the most recent version supported by the\n      server is made available as part of the connection object;\n    - debug (default=false): when enabled, all API messages are logged at debug\n      level;\n    - wsclass (default=W3C browser native WebSocket): the WebSocket class to\n      use for opening the connection and sending/receiving messages. Server\n      side, require('websocket').w3cwebsocket can be used safely, as it\n      implements the W3C browser native WebSocket API;\n    - bakery (default: null): the bakery client to use when macaroon discharges\n      are required, in the case an external user is used to connect to Juju;\n      see <https://www.npmjs.com/package/macaroon-bakery>;\n    - closeCallback: a callback to be called with the exit code when the\n      connection is closed.\n  @return {Promise} This promise will be rejected if there is an error\n    connecting, or resolved with a new {conn, logout} object. Note that the\n    promise will not be resolved or rejected if a callback is provided.\n*/\nfunction connectAndLogin(url, credentials, options) {\n    return new Promise(async (resolve, reject) => {\n        // Connect to Juju.\n        let juju;\n        try {\n            juju = await connect(url, options);\n            const conn = await juju.login(credentials);\n            resolve({ conn, logout: juju.logout.bind(juju) });\n        }\n        catch (error) {\n            if (!juju || !juju.isRedirectionError(error)) {\n                reject(error);\n                return;\n            }\n            // Redirect to the real model.\n            juju && juju.logout();\n            for (let i = 0; i < error.servers.length; i++) {\n                const srv = error.servers[i][0];\n                // TODO(frankban): we should really try to connect to all servers and\n                // just use the first connection available, without second guessing\n                // that the public hostname is reachable.\n                if (srv.type === \"hostname\" && srv.scope === \"public\") {\n                    // This is a public server with a dns-name, connect to it.\n                    const generateURL = (uuidOrURL, srv) => {\n                        let uuid = uuidOrURL;\n                        if (uuid.startsWith(\"wss://\") || uuid.startsWith(\"ws://\")) {\n                            const parts = uuid.split(\"/\");\n                            uuid = parts[parts.length - 2];\n                        }\n                        return `wss://${srv.value}:${srv.port}/model/${uuid}/api`;\n                    };\n                    resolve(connectAndLogin(generateURL(url, srv), credentials, options));\n                }\n            }\n            reject(\"cannot connect to model after redirection\");\n        }\n    });\n}\n/**\n  Returns a URL that is to be used to connect to a supplied model uuid on the\n  supplied controller host.\n  @param {String} controllerHost The url that's used to connect to the controller.\n    The `connectAndLogin` method handles redirections so the public URL is fine.\n  @param {String} modelUUID The UUID of the model to connect to.\n  @returns {String} The fully qualified wss URL to connect to the model.\n*/\nfunction generateModelURL(controllerHost, modelUUID) {\n    return `wss://${controllerHost}/model/${modelUUID}/api`;\n}\n/**\n  A Juju API client allowing for logging in and get access to facades.\n\n  @param {Object} ws The WebSocket instance already connected to a Juju\n    controller or model.\n  @param {Object} options Connections options. See the connect documentation\n    above for a description of available options.\n*/\nclass Client {\n    constructor(ws, options) {\n        // Instantiate the transport, used for sending messages to the server.\n        this._transport = new Transport(ws, options.closeCallback, options.debug);\n        this._facades = options.facades;\n        this._bakery = options.bakery;\n        this._admin = new Admin(this._transport, {});\n    }\n    /**\n      Log in to Juju.\n  \n      @param {Object} credentials An object with the user and password fields for\n        userpass authentication or the macaroons field for bakery authentication.\n        If an empty object is provided a full bakery discharge will be attempted\n        for logging in with macaroons. Any necessary third party discharges are\n        performed using the bakery instance originally provided to connect().\n      @return {Promise} This promise will be rejected if there is an error\n        connecting, or resolved with a new connection instance. Note that the\n        promise will not be resolved or rejected if a callback is provided.\n    */\n    login(credentials) {\n        const args = {};\n        const url = this._transport._ws.url;\n        const origin = new URL(url).origin;\n        if (credentials.username && credentials.password) {\n            args.credentials = credentials.password;\n            args[\"auth-tag\"] = `user-${credentials.username}`;\n        }\n        else {\n            const macaroons = this._bakery.storage.get(origin);\n            let deserialized;\n            if (macaroons) {\n                deserialized = JSON.parse(atob(macaroons));\n            }\n            args.macaroons = [deserialized];\n        }\n        // XXX This should be generated by the version of Juju\n        args[\"client-version\"] = \"3.0.0\";\n        return new Promise(async (resolve, reject) => {\n            try {\n                const response = await this._admin.login(args);\n                const dischargeRequired = response[\"discharge-required\"] ||\n                    response[\"bakery-discharge-required\"];\n                if (dischargeRequired) {\n                    if (!this._bakery) {\n                        reject(\"macaroon discharge required but no bakery instance provided\");\n                        return;\n                    }\n                    const onSuccess = (macaroons) => {\n                        // Store the macaroon in the bakery for the next connections.\n                        const serialized = btoa(JSON.stringify(macaroons));\n                        this._bakery.storage.set(origin, serialized, () => { });\n                        // Send the login request again including the discharge macaroons.\n                        credentials.macaroons = [macaroons];\n                        return resolve(this.login(credentials));\n                    };\n                    const onFailure = (err) => {\n                        reject(\"macaroon discharge failed: \" + err);\n                    };\n                    this._bakery.discharge(dischargeRequired, onSuccess, onFailure);\n                    return;\n                }\n                else if (response === REDIRECTION_ERROR) {\n                    // This is should be handled by any user of this login method.\n                    throw response;\n                }\n                else if (response === INVALIDCREDENTIALS_ERROR) {\n                    throw `response\nHave you been granted permission to a model on this controller?`;\n                }\n                else if (response === PERMISSIONDENIED_ERROR) {\n                    throw `response\nEnsure that you've been given 'login' permission on this controller.`;\n                }\n                else if (typeof response === \"string\") {\n                    // If the response is a string and not an object it's an error\n                    // message and surface that back to the user.\n                    throw response;\n                }\n                resolve(new Connection(this._transport, this._facades, response));\n            }\n            catch (error) {\n                if (error !== REDIRECTION_ERROR) {\n                    reject(error);\n                    return;\n                }\n                // This is a model redirection error, fetch the redirection information.\n                try {\n                    const info = await this._admin.redirectInfo();\n                    reject(new RedirectionError(info));\n                    return;\n                }\n                catch (error) {\n                    reject(error);\n                    return;\n                }\n            }\n        });\n    }\n    /**\n      Log out from Juju.\n  \n      @param {Function} callback Called when the logout process completes and the\n        connection is closed, the callback receives the close code and optionally\n        another callback. It is responsibility of the callback to call the\n        provided callback if present.\n    */\n    logout(callback) {\n        this._transport.close(callback);\n    }\n    /**\n      Report whether the given error is a redirection error from Juju.\n  \n      @param {Any} err The error returned by the login request.\n      @returns {Boolean} Whether the given error is a redirection error.\n    */\n    isRedirectionError(err) {\n        return err instanceof RedirectionError;\n    }\n}\n// Define the redirect error returned by Juju, and the one returned by the API.\nconst REDIRECTION_ERROR = \"redirection required\";\nconst INVALIDCREDENTIALS_ERROR = \"invalid entity name or password\";\nconst PERMISSIONDENIED_ERROR = \"permission denied\";\nclass RedirectionError {\n    constructor(info) {\n        this.servers = info.servers;\n        this.caCert = info[\"ca-cert\"];\n    }\n}\n/**\n  A transport providing the ability of sending and receiving WebSocket messages\n  to and from Juju controllers and models.\n\n  @param {Object} ws The WebSocket instance already connected to a Juju\n    controller or model.\n  @param {Function} closeCallback A callback to be called after the transport\n    closes the connection. The callback receives the close code.\n  @param {Boolean} debug When enabled, all API messages are logged at debug\n    level.\n*/\nclass Transport {\n    constructor(ws, closeCallback, debug) {\n        this._ws = ws;\n        this._counter = 0;\n        this._callbacks = {};\n        this._closeCallback = closeCallback;\n        this._debug = debug;\n        ws.onmessage = (evt) => {\n            if (this._debug) {\n                console.debug(\"<--\", evt.data);\n            }\n            this._handle(evt.data);\n        };\n        ws.onclose = (evt) => {\n            if (this._debug) {\n                console.debug(\"close:\", evt.code, evt.reason);\n            }\n            this._closeCallback(evt.code);\n        };\n    }\n    /**\n      Send a message to Juju.\n  \n      @param {Object} req A Juju API request, typically in the form of an object\n        like {type: 'Client', request: 'DoSomething', version: 1, params: {}}.\n        The request must not be already serialized and must not include the\n        request id, as those are responsibilities of the transport.\n      @param {Function} resolve Function called when the request is successful.\n      @param {Function} reject Function called when the request is not successful.\n    */\n    write(req, resolve, reject) {\n        // Check that the connection is ready and sane.\n        const state = this._ws.readyState;\n        if (state !== 1) {\n            const reqStr = JSON.stringify(req);\n            const error = `cannot send request ${reqStr}: connection state ${state} is not open`;\n            reject(error);\n        }\n        this._counter += 1;\n        // Include the current request id in the request.\n        req[\"request-id\"] = this._counter;\n        this._callbacks[this._counter] = resolve;\n        const msg = JSON.stringify(req);\n        if (this._debug) {\n            console.debug(\"-->\", msg);\n        }\n        // Send the request to Juju.\n        this._ws.send(msg);\n    }\n    /**\n      Close the transport, and therefore the connection.\n  \n      @param {Function} callback Called after the transport is closed, the\n        callback receives the close code and optionally another callback. It is\n        responsibility of the callback to call the provided callback if present.\n    */\n    close(callback) {\n        const closeCallback = this._closeCallback;\n        this._closeCallback = (code) => {\n            if (callback) {\n                callback(code, closeCallback);\n                return;\n            }\n            closeCallback(code);\n        };\n        this._ws.close();\n    }\n    /**\n      Handle responses arriving from Juju.\n  \n      @param {String} data: the raw response from Juju, usually as a JSON encoded\n        string.\n    */\n    _handle(data) {\n        const resp = JSON.parse(data);\n        const id = resp[\"request-id\"];\n        const callback = this._callbacks[id];\n        delete this._callbacks[id];\n        if (callback) {\n            callback(resp.error || resp.response);\n        }\n    }\n}\n/**\n  A connection to a Juju controller or model. This is the object users use to\n  perform Juju API calls, as it provides access to all available facades\n  (conn.facades), to a transport connected to Juju (conn.transport) and to\n  information about the connected Juju server (conn.info).\n\n  @param {Object} transport The Transport instance used to communicate with\n    Juju. The transport is available exposed to users via the transport\n    property of the connection instance. See the Transport docstring for\n    information on how to use the transport, typically calling transport.write.\n  @param {Object} facades The facade classes provided in the facades property\n    of the options provided to the connect function. When the connection is\n    instantiated, the matching available facades as declared by Juju are\n    instantiated and access to them is provided via the facades property of the\n    connection.\n  @param {Object} loginResult The result to the Juju login request. It includes\n    information about the Juju server and available facades. This info is made\n    available via the info property of the connection instance.\n*/\nclass Connection {\n    constructor(transport, facades, loginResult) {\n        // Store the transport used for sending messages to Juju.\n        this.transport = transport;\n        this.loginResult = loginResult\n        // Populate info.\n        this.info = {\n            controllerTag: loginResult[\"controller-tag\"],\n            serverVersion: loginResult[\"server-version\"],\n            servers: loginResult.servers,\n            user: loginResult[\"user-info\"],\n            getFacade: (name) => {\n                return this.facades[name];\n            },\n        };\n        // Handle facades.\n        const registered = facades.reduce((previous, current) => {\n            previous[current.NAME] = current;\n            return previous;\n        }, {});\n        this.facades = loginResult.facades.reduce((previous, current) => {\n            const facadeClass = registered[current.name];\n            if (facadeClass && current.versions.includes(facadeClass.VERSION)) {\n                const facadeName = uncapitalize(facadeClass.NAME);\n                previous[facadeName] = new facadeClass(this.transport, this.info);\n                return previous;\n            }\n            return previous;\n        }, {});\n    }\n}\n/**\n  Convert ThisString to thisString and THATString to thatString.\n\n  @param {String} text A StringLikeThis.\n  @returns {String} A stringLikeThis.\n*/\nfunction uncapitalize(text) {\n    if (!text) {\n        return \"\";\n    }\n    const isLower = (char) => char.toLowerCase() === char;\n    if (isLower(text[0])) {\n        return text;\n    }\n    const uppers = [];\n    for (let i = 0; i < text.length; i++) {\n        const char = text.charAt(i);\n        if (isLower(char)) {\n            break;\n        }\n        uppers.push(char);\n    }\n    if (uppers.length > 1) {\n        uppers.pop();\n    }\n    const prefix = uppers.join(\"\");\n    return prefix.toLowerCase() + text.slice(prefix.length);\n}\nexport { Client, connect, connectAndLogin, generateModelURL };\n//# sourceMappingURL=client.js.map\n","/**\n  Juju Action version 7.\n  This facade is available on:\n    Models\n\n  NOTE: This file was generated on Wed, 20 Jul 2022 18:17:45 GMT using\n  the Juju schema from  Juju 3.0-beta3 at the git SHA 1ec5e6d156.\n  Do not manually edit this file.\n*/\nimport { autoBind } from \"../utils.js\";\n/**\n  APIv7 provides the Action API facade for version 7.\n*/\nclass ActionV7 {\n    constructor(transport, info) {\n        this.version = 7;\n        this._transport = transport;\n        this._info = info;\n        // Automatically bind all methods to instances.\n        autoBind(this);\n    }\n    /**\n      Actions takes a list of ActionTags, and returns the full Action for\n      each ID.\n    */\n    actions(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Action',\n                request: 'Actions',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ApplicationsCharmsActions returns a slice of charm Actions for a slice of\n      services.\n    */\n    applicationsCharmsActions(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Action',\n                request: 'ApplicationsCharmsActions',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      Cancel attempts to cancel enqueued Actions from running.\n    */\n    cancel(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Action',\n                request: 'Cancel',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      EnqueueOperation takes a list of Actions and queues them up to be executed as\n      an operation, each action running as a task on the designated ActionReceiver.\n      We return the ID of the overall operation and each individual task.\n    */\n    enqueueOperation(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Action',\n                request: 'EnqueueOperation',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ListOperations fetches the called actions for specified apps/units.\n    */\n    listOperations(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Action',\n                request: 'ListOperations',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      Operations fetches the specified operation ids.\n    */\n    operations(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Action',\n                request: 'Operations',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      Run the commands specified on the machines identified through the\n      list of machines, units and services.\n    */\n    run(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Action',\n                request: 'Run',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      RunOnAllMachines attempts to run the specified command on all the machines.\n    */\n    runOnAllMachines(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Action',\n                request: 'RunOnAllMachines',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      WatchActionsProgress creates a watcher that reports on action log messages.\n    */\n    watchActionsProgress(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Action',\n                request: 'WatchActionsProgress',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n}\nActionV7.NAME = 'Action';\nActionV7.VERSION = 7;\nexport default ActionV7;\n//# sourceMappingURL=action-v7.js.map","/**\n  Juju AllWatcher version 2.\n  This facade is available on:\n    Models\n\n  NOTE: This file was generated on Wed, 20 Jul 2022 18:17:45 GMT using\n  the Juju schema from  Juju 3.0-beta3 at the git SHA 1ec5e6d156.\n  Do not manually edit this file.\n*/\nimport { autoBind } from \"../utils.js\";\n/**\n  SrvAllWatcher defines the API methods on a state.Multiwatcher.\n  which watches any changes to the state. Each client has its own\n  current set of watchers, stored in resources. It is used by both\n  the AllWatcher and AllModelWatcher facades.\n*/\nclass AllWatcherV2 {\n    constructor(transport, info) {\n        this.version = 2;\n        this._transport = transport;\n        this._info = info;\n        // Automatically bind all methods to instances.\n        autoBind(this);\n    }\n    /**\n      Next will return the current state of everything on the first call\n      and subsequent calls will\n    */\n    next() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'AllWatcher',\n                request: 'Next',\n                version: 2,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      Stop stops the watcher.\n    */\n    stop() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'AllWatcher',\n                request: 'Stop',\n                version: 2,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n}\nAllWatcherV2.NAME = 'AllWatcher';\nAllWatcherV2.VERSION = 2;\nexport default AllWatcherV2;\n//# sourceMappingURL=all-watcher-v2.js.map","/**\n  Juju Annotations version 2.\n  This facade is available on:\n    Models\n\n  NOTE: This file was generated on Wed, 20 Jul 2022 18:17:45 GMT using\n  the Juju schema from  Juju 3.0-beta3 at the git SHA 1ec5e6d156.\n  Do not manually edit this file.\n*/\nimport { autoBind } from \"../utils.js\";\n/**\n  API implements the service interface and is the concrete\n  implementation of the api end point.\n*/\nclass AnnotationsV2 {\n    constructor(transport, info) {\n        this.version = 2;\n        this._transport = transport;\n        this._info = info;\n        // Automatically bind all methods to instances.\n        autoBind(this);\n    }\n    /**\n      Get returns annotations for given entities.\n      If annotations cannot be retrieved for a given entity, an error is returned.\n      Each entity is treated independently and, hence, will fail or succeed independently.\n    */\n    get(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Annotations',\n                request: 'Get',\n                version: 2,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      Set stores annotations for given entities\n    */\n    set(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Annotations',\n                request: 'Set',\n                version: 2,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n}\nAnnotationsV2.NAME = 'Annotations';\nAnnotationsV2.VERSION = 2;\nexport default AnnotationsV2;\n//# sourceMappingURL=annotations-v2.js.map","/**\n  Juju Application version 14.\n  This facade is available on:\n    Controller-machine-agent\n    Machine-agent\n    Unit-agent\n    Models\n\n  NOTE: This file was generated on Wed, 20 Jul 2022 18:17:45 GMT using\n  the Juju schema from  Juju 3.0-beta3 at the git SHA 1ec5e6d156.\n  Do not manually edit this file.\n*/\nimport { autoBind } from \"../utils.js\";\n/**\n  APIv14 provides the Application API facade for version 14.\n*/\nclass ApplicationV14 {\n    constructor(transport, info) {\n        this.version = 14;\n        this._transport = transport;\n        this._info = info;\n        // Automatically bind all methods to instances.\n        autoBind(this);\n    }\n    /**\n      AddRelation adds a relation between the specified endpoints and returns the relation info.\n    */\n    addRelation(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'AddRelation',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      AddUnits adds a given number of units to an application.\n    */\n    addUnits(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'AddUnits',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ApplicationsInfo returns applications information.\n    */\n    applicationsInfo(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'ApplicationsInfo',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      CharmConfig returns charm config for the input list of applications and\n      model generations.\n    */\n    charmConfig(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'CharmConfig',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      CharmRelations implements the server side of Application.CharmRelations.\n    */\n    charmRelations(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'CharmRelations',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      Consume adds remote applications to the model without creating any\n      relations.\n    */\n    consume(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'Consume',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      Deploy fetches the charms from the charm store and deploys them\n      using the specified placement directives.\n    */\n    deploy(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'Deploy',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      Destroy destroys a given application, local or remote.\n      \n      NOTE(axw) this exists only for backwards compatibility,\n      for API facade versions 1-3; clients should prefer its\n      successor, DestroyApplication, below. Until all consumers\n      have been updated, or we bump a major version, we can't\n      drop this.\n      \n      TODO(axw) 2017-03-16 #1673323\n      Drop this in Juju 3.0.\n    */\n    destroy(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'Destroy',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      DestroyApplication removes a given set of applications.\n    */\n    destroyApplication(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'DestroyApplication',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      DestroyConsumedApplications removes a given set of consumed (remote) applications.\n    */\n    destroyConsumedApplications(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'DestroyConsumedApplications',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      DestroyRelation removes the relation between the\n      specified endpoints or an id.\n    */\n    destroyRelation(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'DestroyRelation',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      DestroyUnit removes a given set of application units.\n    */\n    destroyUnit(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'DestroyUnit',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      DestroyUnits removes a given set of application units.\n      \n      NOTE(axw) this exists only for backwards compatibility,\n      for API facade versions 1-3; clients should prefer its\n      successor, DestroyUnit, below. Until all consumers have\n      been updated, or we bump a major version, we can't drop\n      this.\n      \n      TODO(axw) 2017-03-16 #1673323\n      Drop this in Juju 3.0.\n    */\n    destroyUnits(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'DestroyUnits',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      Expose changes the juju-managed firewall to expose any ports that\n      were also explicitly marked by units as open.\n    */\n    expose(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'Expose',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      Get returns the charm configuration for an application.\n    */\n    get(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'Get',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      GetCharmURLOrigin returns the charm URL and charm origin the given\n      application is running at present.\n    */\n    getCharmURLOrigin(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'GetCharmURLOrigin',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      GetConfig returns the charm config for each of the input applications.\n    */\n    getConfig(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'GetConfig',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      GetConstraints returns the constraints for a given application.\n    */\n    getConstraints(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'GetConstraints',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      Leader returns the unit name of the leader for the given application.\n    */\n    leader(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'Leader',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      MergeBindings merges operator-defined bindings with the current bindings for\n      one or more applications.\n    */\n    mergeBindings(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'MergeBindings',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ResolveUnitErrors marks errors on the specified units as resolved.\n    */\n    resolveUnitErrors(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'ResolveUnitErrors',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ScaleApplications scales the specified application to the requested number of units.\n    */\n    scaleApplications(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'ScaleApplications',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      SetCharm sets the charm for a given for the application.\n    */\n    setCharm(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'SetCharm',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      SetConfigs implements the server side of Application.SetConfig.  Both\n      application and charm config are set. It does not unset values in\n      Config map that are set to an empty string. Unset should be used for that.\n    */\n    setConfigs(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'SetConfigs',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      SetConstraints sets the constraints for a given application.\n    */\n    setConstraints(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'SetConstraints',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      SetMetricCredentials sets credentials on the application.\n    */\n    setMetricCredentials(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'SetMetricCredentials',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      SetRelationsSuspended sets the suspended status of the specified relations.\n    */\n    setRelationsSuspended(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'SetRelationsSuspended',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      Unexpose changes the juju-managed firewall to unexpose any ports that\n      were also explicitly marked by units as open.\n    */\n    unexpose(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'Unexpose',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      UnitsInfo returns unit information for the given entities (units or\n      applications).\n    */\n    unitsInfo(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'UnitsInfo',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      UnsetApplicationsConfig implements the server side of Application.UnsetApplicationsConfig.\n    */\n    unsetApplicationsConfig(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'UnsetApplicationsConfig',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      UpdateApplicationSeries updates the application series. Series for\n      subordinates updated too.\n    */\n    updateApplicationSeries(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Application',\n                request: 'UpdateApplicationSeries',\n                version: 14,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n}\nApplicationV14.NAME = 'Application';\nApplicationV14.VERSION = 14;\nexport default ApplicationV14;\n//# sourceMappingURL=application-v14.js.map","/**\n  Juju Client version 5.\n  This facade is available on:\n    Controller-machine-agent\n    Machine-agent\n    Unit-agent\n    Models\n\n  NOTE: This file was generated on Wed, 20 Jul 2022 18:17:45 GMT using\n  the Juju schema from  Juju 3.0-beta3 at the git SHA 1ec5e6d156.\n  Do not manually edit this file.\n*/\nimport { autoBind } from \"../utils.js\";\n/**\n  Client serves client-specific API methods.\n*/\nclass ClientV5 {\n    constructor(transport, info) {\n        this.version = 5;\n        this._transport = transport;\n        this._info = info;\n        // Automatically bind all methods to instances.\n        autoBind(this);\n    }\n    /**\n      FindTools returns a List containing all tools matching the given parameters.\n    */\n    findTools(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Client',\n                request: 'FindTools',\n                version: 5,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      FullStatus gives the information needed for juju status over the api\n    */\n    fullStatus(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Client',\n                request: 'FullStatus',\n                version: 5,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      StatusHistory returns a slice of past statuses for several entities.\n    */\n    statusHistory(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Client',\n                request: 'StatusHistory',\n                version: 5,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      WatchAll initiates a watcher for entities in the connected model.\n    */\n    watchAll() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Client',\n                request: 'WatchAll',\n                version: 5,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n}\nClientV5.NAME = 'Client';\nClientV5.VERSION = 5;\nexport default ClientV5;\n//# sourceMappingURL=client-v5.js.map","/**\n  Juju Cloud version 7.\n  This facade is available on:\n    Controller-machine-agent\n    Machine-agent\n    Unit-agent\n    Controllers\n\n  NOTE: This file was generated on Wed, 20 Jul 2022 18:17:45 GMT using\n  the Juju schema from  Juju 3.0-beta3 at the git SHA 1ec5e6d156.\n  Do not manually edit this file.\n*/\nimport { autoBind } from \"../utils.js\";\n/**\n  CloudAPI implements the cloud interface and is the concrete implementation\n  of the api end point.\n*/\nclass CloudV7 {\n    constructor(transport, info) {\n        this.version = 7;\n        this._transport = transport;\n        this._info = info;\n        // Automatically bind all methods to instances.\n        autoBind(this);\n    }\n    /**\n      AddCloud adds a new cloud, different from the one managed by the controller.\n    */\n    addCloud(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'AddCloud',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      AddCredentials adds new credentials.\n      In contrast to UpdateCredentials() below, the new credentials can be\n      for a cloud that the controller does not manage (this is required\n      for CAAS models)\n    */\n    addCredentials(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'AddCredentials',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      CheckCredentialsModels validates supplied cloud credentials' content against\n      models that currently use these credentials.\n      If there are any models that are using a credential and these models or their\n      cloud instances are not going to be accessible with corresponding credential,\n      there will be detailed validation errors per model.\n      There's no Juju API client which uses this, but JAAS does,\n    */\n    checkCredentialsModels(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'CheckCredentialsModels',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      Cloud returns the cloud definitions for the specified clouds.\n    */\n    cloud(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'Cloud',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      CloudInfo returns information about the specified clouds.\n    */\n    cloudInfo(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'CloudInfo',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      Clouds returns the definitions of all clouds supported by the controller\n      that the logged in user can see.\n    */\n    clouds() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'Clouds',\n                version: 7,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      Credential returns the specified cloud credential for each tag, minus secrets.\n    */\n    credential(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'Credential',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      CredentialContents returns the specified cloud credentials,\n      including the secrets if requested.\n      If no specific credential name/cloud was passed in, all credentials for this user\n      are returned.\n      Only credential owner can see its contents as well as what models use it.\n      Controller admin has no special superpowers here and is treated the same as all other users.\n    */\n    credentialContents(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'CredentialContents',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      InstanceTypes returns instance type information for the cloud and region\n      in which the current model is deployed.\n    */\n    instanceTypes(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'InstanceTypes',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ListCloudInfo returns clouds that the specified user has access to.\n      Controller admins (superuser) can list clouds for any user.\n      Other users can only ask about their own clouds.\n    */\n    listCloudInfo(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'ListCloudInfo',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ModifyCloudAccess changes the model access granted to users.\n    */\n    modifyCloudAccess(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'ModifyCloudAccess',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      RemoveClouds removes the specified clouds from the controller.\n      If a cloud is in use (has models deployed to it), the removal will fail.\n    */\n    removeClouds(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'RemoveClouds',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      RevokeCredentialsCheckModels revokes a set of cloud credentials.\n      If the credentials are used by any of the models, the credential deletion will be aborted.\n      If credential-in-use needs to be revoked nonetheless, this method allows the use of force.\n    */\n    revokeCredentialsCheckModels(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'RevokeCredentialsCheckModels',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      UpdateCloud updates an existing cloud that the controller knows about.\n    */\n    updateCloud(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'UpdateCloud',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      UpdateCredentialsCheckModels updates a set of cloud credentials' content.\n      If there are any models that are using a credential and these models\n      are not going to be visible with updated credential content,\n      there will be detailed validation errors per model.  Such model errors are returned\n      separately and do not contribute to the overall method error status.\n      Controller admins can 'force' an update of the credential\n      regardless of whether it is deemed valid or not.\n    */\n    updateCredentialsCheckModels(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'UpdateCredentialsCheckModels',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      UserCredentials returns the cloud credentials for a set of users.\n    */\n    userCredentials(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Cloud',\n                request: 'UserCredentials',\n                version: 7,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n}\nCloudV7.NAME = 'Cloud';\nCloudV7.VERSION = 7;\nexport default CloudV7;\n//# sourceMappingURL=cloud-v7.js.map","/**\n  Juju Controller version 11.\n  This facade is available on:\n    Controller-machine-agent\n    Machine-agent\n    Unit-agent\n    Controllers\n\n  NOTE: This file was generated on Wed, 20 Jul 2022 18:17:45 GMT using\n  the Juju schema from  Juju 3.0-beta3 at the git SHA 1ec5e6d156.\n  Do not manually edit this file.\n*/\nimport { autoBind } from \"../utils.js\";\n/**\n  ControllerAPI provides the Controller API.\n*/\nclass ControllerV11 {\n    constructor(transport, info) {\n        this.version = 11;\n        this._transport = transport;\n        this._info = info;\n        // Automatically bind all methods to instances.\n        autoBind(this);\n    }\n    /**\n      AllModels allows controller administrators to get the list of all the\n      models in the controller.\n    */\n    allModels() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'AllModels',\n                version: 11,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      CloudSpec returns the model's cloud spec.\n    */\n    cloudSpec(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'CloudSpec',\n                version: 11,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ConfigSet changes the value of specified controller configuration\n      settings. Only some settings can be changed after bootstrap.\n      Settings that aren't specified in the params are left unchanged.\n    */\n    configSet(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'ConfigSet',\n                version: 11,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ControllerAPIInfoForModels returns the controller api connection details for the specified models.\n    */\n    controllerAPIInfoForModels(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'ControllerAPIInfoForModels',\n                version: 11,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ControllerConfig returns the controller's configuration.\n    */\n    controllerConfig() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'ControllerConfig',\n                version: 11,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ControllerVersion returns the version information associated with this\n      controller binary.\n      \n      NOTE: the implementation intentionally does not check for SuperuserAccess\n      as the Version is known even to users with login access.\n    */\n    controllerVersion() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'ControllerVersion',\n                version: 11,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      DashboardConnectionInfo returns the connection information for a client to\n      connect to the Juju Dashboard including any proxying information.\n    */\n    dashboardConnectionInfo() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'DashboardConnectionInfo',\n                version: 11,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      DestroyController destroys the controller.\n      \n      If the args specify the destruction of the models, this method will\n      attempt to do so. Otherwise, if the controller has any non-empty,\n      non-Dead hosted models, then an error with the code\n      params.CodeHasHostedModels will be transmitted.\n    */\n    destroyController(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'DestroyController',\n                version: 11,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      GetCloudSpec constructs the CloudSpec for a validated and authorized model.\n    */\n    getCloudSpec(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'GetCloudSpec',\n                version: 11,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      GetControllerAccess returns the level of access the specified users\n      have on the controller.\n    */\n    getControllerAccess(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'GetControllerAccess',\n                version: 11,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      HostedModelConfigs returns all the information that the client needs in\n      order to connect directly with the host model's provider and destroy it\n      directly.\n    */\n    hostedModelConfigs() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'HostedModelConfigs',\n                version: 11,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      IdentityProviderURL returns the URL of the configured external identity\n      provider for this controller or an empty string if no external identity\n      provider has been configured when the controller was bootstrapped.\n      \n      NOTE: the implementation intentionally does not check for SuperuserAccess\n      as the URL is known even to users with login access.\n    */\n    identityProviderURL() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'IdentityProviderURL',\n                version: 11,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      InitiateMigration attempts to begin the migration of one or\n      more models to other controllers.\n    */\n    initiateMigration(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'InitiateMigration',\n                version: 11,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ListBlockedModels returns a list of all models on the controller\n      which have a block in place.  The resulting slice is sorted by model\n      name, then owner. Callers must be controller administrators to retrieve the\n      list.\n    */\n    listBlockedModels() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'ListBlockedModels',\n                version: 11,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ModelConfig returns the model config for the controller\n      model.  For information on the current model, use\n      client.ModelGet\n    */\n    modelConfig() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'ModelConfig',\n                version: 11,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ModelStatus returns a summary of the model.\n    */\n    modelStatus(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'ModelStatus',\n                version: 11,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ModifyControllerAccess changes the model access granted to users.\n    */\n    modifyControllerAccess(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'ModifyControllerAccess',\n                version: 11,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      MongoVersion allows the introspection of the mongo version per controller\n    */\n    mongoVersion() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'MongoVersion',\n                version: 11,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      RemoveBlocks removes all the blocks in the controller.\n    */\n    removeBlocks(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'RemoveBlocks',\n                version: 11,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      WatchAllModelSummaries starts watching the summary updates from the cache.\n      This method is superuser access only, and watches all models in the\n      controller.\n    */\n    watchAllModelSummaries() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'WatchAllModelSummaries',\n                version: 11,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      WatchAllModels starts watching events for all models in the\n      controller. The returned AllWatcherId should be used with Next on the\n      AllModelWatcher endpoint to receive deltas.\n    */\n    watchAllModels() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'WatchAllModels',\n                version: 11,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      WatchCloudSpecsChanges returns a watcher for cloud spec changes.\n    */\n    watchCloudSpecsChanges(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'WatchCloudSpecsChanges',\n                version: 11,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      WatchModelSummaries starts watching the summary updates from the cache.\n      Only models that the user has access to are returned.\n    */\n    watchModelSummaries() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Controller',\n                request: 'WatchModelSummaries',\n                version: 11,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n}\nControllerV11.NAME = 'Controller';\nControllerV11.VERSION = 11;\nexport default ControllerV11;\n//# sourceMappingURL=controller-v11.js.map","/**\n  Juju ModelManager version 9.\n  This facade is available on:\n    Controller-machine-agent\n    Machine-agent\n    Unit-agent\n    Controllers\n\n  NOTE: This file was generated on Wed, 20 Jul 2022 18:17:45 GMT using\n  the Juju schema from  Juju 3.0-beta3 at the git SHA 1ec5e6d156.\n  Do not manually edit this file.\n*/\nimport { autoBind } from \"../utils.js\";\n/**\n  ModelManagerAPI implements the model manager interface and is\n  the concrete implementation of the api end point.\n*/\nclass ModelManagerV9 {\n    constructor(transport, info) {\n        this.version = 9;\n        this._transport = transport;\n        this._info = info;\n        // Automatically bind all methods to instances.\n        autoBind(this);\n    }\n    /**\n      ChangeModelCredential changes cloud credential reference for models.\n      These new cloud credentials must already exist on the controller.\n    */\n    changeModelCredential(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'ModelManager',\n                request: 'ChangeModelCredential',\n                version: 9,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      CreateModel creates a new model using the account and\n      model config specified in the args.\n    */\n    createModel(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'ModelManager',\n                request: 'CreateModel',\n                version: 9,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      DestroyModels will try to destroy the specified models.\n      If there is a block on destruction, this method will return an error.\n      From ModelManager v7 onwards, DestroyModels gains 'force' and 'max-wait' parameters.\n    */\n    destroyModels(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'ModelManager',\n                request: 'DestroyModels',\n                version: 9,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      DumpModels will export the models into the database agnostic\n      representation. The user needs to either be a controller admin, or have\n      admin privileges on the model itself.\n    */\n    dumpModels(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'ModelManager',\n                request: 'DumpModels',\n                version: 9,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      DumpModelsDB will gather all documents from all model collections\n      for the specified model. The map result contains a map of collection\n      names to lists of documents represented as maps.\n    */\n    dumpModelsDB(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'ModelManager',\n                request: 'DumpModelsDB',\n                version: 9,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ListModelSummaries returns models that the specified user\n      has access to in the current server.  Controller admins (superuser)\n      can list models for any user.  Other users\n      can only ask about their own models.\n    */\n    listModelSummaries(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'ModelManager',\n                request: 'ListModelSummaries',\n                version: 9,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ListModels returns the models that the specified user\n      has access to in the current server.  Controller admins (superuser)\n      can list models for any user.  Other users\n      can only ask about their own models.\n    */\n    listModels(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'ModelManager',\n                request: 'ListModels',\n                version: 9,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ModelDefaultsForClouds returns the default config values for the specified\n      clouds.\n    */\n    modelDefaultsForClouds(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'ModelManager',\n                request: 'ModelDefaultsForClouds',\n                version: 9,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ModelInfo returns information about the specified models.\n    */\n    modelInfo(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'ModelManager',\n                request: 'ModelInfo',\n                version: 9,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ModelStatus returns a summary of the model.\n    */\n    modelStatus(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'ModelManager',\n                request: 'ModelStatus',\n                version: 9,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      ModifyModelAccess changes the model access granted to users.\n    */\n    modifyModelAccess(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'ModelManager',\n                request: 'ModifyModelAccess',\n                version: 9,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      SetModelDefaults writes new values for the specified default model settings.\n    */\n    setModelDefaults(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'ModelManager',\n                request: 'SetModelDefaults',\n                version: 9,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n      UnsetModelDefaults removes the specified default model settings.\n    */\n    unsetModelDefaults(params) {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'ModelManager',\n                request: 'UnsetModelDefaults',\n                version: 9,\n                params: params,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n}\nModelManagerV9.NAME = 'ModelManager';\nModelManagerV9.VERSION = 9;\nexport default ModelManagerV9;\n//# sourceMappingURL=model-manager-v9.js.map","/**\n  Juju Pinger version 1.\n  This facade is available on:\n    Controller-machine-agent\n    Machine-agent\n    Unit-agent\n    Controllers\n    Models\n\n  NOTE: This file was generated on Wed, 20 Jul 2022 18:17:45 GMT using\n  the Juju schema from  Juju 3.0-beta3 at the git SHA 1ec5e6d156.\n  Do not manually edit this file.\n*/\nimport { autoBind } from \"../utils.js\";\n/**\n  pinger describes a resource that can be pinged and stopped.\n*/\nclass PingerV1 {\n    constructor(transport, info) {\n        this.version = 1;\n        this._transport = transport;\n        this._info = info;\n        // Automatically bind all methods to instances.\n        autoBind(this);\n    }\n    /**\n  \n    */\n    ping() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Pinger',\n                request: 'Ping',\n                version: 1,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n    /**\n  \n    */\n    stop() {\n        return new Promise((resolve, reject) => {\n            const req = {\n                type: 'Pinger',\n                request: 'Stop',\n                version: 1,\n            };\n            this._transport.write(req, resolve, reject);\n        });\n    }\n}\nPingerV1.NAME = 'Pinger';\nPingerV1.VERSION = 1;\nexport default PingerV1;\n//# sourceMappingURL=pinger-v1.js.map","const { autoBind } = require(\"@canonical/jujulib/dist/api/utils.js\");\n\n/**\n  pinger describes a resource that can be pinged and stopped.\n*/\nclass JIMMV1 {\n  constructor(transport, info) {\n    this._transport = transport;\n    this._info = info;\n    this.version = 2;\n\n    // Automatically bind all methods to instances.\n    autoBind(this);\n  }\n\n  disableControllerUUIDMasking() {\n    return new Promise((resolve, reject) => {\n      const params = {};\n      const req = {\n        type: \"JIMM\",\n        request: \"DisableControllerUUIDMasking\",\n        version: 2,\n        params: params,\n      };\n      this._transport.write(req, resolve, reject);\n    });\n  }\n\n  listControllers() {\n    return new Promise((resolve, reject) => {\n      const params = {};\n      const req = {\n        type: \"JIMM\",\n        request: \"ListControllers\",\n        version: 2,\n        params: params,\n      };\n      this._transport.write(req, resolve, reject);\n    });\n  }\n}\n\nJIMMV1.NAME = \"JIMM\";\nJIMMV1.VERSION = 2;\nexport default JIMMV1;\n","import cloneDeep from \"clone-deep\";\n\nimport { fetchAndStoreModelStatus } from \"juju\";\n\n// Action labels\nexport const actionsList = {\n  clearControllerData: \"CLEAR_CONTROLLER_DATA\",\n  clearModelData: \"CLEAR_MODEL_DATA\",\n  updateControllerList: \"UPDATE_CONTROLLER_LIST\",\n  updateModelInfo: \"UPDATE_MODEL_INFO\",\n  updateModelStatus: \"UPDATE_MODEL_STATUS\",\n  updateModelList: \"UPDATE_MODEL_LIST\",\n  processAllWatcherDeltas: \"PROCESS_ALL_WATCHER_DELTAS\",\n  populateMissingAllWatcherData: \"POPULATE_MISSING_ALLWATCHER_DATA\",\n};\n\n// Action creators\n\nexport function clearModelData() {\n  return {\n    type: actionsList.clearModelData,\n  };\n}\n\nexport function clearControllerData() {\n  return {\n    type: actionsList.clearControllerData,\n  };\n}\n\n/**\n  @param {String} wsControllerURL The URL of the websocket connection.\n  @param {Array} controllers The list of controllers to store.\n*/\nexport function updateControllerList(wsControllerURL, controllers) {\n  return {\n    type: actionsList.updateControllerList,\n    payload: {\n      wsControllerURL,\n      controllers,\n    },\n  };\n}\n\n/**\n  @param {Array} models The list of models to store.\n*/\nexport function updateModelList(models) {\n  return {\n    type: actionsList.updateModelList,\n    payload: models,\n  };\n}\n\n/**\n  @param {String} modelUUID The modelUUID of the model to store the\n    status under.\n  @param {Object} status The status data as returned from the API.\n */\nexport function updateModelStatus(modelUUID, status) {\n  return {\n    type: actionsList.updateModelStatus,\n    payload: {\n      modelUUID,\n      status,\n    },\n  };\n}\n\n/**\n  @param {Object} modelInfo The model info data as returned from the API.\n */\nexport function updateModelInfo(modelInfo) {\n  return {\n    type: actionsList.updateModelInfo,\n    payload: modelInfo,\n  };\n}\n\n/**\n  @param {Array} deltas An array of deltas from the AllWatcher.\n*/\nexport function processAllWatcherDeltas(deltas) {\n  return {\n    type: actionsList.processAllWatcherDeltas,\n    payload: deltas,\n  };\n}\n\n/**\n  @param {Object} status The status data from an `fullStatus` API call.\n*/\nexport function populateMissingAllWatcherData(uuid, status) {\n  return {\n    type: actionsList.populateMissingAllWatcherData,\n    payload: { status, uuid },\n  };\n}\n\n// Thunks\n\n/**\n  Returns the model status that's stored in the database if it exists or makes\n  another call to request it if it doesn't.\n  @param {String} modelUUID The UUID of the model to request the status of.\n */\nexport function fetchModelStatus(modelUUID) {\n  return async function fetchModelStatus(dispatch, getState) {\n    const jujuState = getState().juju;\n    if (jujuState.modelStatuses && jujuState.modelStatuses[modelUUID]) {\n      // It already exists, don't do anything as it'll be updated shortly\n      // by the polling loop.\n      return;\n    }\n    fetchAndStoreModelStatus(modelUUID, dispatch, getState);\n  };\n}\n\n/**\n  Updates the correct controller entry with a cloud and region fetched from\n  the supplied model info call.\n  @param {String} modelInfo The response from a modelInfo call.\n*/\nexport function addControllerCloudRegion(wsControllerURL, modelInfo) {\n  return async function addControllerCloudRegion(dispatch, getState) {\n    const controllers = getState()?.juju?.controllers[wsControllerURL];\n    const model = modelInfo.results[0].result;\n    if (controllers) {\n      const updatedControllers = cloneDeep(controllers).map((controller) => {\n        if (controller.uuid === model[\"controller-uuid\"]) {\n          controller.location = {\n            cloud: model[\"cloud-region\"],\n            region: model[\"cloud-tag\"].replace(\"cloud-\", \"\"),\n          };\n        }\n        return controller;\n      });\n      dispatch(updateControllerList(wsControllerURL, updatedControllers), {\n        wsControllerURL,\n      });\n    } else {\n      console.log(\n        \"attempting to update non-existent controller:\",\n        wsControllerURL\n      );\n    }\n  };\n}\n","import Limiter from \"async-limiter\";\nimport { connect, connectAndLogin } from \"@canonical/jujulib\";\n\nimport actions from \"@canonical/jujulib/dist/api/facades/action-v7\";\nimport allWatcher from \"@canonical/jujulib/dist/api/facades/all-watcher-v2\";\nimport annotations from \"@canonical/jujulib/dist/api/facades/annotations-v2\";\nimport applications from \"@canonical/jujulib/dist/api/facades/application-v14\";\nimport client from \"@canonical/jujulib/dist/api/facades/client-v5\";\nimport cloud from \"@canonical/jujulib/dist/api/facades/cloud-v7\";\nimport controller from \"@canonical/jujulib/dist/api/facades/controller-v11\";\nimport modelManager from \"@canonical/jujulib/dist/api/facades/model-manager-v9\";\nimport pinger from \"@canonical/jujulib/dist/api/facades/pinger-v1\";\n\nimport jimm from \"app/jimm-facade\";\nimport { isSet } from \"app/utils/utils\";\n\nimport {\n  getBakery,\n  getConfig,\n  getControllerConnection,\n  isLoggedIn,\n  getUserPass,\n  getWSControllerURL,\n} from \"app/selectors\";\nimport {\n  addControllerCloudRegion,\n  processAllWatcherDeltas,\n  updateControllerList,\n  updateModelInfo,\n  updateModelStatus,\n} from \"./actions\";\n\n/**\n  Return a common connection option config.\n  @param {Boolean} usePinger If the connection will be long lived then use the\n    pinger. Defaults to false.\n  @param {Object} bakery A bakery instance.\n  @returns {Object} The configuration options.\n*/\nfunction generateConnectionOptions(usePinger = false, bakery, onClose) {\n  // The options used when connecting to a Juju controller or model.\n  const facades = [\n    actions,\n    allWatcher,\n    annotations,\n    applications,\n    client,\n    cloud,\n    controller,\n    modelManager,\n    jimm,\n  ];\n  if (usePinger) {\n    facades.push(pinger);\n  }\n  return {\n    bakery,\n    closeCallback: onClose,\n    debug: false,\n    facades,\n    wsclass: WebSocket,\n  };\n}\n\nfunction determineLoginParams(credentials, identityProviderAvailable) {\n  let loginParams = {};\n  if (!identityProviderAvailable) {\n    loginParams = {\n      username: credentials.user,\n      password: credentials.password,\n    };\n  }\n  return loginParams;\n}\n\nfunction startPingerLoop(conn) {\n  // Ping to keep the connection alive.\n  const intervalId = window.setInterval(() => {\n    conn.facades.pinger.ping().catch((e) => {\n      // If the pinger fails for whatever reason then cancel the ping.\n      console.error(\"pinger stopped,\", e);\n      stopPingerLoop(intervalId);\n    });\n  }, 20000);\n  return intervalId;\n}\n\nfunction stopPingerLoop(intervalId) {\n  if (intervalId) {\n    clearInterval(intervalId);\n  }\n}\n\n/**\n  Connects to the controller at the url defined in the controllerAPIEndpoint\n  configuration value.\n  @param {String} wsControllerURL The fully qualified URL of the controller api.\n  @param {Object|null} credentials The users credentials in the format\n    {user: ..., password: ...}\n  @param {Object} bakery A bakery instance.\n  @param {Boolean} identityProviderAvailable Whether an identity provider is available.\n  @returns {Object}\n    conn The controller connection instance.\n    juju The juju api instance.\n*/\nexport async function loginWithBakery(\n  wsControllerURL,\n  credentials,\n  bakery,\n  identityProviderAvailable\n) {\n  const juju = await connect(\n    wsControllerURL,\n    generateConnectionOptions(true, bakery, (e) =>\n      console.log(\"controller closed\", e)\n    )\n  );\n  const loginParams = determineLoginParams(\n    credentials,\n    identityProviderAvailable\n  );\n  let conn = null;\n  try {\n    conn = await juju.login(loginParams);\n  } catch (error) {\n    return { error };\n  }\n\n  const intervalId = startPingerLoop(conn);\n\n  return { conn, juju, intervalId };\n}\n\n/**\n  Connects and logs in to the supplied modelURL. If the connection takes longer\n  than the allowed timeout it gives up.\n  @param {String} modelURL The fully qualified url of the model api.\n  @param {Object|Null} credentials The users credentials in the format\n    {user: ..., password: ...}\n  @param {Object} options The options for the connection.\n  @param {Boolean} identityProviderAvailable If an identity provider is available.\n  @returns {Object} The full model status.\n*/\nasync function connectAndLoginWithTimeout(\n  modelURL,\n  credentials,\n  options,\n  identityProviderAvailable\n) {\n  const duration = 5000;\n  const timeout = new Promise((resolve) => {\n    setTimeout(resolve, duration, \"timeout\");\n  });\n  const loginParams = determineLoginParams(\n    credentials,\n    identityProviderAvailable\n  );\n  const juju = connectAndLogin(modelURL, loginParams, options);\n  return new Promise((resolve, reject) => {\n    Promise.race([timeout, juju]).then((resp) => {\n      if (resp === \"timeout\") {\n        reject(\"timeout\");\n        return;\n      }\n      resolve(resp);\n    });\n  });\n}\n\n/**\n  Connects to the model url by doing a replacement on the controller url and\n  fetches it's full status then logs out of the model and closes the connection.\n  @param {String} modelUUID The UUID of the model to connect to. Must be on the\n    same controller as provided by the wsControllerURL`.\n  @param {Object} getState A function that'll return the app redux state.\n  @returns {Object} The full model status.\n*/\nexport async function fetchModelStatus(modelUUID, wsControllerURL, getState) {\n  const appState = getState();\n  const bakery = getBakery(appState);\n  const baseWSControllerURL = getWSControllerURL(appState);\n  const { identityProviderAvailable } = getConfig(appState);\n  let useIdentityProvider = false;\n\n  if (baseWSControllerURL === wsControllerURL) {\n    useIdentityProvider = identityProviderAvailable;\n  }\n  const modelURL = wsControllerURL.replace(\"/api\", `/model/${modelUUID}/api`);\n  let status = null;\n  // Logged in state is checked multiple times as the user may have logged out\n  // between requests.\n  if (isLoggedIn(wsControllerURL, getState())) {\n    try {\n      const controllerCredentials = getUserPass(wsControllerURL, getState());\n      const { conn, logout } = await connectAndLoginWithTimeout(\n        modelURL,\n        controllerCredentials,\n        generateConnectionOptions(false, bakery),\n        useIdentityProvider\n      );\n      if (isLoggedIn(wsControllerURL, getState())) {\n        status = await conn.facades.client.fullStatus();\n        if (status.error) {\n          // XXX If there is an error fetching the full status it's likely that\n          // Juju can no longer access this model. At this moment we don't have\n          // a location to notify the user. In the new watcher model that's\n          // being implemented we will be able to surface this error in the\n          // model details page.\n          console.error(status.error);\n          return;\n        }\n      }\n      if (isLoggedIn(wsControllerURL, getState())) {\n        const entities = Object.keys(status.applications).map((name) => ({\n          tag: `application-${name}`,\n        }));\n        const response = await conn.facades.annotations.get({ entities });\n        // It will return an entry for every entity even if there are no\n        // annotations so we have to inspect them and strip out the empty.\n        const annotations = {};\n        response.results.forEach((item) => {\n          if (Object.keys(item.annotations).length > 0) {\n            const appName = item.entity.replace(\"application-\", \"\");\n            annotations[appName] = item.annotations;\n          }\n        });\n        status.annotations = annotations;\n      }\n      logout();\n    } catch (e) {\n      console.error(\"error connecting to model:\", modelUUID, e);\n    }\n  }\n  return status;\n}\n\n/**\n  Calls the fetchModelStatus method with the UUID and then dispatches the\n  action to store it in the redux store.\n  @param {String} modelUUID The model UUID to fetch the model status of.\n  @param {Function} dispatch The redux store hook method.\n  @param {Object} getState A function that'll return the app redux state.\n */\nexport async function fetchAndStoreModelStatus(\n  modelUUID,\n  wsControllerURL,\n  dispatch,\n  getState\n) {\n  const status = await fetchModelStatus(modelUUID, wsControllerURL, getState);\n  if (status === null) {\n    return;\n  }\n  dispatch(updateModelStatus(modelUUID, status), {\n    wsControllerURL,\n  });\n}\n\n/**\n  Requests the model information for the supplied UUID from the supplied\n  controller connection.\n  @param {Object} conn The active controller connection.\n  @param {String} modelUUID The UUID of the model to connect to. Must be on the\n    same controller as provided by the wsControllerURL`.\n  @returns {Object} The full modelInfo.\n*/\nasync function fetchModelInfo(conn, modelUUID) {\n  const modelInfo = await conn.facades.modelManager.modelInfo({\n    entities: [{ tag: `model-${modelUUID}` }],\n  });\n  return modelInfo;\n}\n\n/**\n  Loops through each model UUID to fetch the status. Upon receiving the status\n  dispatches to store that status data.\n  @param {Object} conn The connection to the controller.\n  @param {Array} modelUUIDList A list of the model uuid's to connect to.\n  @param {Object} reduxStore The applications reduxStore.\n  @returns {Promise} Resolves when the queue fetching the model statuses has\n    completed. Does not reject.\n*/\nexport async function fetchAllModelStatuses(\n  wsControllerURL,\n  modelUUIDList,\n  conn,\n  reduxStore\n) {\n  const getState = reduxStore.getState;\n  const dispatch = reduxStore.dispatch;\n  const queue = new Limiter({ concurrency: 1 });\n  modelUUIDList.forEach((modelUUID) => {\n    queue.push(async (done) => {\n      if (isLoggedIn(wsControllerURL, getState())) {\n        await fetchAndStoreModelStatus(\n          modelUUID,\n          wsControllerURL,\n          dispatch,\n          getState\n        );\n      }\n      if (isLoggedIn(wsControllerURL, getState())) {\n        const modelInfo = await fetchModelInfo(conn, modelUUID);\n        dispatch(updateModelInfo(modelInfo), { wsControllerURL });\n        if (modelInfo.results[0].result.isController) {\n          // If this is a controller model then update the\n          // controller data with this model data.\n          dispatch(addControllerCloudRegion(wsControllerURL, modelInfo), {\n            wsControllerURL,\n          });\n        }\n      }\n      done();\n    });\n  });\n  return new Promise((resolve) => {\n    queue.onDone(() => {\n      resolve();\n    });\n  });\n}\n\n/**\n  Performs an HTTP request to the controller to fetch the controller list.\n  Will fail with a console error message if the user doesn't have access.\n  @param {String} wsControllerURL The URL of the controller.\n  @param {Object} conn The Juju controller connection.\n  @param {Object} reduxStore The applications reduxStore.\n  @param {Boolean} additionalController If this is an additional controller.\n*/\nexport async function fetchControllerList(\n  wsControllerURL,\n  conn,\n  additionalController,\n  reduxStore\n) {\n  let controllers = null;\n  if (conn.facades.jimM) {\n    const response = await conn.facades.jimM.listControllers();\n    controllers = response.controllers;\n    controllers.forEach((c) => (c.additionalController = additionalController));\n  } else {\n    // If we're not connected to a JIMM then call to get the controller config\n    // and generate a fake controller list.\n    const controllerConfig = await conn.facades.controller.controllerConfig();\n    controllers = [\n      {\n        path: controllerConfig.config[\"controller-name\"],\n        uuid: controllerConfig.config[\"controller-uuid\"],\n        version: getControllerConnection(wsControllerURL, reduxStore.getState())\n          ?.info?.serverVersion,\n        additionalController,\n      },\n    ];\n  }\n  reduxStore.dispatch(updateControllerList(wsControllerURL, controllers), {\n    wsControllerURL,\n  });\n}\n\n/**\n  Calls to disable the controller UUID masking on JIMM. This will be a noop\n  if the user is not an administrator on the controller.\n  @param {Object} conn The controller connection instance.\n*/\nexport function disableControllerUUIDMasking(conn) {\n  return new Promise(async (resolve, reject) => {\n    if (conn?.facades?.jimM) {\n      try {\n        await conn.facades.jimM.disableControllerUUIDMasking();\n        resolve();\n      } catch (e) {\n        reject();\n      }\n    } else {\n      resolve();\n    }\n  });\n}\n\n/**\n  Connect to the model representing the supplied modelUUID.\n  @param {*} modelUUID\n  @param {*} appState\n  @returns {Object} conn The connection.\n*/\nasync function connectAndLoginToModel(modelUUID, appState) {\n  const bakery = getBakery(appState);\n  const baseWSControllerURL = getWSControllerURL(appState);\n  const { identityProviderAvailable } = getConfig(appState);\n  const credentials = getUserPass(baseWSControllerURL, appState);\n  const modelURL = baseWSControllerURL.replace(\n    \"/api\",\n    `/model/${modelUUID}/api`\n  );\n  const { conn } = await connectAndLoginWithTimeout(\n    modelURL,\n    credentials,\n    generateConnectionOptions(true, bakery),\n    identityProviderAvailable\n  );\n  return conn;\n}\n\n/**\n  Call the API to fetch the application config data.\n  @param {String} modelUUID\n  @param {String} appName\n  @param {Object} appState\n  @returns {Promise} The application config.\n*/\nexport async function getApplicationConfig(modelUUID, appName, appState) {\n  const conn = await connectAndLoginToModel(modelUUID, appState);\n  const config = await conn.facades.application.get({ application: appName });\n  return config;\n}\n\n/**\n  Call the API to set the application config data.\n  @param {String} modelUUID\n  @param {String} appName\n  @param {Object} config\n  @param {Object} appState\n  @returns {Promise} The application set config response\n*/\nexport async function setApplicationConfig(\n  modelUUID,\n  appName,\n  config,\n  appState\n) {\n  const conn = await connectAndLoginToModel(modelUUID, appState);\n  const setValues = {};\n  Object.keys(config).forEach((key) => {\n    if (isSet(config[key].newValue)) {\n      // Juju requires that the value be a string, even if the field is a bool.\n      setValues[key] = `${config[key].newValue}`;\n    }\n  });\n  const resp = await conn.facades.application.set({\n    application: appName,\n    options: setValues,\n  });\n  return resp;\n}\n\nexport async function getActionsForApplication(appName, modelUUID, appState) {\n  const conn = await connectAndLoginToModel(modelUUID, appState);\n  const actionList = await conn.facades.action.applicationsCharmsActions({\n    entities: [{ tag: `application-${appName}` }],\n  });\n  return actionList;\n}\n\nexport async function executeActionOnUnits(\n  unitList = [],\n  actionName,\n  actionOptions,\n  modelUUID,\n  appState\n) {\n  const generatedActions = unitList.map((unit) => {\n    return {\n      name: actionName,\n      receiver: `unit-${unit.replace(\"/\", \"-\")}`, // Juju unit tag in the format \"unit-mysql-1\"\n      parameters: actionOptions,\n    };\n  });\n  const conn = await connectAndLoginToModel(modelUUID, appState);\n  const actionResult = await conn.facades.action.enqueueOperation({\n    actions: generatedActions,\n  });\n  return actionResult;\n}\n\nexport async function queryOperationsList(queryArgs, modelUUID, appState) {\n  const conn = await connectAndLoginToModel(modelUUID, appState);\n  const operationListResult = await conn.facades.action.listOperations(\n    queryArgs\n  );\n  return operationListResult;\n}\n\nexport async function startModelWatcher(modelUUID, appState, dispatch) {\n  const conn = await connectAndLoginToModel(modelUUID, appState);\n  const watcherHandle = await conn.facades.client.watchAll();\n  const callback = (data) => {\n    if (data?.deltas) {\n      dispatch(processAllWatcherDeltas(data?.deltas));\n    }\n    conn.facades.allWatcher._transport.write(\n      {\n        type: \"AllWatcher\",\n        request: \"Next\",\n        version: 1,\n        id: watcherHandle[\"watcher-id\"],\n      },\n      callback\n    );\n  };\n  const pingerIntervalId = startPingerLoop(conn);\n  callback();\n  return { conn, watcherHandle, pingerIntervalId };\n}\n\nexport async function stopModelWatcher(\n  conn,\n  watcherHandleId,\n  pingerIntervalId\n) {\n  conn.facades.allWatcher._transport.write({\n    type: \"AllWatcher\",\n    request: \"Stop\",\n    version: 1,\n    id: watcherHandleId,\n  });\n  stopPingerLoop(pingerIntervalId);\n  conn.transport.close();\n}\n\n/**\n  Call the API to grant the sharing permissions for a model\n  @param {String} controllerURL\n  @param {String} modelUUID\n  @param {Function} getState Function to get current store state\n  @param {Object} user The user obj with name and access info\n  @param {String | undefined} permissionTo\n  @param {String | undefined} permissionFrom The level of access a user previously had (read|write|admin)\n  @param {String} action grant|revoke\n  @param {Function} dispatch Redux dispatch method\n  @returns {Promise} The application set config response\n*/\nexport async function setModelSharingPermissions(\n  controllerURL,\n  modelUUID,\n  getState,\n  user,\n  permissionTo,\n  permissionFrom,\n  action,\n  dispatch\n) {\n  const conn = await getControllerConnection(controllerURL, getState());\n\n  const modifyAccess = async (access, action) => {\n    return await conn.facades.modelManager.modifyModelAccess({\n      changes: [\n        {\n          access,\n          action,\n          \"model-tag\": `model-${modelUUID}`,\n          \"user-tag\": `user-${user}`,\n        },\n      ],\n    });\n  };\n\n  let response = Promise.resolve({ results: [{}] });\n\n  if (conn) {\n    if (permissionFrom) {\n      response = await modifyAccess(permissionFrom, \"revoke\");\n    }\n\n    if (action === \"grant\") {\n      response = await modifyAccess(permissionTo, \"grant\");\n    }\n\n    const modelInfo = await fetchModelInfo(conn, modelUUID);\n    modelInfo &&\n      dispatch(updateModelInfo(modelInfo), { wsControllerURL: controllerURL });\n  } else {\n    response = Promise.resolve({\n      results: [{ error: true }],\n    });\n  }\n\n  return response;\n}\n","import * as Sentry from \"@sentry/browser\";\nimport {\n  disableControllerUUIDMasking,\n  fetchAllModelStatuses,\n  fetchControllerList,\n  loginWithBakery,\n} from \"juju\";\n\nimport {\n  storeLoginError,\n  updateControllerConnection,\n  updateJujuAPIInstance,\n  updatePingerIntervalId,\n} from \"app/actions\";\n\nimport { updateModelList } from \"juju/actions\";\n\nimport {\n  getConfig,\n  getControllerConnections,\n  getUserPass,\n  getWSControllerURL,\n  isLoggedIn,\n} from \"./selectors\";\n\nexport default async function connectAndListModels(\n  reduxStore,\n  bakery,\n  additionalControllers\n) {\n  try {\n    const storeState = reduxStore.getState();\n    const { identityProviderAvailable, isJuju } = getConfig(storeState);\n    const wsControllerURL = getWSControllerURL(storeState);\n    const credentials = getUserPass(wsControllerURL, storeState);\n    const controllerConnections = getControllerConnections(storeState) || {};\n    const defaultControllerData = [\n      wsControllerURL,\n      credentials,\n      bakery,\n      identityProviderAvailable,\n    ];\n    let controllerList = [defaultControllerData];\n    if (additionalControllers) {\n      controllerList = controllerList.concat(additionalControllers);\n    }\n    const connectedControllers = Object.keys(controllerConnections);\n    controllerList = controllerList.filter((controllerData) => {\n      // remove controllers we're already connected to.\n      return !connectedControllers.includes(controllerData[0]);\n    });\n    controllerList.forEach((controllerData) =>\n      connectAndPollController(controllerData, isJuju, reduxStore)\n    );\n  } catch (error) {\n    // XXX Surface error to UI.\n    // XXX Send to sentry if it's an error that's not connection related\n    // a common error returned by this is:\n    // Something went wrong:  cannot send request {\"type\":\"ModelManager\",\"request\":\"ListModels\",\"version\":5,\"params\":...}: connection state 3 is not open\n    console.error(\"Something went wrong: \", error);\n  }\n}\n\n/**\n\n  @param {Object} controllerData The data to use to connect to the controller.\n    In the format [\n      wsControllerURL - The fully qualified controller url wss://ip:port/api\n      credentials - An object with the keys {user, password}\n      bakery - An instance of the bakery to use if necessary\n      identityProviderAvailable - If an identity provider is to be used. If so\n        a bakery must be provided.\n    ]\n  @param {Boolean} isJuju\n  @param {Object} reduxStore\n*/\nexport async function connectAndPollController(\n  controllerData,\n  isJuju,\n  reduxStore\n) {\n  let conn, error, juju, intervalId;\n  try {\n    ({ conn, error, juju, intervalId } = await loginWithBakery(\n      ...controllerData\n    ));\n    if (error) {\n      reduxStore.dispatch(storeLoginError(error));\n      return;\n    }\n  } catch (e) {\n    return console.log(\"unable to log into controller\", e, controllerData);\n  }\n\n  // XXX Now that we can register multiple controllers this needs\n  // to be sent per controller.\n  if (process.env.NODE_ENV === \"production\") {\n    Sentry.setTag(\"jujuVersion\", conn?.info?.serverVersion);\n  }\n\n  reduxStore.dispatch(updateControllerConnection(controllerData[0], conn));\n  reduxStore.dispatch(updateJujuAPIInstance(controllerData[0], juju));\n  reduxStore.dispatch(updatePingerIntervalId(controllerData[0], intervalId));\n\n  fetchControllerList(controllerData[0], conn, controllerData[4], reduxStore);\n  // XXX the isJuju Check needs to be done on a per-controller basis\n  if (!isJuju) {\n    // This call will be a noop if the user isn't an administrator\n    // on the JIMM controller we're connected to.\n    try {\n      await disableControllerUUIDMasking(conn);\n    } catch (e) {\n      // Silently fail, if this doesn't work then the user isn't authorized\n      // to perform the action.\n    }\n  }\n\n  do {\n    try {\n      const models = await conn.facades.modelManager.listModels({\n        tag: conn.info.user.identity,\n      });\n      reduxStore.dispatch(updateModelList(models), {\n        wsControllerURL: controllerData[0],\n      });\n      const modelUUIDList = models[\"user-models\"].map(\n        (item) => item.model.uuid\n      );\n      await fetchAllModelStatuses(\n        controllerData[0],\n        modelUUIDList,\n        conn,\n        reduxStore\n      );\n    } catch (e) {\n      console.log(e);\n    }\n\n    // Wait 30s then start again.\n    await new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(true);\n      }, 30000);\n    });\n  } while (isLoggedIn(controllerData[0], reduxStore.getState()));\n}\n","import {\n  getBakery,\n  getJujuAPIInstances,\n  getPingerIntervalIds,\n} from \"app/selectors\";\n\nimport connectAndListModels from \"app/model-poller\";\n\nimport {\n  clearControllerData,\n  clearModelData,\n  updateControllerList,\n} from \"juju/actions\";\n\n// Action labels\nexport const actionsList = {\n  logOut: \"LOG_OUT\",\n  storeBakery: \"STORE_BAKERY\",\n  storeConfig: \"STORE_CONFIG\",\n  storeLoginError: \"STORE_LOGIN_ERROR\",\n  storeUserPass: \"STORE_USER_PASS\",\n  storeVersion: \"STORE_VERSION\",\n  storeVisitURL: \"STORE_VISIT_URL\",\n  updateControllerConnection: \"UPDATE_CONTROLLER_CONNECTION\",\n  updateJujuAPIInstance: \"UPDATE_JUJU_API_INSTANCE\",\n  updatePingerIntervalId: \"UPDATE_PINGER_INTERVAL_ID\",\n};\n\n// Action creators\n/**\n  @param {Bakery} bakery The instance of the bakery that's to be used for the\n  application to interact as the active user. This bakery contains private data\n  and should not be dumped wholesale from the redux store.\n*/\nexport function storeBakery(bakery) {\n  return {\n    type: actionsList.storeBakery,\n    payload: bakery,\n  };\n}\n\n/**\n  @param {Object} config The configuration values for the application.\n*/\nexport function storeConfig(config) {\n  return {\n    type: actionsList.storeConfig,\n    payload: config,\n  };\n}\n\n/**\n  @param {String} error The error message to store.\n*/\nexport function storeLoginError(error) {\n  return {\n    type: actionsList.storeLoginError,\n    payload: error,\n  };\n}\n\n/**\n  @param {String} version The version of the application.\n*/\nexport function storeVersion(version) {\n  return {\n    type: actionsList.storeVersion,\n    payload: version,\n  };\n}\n\n/**\n  @param {Object} credentials The users credentials in the format\n    {user: ..., password: ...}\n*/\nexport function storeUserPass(wsControllerURL, credential) {\n  return {\n    type: actionsList.storeUserPass,\n    payload: {\n      wsControllerURL,\n      credential,\n    },\n  };\n}\n\n/**\n  @param {String} wsControllerURL The URL of the websocket connection.\n  @param {Object} conn The active controller connection.\n*/\nexport function updateControllerConnection(wsControllerURL, conn) {\n  return {\n    type: actionsList.updateControllerConnection,\n    payload: {\n      wsControllerURL,\n      conn,\n    },\n  };\n}\n\n/**\n  @param {String} wsControllerURL The URL of the websocket connection.\n  @param {Object} juju The active Juju api instance.\n*/\nexport function updateJujuAPIInstance(wsControllerURL, juju) {\n  return {\n    type: actionsList.updateJujuAPIInstance,\n    payload: {\n      wsControllerURL,\n      juju,\n    },\n  };\n}\n\n/**\n  @param {String} wsControllerURL The URL of the websocket connection.\n  @param {Object} intervalId The intervalId for the request timeout.\n*/\nexport function updatePingerIntervalId(wsControllerURL, intervalId) {\n  return {\n    type: actionsList.updatePingerIntervalId,\n    payload: {\n      wsControllerURL,\n      intervalId,\n    },\n  };\n}\n\n/**\n  @param {String} visitURL The url the user needs to connect to to complete the\n    bakery login.\n*/\nexport function storeVisitURL(visitURL) {\n  return {\n    type: actionsList.storeVisitURL,\n    payload: visitURL,\n  };\n}\n\n// Thunks\n/**\n  Flush bakery from redux store\n*/\nexport function logOut(store) {\n  async function logOut(dispatch) {\n    const state = store.getState();\n    const identityProviderAvailable =\n      state?.root?.config?.identityProviderAvailable;\n    const bakery = getBakery(state);\n    const jujus = getJujuAPIInstances(state);\n    const pingerIntervalIds = getPingerIntervalIds(state);\n    bakery.storage._store.removeItem(\"identity\");\n    bakery.storage._store.removeItem(\"https://api.jujucharms.com/identity\");\n    localStorage.removeItem(\"additionalControllers\");\n    Object.entries(jujus).forEach((juju) => juju[1].logout());\n    Object.entries(pingerIntervalIds).forEach((pingerIntervalId) =>\n      clearInterval(pingerIntervalId[1])\n    );\n    dispatch({\n      type: actionsList.logOut,\n    });\n    dispatch(clearModelData());\n    dispatch(clearControllerData());\n    if (identityProviderAvailable) {\n      // To enable users to log back in after logging out we have to re-connect\n      // to the controller to get another wait url and start polling on it\n      // again.\n      dispatch(connectAndStartPolling(store, bakery));\n    }\n  }\n  // Define a name that won't be munged by the minifier to check\n  // against in the check-auth middleware.\n  logOut.NAME = \"logOut\";\n  return logOut;\n}\n\n/**\n  Trigger the connection and polling of models.\n  @param {Object} reduxStore The reduxStore.\n  @param {Object} bakery The bakery.\n*/\nexport function connectAndStartPolling(reduxStore, bakery) {\n  async function connectAndStartPolling(dispatch) {\n    let additionalControllers = null;\n    try {\n      const data = window.localStorage.getItem(\"additionalControllers\");\n      if (data) {\n        additionalControllers = JSON.parse(data);\n        additionalControllers.forEach((controller) => {\n          dispatch(storeUserPass(controller[0], controller[1]));\n          dispatch(\n            updateControllerList(controller[0], [\n              { additionalController: true },\n            ])\n          );\n        });\n      }\n    } catch (e) {\n      // XXX Add to Sentry.\n      console.log(\"Error retrieving additional registered controllers\", e);\n    }\n    connectAndListModels(reduxStore, bakery, additionalControllers);\n  }\n  // Define a name that won't be munged by the minifier to check\n  // against in the check-auth middleware.\n  connectAndStartPolling.NAME = \"connectAndStartPolling\";\n  return connectAndStartPolling;\n}\n","import { motion, AnimatePresence } from \"framer-motion\";\n\ntype Props = {\n  children: JSX.Element;\n  isActive: boolean;\n};\n\nexport default function FadeUpIn({\n  children,\n  isActive = true,\n}: Props): JSX.Element {\n  return (\n    <>\n      {isActive && (\n        <AnimatePresence>\n          <motion.div\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n          >\n            {children}\n          </motion.div>\n        </AnimatePresence>\n      )}\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/logo-black-on-white.3b8d326f.svg\";","import { useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector, useStore } from \"react-redux\";\nimport {\n  isLoggedIn,\n  getBakery,\n  getConfig,\n  getLoginError,\n  getControllerConnections,\n  getWSControllerURL,\n} from \"app/selectors\";\nimport { connectAndStartPolling, storeUserPass } from \"app/actions\";\n\nimport Spinner from \"@canonical/react-components/dist/components/Spinner\";\n\nimport FadeUpIn from \"animations/FadeUpIn\";\n\nimport logo from \"static/images/logo/logo-black-on-white.svg\";\n\nimport \"./_login.scss\";\n\nexport default function LogIn({ children }) {\n  const { identityProviderAvailable } = useSelector(getConfig);\n\n  const controllerConnections = useSelector(getControllerConnections) || {};\n  const wsControllerURLs = Object.keys(controllerConnections);\n\n  const store = useStore();\n  // Loop through all of the available controller connections to see\n  // if we're logged in.\n  const userIsLoggedIn = wsControllerURLs.some((wsControllerURL) =>\n    isLoggedIn(wsControllerURL, store.getState())\n  );\n\n  const loginError = useSelector(getLoginError);\n\n  return (\n    <>\n      {!userIsLoggedIn && (\n        <div className=\"login\">\n          <FadeUpIn isActive={!userIsLoggedIn}>\n            <div className=\"login__inner p-card--highlighted\">\n              <img className=\"login__logo\" src={logo} alt=\"JAAS logo\" />\n              {identityProviderAvailable ? (\n                <IdentityProviderForm userIsLoggedIn={userIsLoggedIn} />\n              ) : (\n                <UserPassForm />\n              )}\n              {generateErrorMessage(loginError)}\n            </div>\n          </FadeUpIn>\n        </div>\n      )}\n      <div className=\"app-content\">{children}</div>\n    </>\n  );\n}\n\n/**\n  Generates the necessary elements to render the error message.\n  @param {String} loginError The error message from the store.\n  @returns {Object} A component for the error message.\n*/\nfunction generateErrorMessage(loginError) {\n  if (!loginError) {\n    return null;\n  }\n  let loginErrorMessage = null;\n  switch (loginError) {\n    case '\"user-\" is not a valid user tag':\n      loginErrorMessage = \"Invalid user name\";\n      break;\n    case \"invalid entity name or password\":\n      loginErrorMessage = \"Invalid user name or password\";\n      break;\n    default:\n      loginErrorMessage = loginError;\n  }\n  return (\n    <p className=\"error-message\">\n      <i className=\"p-icon--error\" />\n      {loginErrorMessage}\n    </p>\n  );\n}\n\nfunction IdentityProviderForm({ userIsLoggedIn }) {\n  const visitURL = useSelector((state) => {\n    if (!userIsLoggedIn) {\n      return state?.root?.visitURL;\n    }\n  });\n\n  return <Button visitURL={visitURL}></Button>;\n}\n\nfunction UserPassForm() {\n  const dispatch = useDispatch();\n  const store = useStore();\n  const bakery = useSelector(getBakery);\n  const focus = useRef();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const elements = e.currentTarget.elements;\n    const user = elements.username.value;\n    const password = elements.password.value;\n    dispatch(\n      storeUserPass(getWSControllerURL(store.getState()), { user, password })\n    );\n    dispatch(connectAndStartPolling(store, bakery));\n  }\n\n  useEffect(() => {\n    focus.current.focus();\n  }, []);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"username\">Username</label>\n      <input type=\"text\" name=\"username\" id=\"username\" ref={focus} />\n      <label htmlFor=\"password\">Password</label>\n      <input type=\"password\" name=\"password\" id=\"password\" />\n      <button className=\"p-button--positive\" type=\"submit\">\n        Log in to the dashboard\n      </button>\n    </form>\n  );\n}\n\nfunction Button({ visitURL }) {\n  if (visitURL) {\n    return (\n      <a\n        className=\"p-button--positive\"\n        href={visitURL}\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n      >\n        Log in to the dashboard\n      </a>\n    );\n  } else {\n    return (\n      <button className=\"p-button--neutral\" disabled>\n        <Spinner text=\"Connecting...\" />\n      </button>\n    );\n  }\n}\n","export default __webpack_public_path__ + \"static/media/logo-mark.b44c09ab.svg\";","export default __webpack_public_path__ + \"static/media/jaas-text.107a2fc8.svg\";","export default __webpack_public_path__ + \"static/media/juju-text.b4135778.svg\";","import { useSelector } from \"react-redux\";\n\nimport { getConfig } from \"app/selectors\";\n\n// Image imports\nimport logoMark from \"static/images/logo/logo-mark.svg\";\nimport jaasText from \"static/images/logo/jaas-text.svg\";\nimport jujuText from \"static/images/logo/juju-text.svg\";\n\nimport \"./_logo.scss\";\n\nexport default function Logo() {\n  const isJuju = useSelector(getConfig).isJuju;\n\n  return (\n    <a href={isJuju ? \"https://juju.is\" : \"https://jaas.ai\"} className=\"logo\">\n      <img src={logoMark} alt=\"Juju logo mark\" height=\"20\" width=\"20\" />\n      <img\n        className=\"logo__text\"\n        src={isJuju ? jujuText : jaasText}\n        height=\"20\"\n        alt=\"Juju logo\"\n      />\n    </a>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport classnames from \"classnames\";\n\nimport \"./_banner.scss\";\n\ntype Props = {\n  isActive: boolean;\n  children: any;\n  variant: \"positive\" | \"caution\" | \"negative\";\n};\n\nexport default function Banner({\n  isActive,\n  children,\n  variant,\n}: Props): JSX.Element {\n  const [bannerClosed, setBannerClosed] = useState(false);\n\n  // Open banner every time banner variant changes\n  useEffect(() => {\n    setBannerClosed(false);\n  }, [variant]);\n\n  return (\n    <div\n      className=\"banner\"\n      data-active={isActive && !bannerClosed}\n      data-variant={variant}\n    >\n      {children}\n      <button\n        className=\"banner__close\"\n        onClick={() => {\n          setBannerClosed(true);\n        }}\n      >\n        <i\n          className={classnames(\"p-icon--close\", {\n            \"is-light\": variant === \"positive\",\n          })}\n        >\n          Close banner\n        </i>\n      </button>\n    </div>\n  );\n}\n","import ReactGA from \"react-ga\";\n\ntype AnalyticMessage = {\n  path?: string;\n  category?: string;\n  action?: string;\n};\n\nexport default function useAnalytics() {\n  return ({ path, category = \"\", action = \"\" }: AnalyticMessage) => {\n    const disableAnalytics = localStorage.getItem(\"disableAnalytics\");\n    const isProduction = process.env.NODE_ENV === \"production\" ?? true;\n    if (!isProduction || disableAnalytics === \"true\") {\n      return;\n    }\n\n    if (path) {\n      ReactGA.pageview(path);\n    } else {\n      ReactGA.event({\n        category,\n        action,\n      });\n    }\n  };\n}\n","// Action labels\nexport enum actionsList {\n  userMenuActive = \"TOGGLE_USER_MENU\",\n  confirmationModalActive = \"TOGGLE_CONFIRMATION_MODAL\",\n  sideNavCollapsed = \"SIDENAV_COLLAPSED\",\n}\n\nexport type ActionType = {\n  type: actionsList;\n  payload: boolean;\n};\n\n/**\n  Persist user menu visibility between page renders\n*/\nexport function userMenuActive(toggle: boolean): ActionType {\n  return {\n    type: actionsList.userMenuActive,\n    payload: toggle,\n  };\n}\n\n/**\n  Display confirmation panel before confirming/dismissing changes\n*/\nexport function confirmationPanelActive(toggle: boolean) {\n  return {\n    type: actionsList.confirmationModalActive,\n    payload: toggle,\n  };\n}\n\n/**\n  Persist collapse state of sidenav between renders\n*/\nexport function sideNavCollapsed(toggle: boolean) {\n  return {\n    type: actionsList.sideNavCollapsed,\n    payload: toggle,\n  };\n}\n","import { ReduxState } from \"types\";\n\n// ----- Exported functions\nexport const isUserMenuActive = (state: ReduxState) => state.ui.userMenuActive;\n\nexport const isConfirmationModalActive = (state: ReduxState) =>\n  state.ui.confirmationModalActive;\n\nexport const isSideNavCollapsed = (state: ReduxState) =>\n  state.ui.sideNavCollapsed;\n","import { useEffect } from \"react\";\nimport { useSelector, useDispatch, useStore } from \"react-redux\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport classNames from \"classnames\";\nimport { getActiveUserTag, getWSControllerURL } from \"app/selectors\";\n\nimport { logOut } from \"app/actions\";\nimport useAnalytics from \"hooks/useAnalytics\";\nimport { extractOwnerName } from \"app/utils/utils\";\n\nimport { userMenuActive } from \"ui/actions\";\nimport { isUserMenuActive } from \"ui/selectors\";\n\nimport \"./_user-menu.scss\";\n\nconst UserMenu = () => {\n  const sendAnalytics = useAnalytics();\n  const dispatch = useDispatch();\n  const store = useStore();\n  const getState = store.getState;\n  const activeUser = getActiveUserTag(\n    useSelector(getWSControllerURL),\n    getState()\n  );\n  const isActive = useSelector(isUserMenuActive) || false;\n\n  useEffect(() => {\n    if (isActive) {\n      sendAnalytics({\n        category: \"User\",\n        action: \"Opened user menu\",\n      });\n    }\n  }, [isActive, sendAnalytics]);\n\n  const toggleUserMenuActive = () => dispatch(userMenuActive(!isActive));\n\n  return (\n    <>\n      {activeUser && (\n        <div\n          className={classNames(\"user-menu\", {\n            \"is-active\": isActive,\n          })}\n        >\n          <div\n            className=\"user-menu__header\"\n            onClick={toggleUserMenuActive}\n            onKeyPress={toggleUserMenuActive}\n            role=\"button\"\n            tabIndex=\"0\"\n          >\n            <i className=\"p-icon--user is-light\"></i>\n            <span className=\"user-menu__name\">\n              {activeUser ? extractOwnerName(activeUser) : \"\"}\n            </span>\n            <i className=\"p-icon--chevron-up is-light\"></i>\n          </div>\n          <ul className=\"p-list user-menu__options\">\n            <li className=\"p-list__item\">\n              <NavLink\n                className=\"user-menu__link p-list__link\"\n                isActive={(match) => {\n                  if (match && match.url.includes(\"settings\")) {\n                    return true;\n                  }\n                }}\n                to=\"/settings\"\n                activeClassName=\"is-selected\"\n              >\n                Settings\n              </NavLink>\n            </li>\n            <li className=\"p-list__item\">\n              <Link\n                className=\"user-menu__link\"\n                to=\"/\"\n                onClick={() => dispatch(logOut(store))}\n              >\n                Log out\n              </Link>\n            </li>\n          </ul>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default UserMenu;\n","import { useSelector } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\n\nimport { getGroupedModelStatusCounts, getAppVersion } from \"app/selectors\";\n\nimport Logo from \"components/Logo/Logo\";\nimport UserMenu from \"components/UserMenu/UserMenu\";\n\n// Style imports\nimport \"./_primary-nav.scss\";\n\nconst pages = [\n  {\n    label: \"Models\",\n    path: \"/models\",\n    icon: \"models\",\n  },\n  {\n    label: \"Controllers\",\n    path: \"/controllers\",\n    icon: \"controllers\",\n  },\n];\n\nconst PrimaryNav = () => {\n  const { blocked } = useSelector(getGroupedModelStatusCounts);\n  const appVersion = useSelector(getAppVersion);\n\n  return (\n    <nav className=\"p-primary-nav\">\n      <div className=\"p-primary-nav__header\">\n        <Logo />\n      </div>\n\n      <ul className=\"p-list is-internal\">\n        {pages.map((navItem) => (\n          <li key={navItem.path} className=\"p-list__item\">\n            <NavLink\n              className=\"p-list__link\"\n              isActive={(match) => {\n                if (match && match.url.includes(navItem.path)) {\n                  return true;\n                }\n              }}\n              to={navItem.path}\n              activeClassName=\"is-selected\"\n            >\n              <i className={`p-icon--${navItem.icon} is-light`}></i>\n              {navItem.label}\n              {navItem.label === \"Models\" && blocked > 0 ? (\n                <span className=\"entity-count\">{blocked}</span>\n              ) : (\n                \"\"\n              )}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n      <hr className=\"p-primary-nav__divider\" />\n      <div className=\"p-primary-nav__bottom\">\n        <ul className=\"p-list\">\n          <li className=\"p-list__item\">\n            <a\n              className=\"p-list__link\"\n              href=\"https://github.com/canonical-web-and-design/jaas-dashboard/issues/new\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Report a bug\n            </a>\n          </li>\n        </ul>\n      </div>\n      <hr className=\"p-primary-nav__divider\" />\n      <div className=\"p-primary-nav__bottom\">\n        <ul className=\"p-list\">\n          <li className=\"p-list__item\">\n            <span className=\"version\">Version {appVersion}</span>\n            <span className=\"p-label--new\">Beta</span>\n          </li>\n        </ul>\n      </div>\n      <UserMenu />\n    </nav>\n  );\n};\n\nexport default PrimaryNav;\n","// https://usehooks.com/useEventListener/\nimport { useRef, useEffect } from \"react\";\n\nexport default function useEventListener(eventName, handler, element = window) {\n  // Create a ref that stores handler\n  const savedHandler = useRef();\n\n  // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(\n    () => {\n      // Make sure element supports addEventListener\n      // On\n      const isSupported = element && element.addEventListener;\n      if (!isSupported) return;\n\n      // Create event listener that calls handler function stored in ref\n      const eventListener = (event) => savedHandler.current(event);\n\n      // Add event listener\n      element.addEventListener(eventName, eventListener);\n\n      // Remove event listener on cleanup\n      return () => {\n        element.removeEventListener(eventName, eventListener);\n      };\n    },\n    [eventName, element] // Re-run if eventName or element changes\n  );\n}\n","import { motion } from \"framer-motion\";\n\ntype Props = {\n  isActive: boolean;\n  children: JSX.Element;\n  className: string;\n};\n\nexport default function SlideInOut({\n  isActive = true,\n  children,\n  className,\n}: Props): JSX.Element {\n  return (\n    <>\n      {isActive && (\n        <motion.div\n          className={className}\n          initial={{ x: \"100%\" }}\n          animate={{ x: 0 }}\n          exit={{ x: \"100%\" }}\n          transition={{ type: \"tween\" }}\n        >\n          {children}\n        </motion.div>\n      )}\n    </>\n  );\n}\n","import classnames from \"classnames\";\nimport SlideInOut from \"animations/SlideInOut\";\n\nimport Spinner from \"@canonical/react-components/dist/components/Spinner/Spinner\";\n\nimport \"./_aside.scss\";\n\ntype Props = {\n  children: JSX.Element;\n  width?: \"wide\" | \"narrow\";\n  pinned?: boolean;\n  loading?: boolean;\n  isSplit?: boolean;\n};\n\nexport default function Aside({\n  children,\n  width,\n  pinned = false,\n  loading = false,\n  isSplit = false,\n}: Props): JSX.Element {\n  return (\n    <SlideInOut\n      isActive={true}\n      className={classnames(\"l-aside\", {\n        \"is-narrow\": width === \"narrow\",\n        \"is-wide\": width === \"wide\",\n        \"is-pinned\": pinned === true,\n        \"is-split\": isSplit === true,\n      })}\n    >\n      {!loading ? (\n        children\n      ) : (\n        <div className=\"loading\">\n          <Spinner />\n        </div>\n      )}\n    </SlideInOut>\n  );\n}\n","import { ReactNode, useEffect, useRef } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport { Modal } from \"@canonical/react-components/dist/components/Modal/Modal\";\n\nimport \"./_confirmation-modal.scss\";\n\ntype Props = {\n  children?: ReactNode;\n  buttonRow: ReactNode;\n};\n\nexport default function ConfirmationModal({\n  children,\n  buttonRow,\n}: Props): JSX.Element {\n  const modalRef = useRef<HTMLDivElement>(null);\n  const portalHost =\n    document.querySelector(\"#confirmation-modal-container\") || document.body;\n\n  useEffect(() => {\n    if (modalRef.current) {\n      const neutralButton: HTMLButtonElement | null =\n        modalRef?.current?.querySelector(\"button.p-button--neutral\");\n      // If the modal has a neutral button then focus on that after opening\n      // to make a better keyboard navigation experience.\n      if (neutralButton) {\n        neutralButton.focus();\n      } else {\n        // If there is no button then focus on the modal wrapper.\n        modalRef.current.focus();\n      }\n    }\n  }, []);\n\n  return createPortal(\n    <div className=\"p-confirmation-modal\" ref={modalRef}>\n      <Modal buttonRow={buttonRow}>\n        <div>{children}</div>\n      </Modal>\n    </div>,\n    portalHost\n  );\n}\n","import { ReactNode } from \"react\";\nimport { useQueryParams, StringParam } from \"use-query-params\";\n\ntype Props = {\n  title: ReactNode;\n};\n\ntype QueryString = {\n  [key: string]: string | undefined;\n};\n\nexport default function PanelHeader({ title }: Props): JSX.Element {\n  const [panelQs, setPanelQs] = useQueryParams({\n    panel: StringParam,\n    model: StringParam,\n  });\n\n  // Remove all query strings when close button is clicked\n  const removalObj: QueryString = {};\n  Object.keys(panelQs).forEach((queryString: string) => {\n    removalObj[queryString] = undefined;\n  });\n\n  return (\n    <div className=\"p-panel__header\">\n      <div className=\"p-panel__title\">{title}</div>\n      <div className=\"p-panel__controls\">\n        <button\n          onClick={() => setPanelQs(removalObj)}\n          className=\"p-button--base js-aside-close u-no-margin--bottom has-icon\"\n        >\n          <i className=\"p-icon--close\"></i>\n        </button>\n      </div>\n    </div>\n  );\n}\n","import { ReactNode } from \"react\";\nimport Spinner from \"@canonical/react-components/dist/components/Spinner/Spinner\";\n\nimport \"./_loading-handler.scss\";\n\ntype LoadingHandlerProps = {\n  children?: ReactNode;\n  hasData: boolean;\n  noDataMessage: string;\n  loading: boolean;\n};\n\nexport default function LoadingHandler({\n  hasData,\n  noDataMessage,\n  loading,\n  children,\n}: LoadingHandlerProps): JSX.Element {\n  const generateContent = () => {\n    if (!hasData) {\n      if (loading) {\n        return (\n          <div className=\"loading-handler__spinner\">\n            <div className=\"loading-handler__spinner-content\">\n              <Spinner />\n            </div>\n          </div>\n        );\n      } else {\n        return noDataMessage;\n      }\n    } else {\n      return children;\n    }\n  };\n\n  return <div className=\"loading-handler\">{generateContent()}</div>;\n}\n","import { useEffect, useRef, useState, ReactNode } from \"react\";\n\nimport \"./_radio-input-box.scss\";\n\ntype Props = {\n  name: string;\n  description: string;\n  selectedInput: string | undefined;\n  onSelect: (inputName: string) => void;\n  children: ReactNode;\n};\n\nexport default function RadioInputBox({\n  name,\n  children,\n  description,\n  selectedInput,\n  onSelect,\n}: Props): JSX.Element {\n  const [opened, setOpened] = useState<boolean>(false);\n  const inputBoxRef = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // 20, 40 are magic numbers that align nicely with the heights.\n  const initialHeight = 40;\n  const paddingNumber = 20;\n\n  useEffect(() => {\n    if (inputBoxRef.current !== null) {\n      // Due to the 'closed' hook animation running on initial load we cannot\n      // set the initial height in the css but have to do it on the first load.\n      inputBoxRef.current.style.height = initialHeight + \"px\";\n    }\n  }, [inputBoxRef]);\n\n  useEffect(() => {\n    setOpened(selectedInput === name);\n  }, [selectedInput, name]);\n\n  useEffect(() => {\n    const wrapper = inputBoxRef.current;\n    const container = containerRef.current;\n\n    if (wrapper === null || container === null) return;\n\n    let startHeight = 0;\n    let endHeight = 0;\n    let duration = 0;\n\n    if (opened) {\n      startHeight = wrapper.offsetHeight;\n      // To be used when we're closing so we know what the original value was.\n      endHeight = container.offsetHeight + paddingNumber;\n      duration = endHeight;\n      // Set the height of the wrapper element to the end height to\n      // override the height set in css for the collapsed size.\n      wrapper.style.height = endHeight + \"px\";\n    } else if (wrapper.offsetHeight !== initialHeight) {\n      // Do not animate if the wrapper height is already in the closed state\n      // and this hook runs for the closed state again.\n      endHeight = initialHeight;\n      startHeight = container.offsetHeight + paddingNumber;\n      duration = startHeight;\n    }\n    const animation = wrapper.animate(\n      {\n        height: [startHeight + \"px\", endHeight + \"px\"],\n      },\n      {\n        // Set the duration to be the number of pixels that it has to animate\n        // so that it's a consistent animation regardless of the height.\n        duration,\n        easing: \"ease-out\",\n      }\n    );\n\n    animation.onfinish = () => {\n      if (opened === false) {\n        wrapper.style.height = initialHeight + \"px\";\n      } else {\n        wrapper.style.height = \"\";\n      }\n    };\n  }, [opened, initialHeight]);\n\n  const handleSelect = () => {\n    onSelect(name);\n    setOpened(true);\n  };\n\n  const labelId = `inputRadio-${name}`;\n\n  return (\n    <div className=\"radio-input-box\" aria-expanded={opened} ref={inputBoxRef}>\n      <div className=\"radio-input-box__container\" ref={containerRef}>\n        <label className=\"p-radio radio-input-box__label\">\n          <input\n            type=\"radio\"\n            className=\"p-radio__input\"\n            name=\"inputRadioSelector\"\n            aria-labelledby={labelId}\n            onClick={handleSelect}\n            onChange={handleSelect}\n          />\n          <span className=\"p-radio__label\" id={labelId}>\n            {name}\n          </span>\n        </label>\n        <div className=\"radio-input-box__content\">\n          <div className=\"radio-input-box__description\">{description}</div>\n          <div className=\"radio-input-box__options\">{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","type Props = {\n  description: string | undefined;\n};\n\nexport default function DescriptionSummary({ description }: Props) {\n  if (!description) {\n    return null;\n  }\n  // 30 is a magic number, the width of the available text area of the field\n  // If the width of the actions area increases then this number will need\n  // to be adjusted accordingly.\n  if (description.length > 30) {\n    return (\n      <details className=\"radio-input-box__details\">\n        <summary className=\"radio-input-box__summary\">\n          <span className=\"radio-input-box__summary-description\">\n            {description}\n          </span>\n          &nbsp;\n        </summary>\n        <span className=\"radio-input-box__details-description\">\n          {description}\n        </span>\n      </details>\n    );\n  }\n  return <span>{description}</span>;\n}\n","import { useEffect } from \"react\";\nimport { useFormikContext, Field } from \"formik\";\nimport classnames from \"classnames\";\n\nimport DescriptionSummary from \"./DescriptionSummary\";\n\ntype Options = OptionDetails[];\n\ntype OptionDetails = {\n  name: string;\n  description: string;\n  type: string;\n  required: boolean;\n};\n\ntype OptionValue = {\n  [key: string]: string;\n};\n\ntype Props = {\n  name: string;\n  options: Options;\n  onValuesChange: (name: string, values: OptionValue) => void;\n};\n\nexport default function OptionInputs({ name, options, onValuesChange }: Props) {\n  const { values } = useFormikContext<OptionValue>();\n\n  useEffect(() => {\n    onValuesChange(name, values);\n  }, [onValuesChange, name, values]);\n\n  return (\n    <form>\n      {options.map((option) => {\n        const inputKey = `${name}-${option.name}`;\n        return (\n          <div\n            className=\"radio-input-box__input-group\"\n            key={`${option.name}InputGroup`}\n          >\n            <label\n              className={classnames(\"radio-input-box__label\", {\n                \"is-required\": option.required,\n              })}\n              htmlFor={inputKey}\n            >\n              {option.name}\n            </label>\n            <Field\n              className=\"radio-input-box__input\"\n              type=\"text\"\n              id={inputKey}\n              name={inputKey}\n            />\n            <DescriptionSummary description={option.description} />\n          </div>\n        );\n      })}\n    </form>\n  );\n}\n","import { useMemo } from \"react\";\nimport { Formik } from \"formik\";\n\nimport OptionInputs from \"components/RadioInputBox/OptionInputs\";\n\nimport type {\n  ActionData,\n  ActionOptionsType,\n  OnValuesChange,\n} from \"panels/ActionsPanel/ActionsPanel\";\n\ntype Props = {\n  name: string;\n  data: ActionData;\n  onValuesChange: OnValuesChange;\n};\n\nexport default function ActionOptions({ name, data, onValuesChange }: Props) {\n  const action = data[name];\n\n  const collectedOptions = useMemo(() => {\n    const collectOptions: ActionOptionsType = [];\n    Object.keys(action.params.properties).forEach((name) => {\n      const property = action.params.properties[name];\n      const required = action.params.required;\n      collectOptions.push({\n        name: name,\n        description: property.description,\n        type: property.type,\n        required: required ? required.includes(name) : false,\n      });\n    });\n    return collectOptions;\n  }, [action.params.properties, action.params.required]);\n\n  const initialValues = useMemo(() => {\n    const initialValues: { [key: string]: string } = {};\n    collectedOptions.forEach((option) => {\n      initialValues[`${name}-${option.name}`] = \"\";\n    });\n    return initialValues;\n  }, [name, collectedOptions]);\n\n  return (\n    <Formik initialValues={initialValues} onSubmit={() => {}} key={name}>\n      <OptionInputs\n        name={name}\n        options={collectedOptions}\n        onValuesChange={onValuesChange}\n      />\n    </Formik>\n  );\n}\n","import {\n  MutableRefObject,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { DefaultRootState, useSelector, useStore } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { useQueryParam, withDefault, ArrayParam } from \"use-query-params\";\nimport { executeActionOnUnits, getActionsForApplication } from \"juju\";\nimport { getModelUUID } from \"app/selectors\";\nimport { generateIconImg, pluralize } from \"app/utils/utils\";\nimport Button from \"@canonical/react-components/dist/components/Button/Button\";\n\nimport type { EntityDetailsRoute } from \"components/Routes/Routes\";\n\nimport Aside from \"components/Aside/Aside\";\nimport ConfirmationModal from \"components/ConfirmationModal/ConfirmationModal\";\nimport PanelHeader from \"components/PanelHeader/PanelHeader\";\nimport LoadingHandler from \"components/LoadingHandler/LoadingHandler\";\nimport RadioInputBox from \"components/RadioInputBox/RadioInputBox\";\n\nimport ActionOptions from \"./ActionOptions\";\n\nimport \"./_actions-panel.scss\";\n\nexport type ActionData = {\n  [key: string]: ActionItem;\n};\n\ntype ActionItem = {\n  description: string;\n  params: ActionParams;\n};\n\ntype ActionParams = {\n  description: string;\n  properties: ActionProps;\n  required?: string[];\n  title: string;\n  type: string;\n};\n\ntype ActionProps = {\n  [key: string]: ActionProp;\n};\n\ntype ActionProp = {\n  description: string;\n  type: string;\n};\n\nexport type ActionOptionsType = ActionOptionDetails[];\n\ntype ActionOptionDetails = {\n  name: string;\n  description: string;\n  type: string;\n  required: boolean;\n};\n\ntype ActionOptionValues = {\n  [actionName: string]: ActionOptionValue;\n};\n\ntype ActionOptionValue = {\n  [optionName: string]: string;\n};\n\ntype SetSelectedAction = (actionName: string) => void;\n\nexport type OnValuesChange = (\n  actionName: string,\n  options: ActionOptionValue\n) => void;\n\nexport default function ActionsPanel(): JSX.Element {\n  const appStore = useStore();\n  const appState = appStore.getState();\n  const { appName, modelName } = useParams<EntityDetailsRoute>();\n  const getModelUUIDMemo = useMemo(() => getModelUUID(modelName), [modelName]);\n  // Selectors.js is not typescript yet and it complains about the return value\n  // of getModelUUID. TSFixMe\n  const modelUUID = useSelector(\n    getModelUUIDMemo as (state: DefaultRootState) => unknown\n  );\n  const [disableSubmit, setDisableSubmit] = useState<boolean>(true);\n  const [actionData, setActionData] = useState<ActionData>({});\n  const [fetchingActionData, setFetchingActionData] = useState(false);\n  const [confirmType, setConfirmType] = useState<string>(\"\");\n  const [selectedAction, setSelectedAction]: [\n    string | undefined,\n    SetSelectedAction\n  ] = useState<string>();\n\n  const actionOptionsValues = useRef<ActionOptionValues>({});\n\n  const selectedUnits = useQueryParam(\n    \"units\",\n    withDefault(ArrayParam, [])\n    // Cast it into an array so it has the proper methods for the reduce below.\n  )[0] as string[];\n\n  const closePanel = useQueryParam(\"panel\")[1];\n\n  useEffect(() => {\n    setFetchingActionData(true);\n    getActionsForApplication(appName, modelUUID, appStore.getState()).then(\n      (actions) => {\n        if (actions?.results?.[0]?.actions) {\n          setActionData(actions.results[0].actions);\n        }\n        setFetchingActionData(false);\n      }\n    );\n  }, [appName, appStore, modelUUID]);\n\n  // See above note about selectors.js typings TSFixMe\n  const namespace =\n    appState.juju?.modelData?.[modelUUID as string]?.applications?.[appName]\n      ?.charm;\n\n  const generateSelectedUnitList = () => {\n    if (!selectedUnits.length) {\n      return \"0 units selected\";\n    }\n    return selectedUnits.reduce((acc, unitName) => {\n      return `${acc}, ${unitName.split(\"/\")[1]}`;\n    });\n  };\n\n  const generateTitle = () => {\n    const unitLength = selectedUnits.length;\n    return (\n      <h5>\n        {generateIconImg(appName, namespace)} {unitLength}{\" \"}\n        {pluralize(unitLength, \"unit\")} selected\n      </h5>\n    );\n  };\n\n  const executeAction = async () => {\n    // You shouldn't be able to get this far without this defined but jic.\n    if (!selectedAction) return;\n    await executeActionOnUnits(\n      selectedUnits,\n      selectedAction,\n      actionOptionsValues.current[selectedAction],\n      modelUUID,\n      appStore.getState()\n    );\n  };\n\n  const handleSubmit = () => {\n    setConfirmType(\"submit\");\n  };\n\n  const changeHandler = useCallback(\n    (actionName, values) => {\n      onValuesChange(actionName, values, actionOptionsValues);\n      enableSubmit(\n        selectedAction,\n        selectedUnits,\n        actionData,\n        actionOptionsValues,\n        setDisableSubmit\n      );\n    },\n    [actionData, selectedAction, selectedUnits]\n  );\n\n  const selectHandler = useCallback(\n    (actionName) => {\n      setSelectedAction(actionName);\n      enableSubmit(\n        actionName,\n        selectedUnits,\n        actionData,\n        actionOptionsValues,\n        setDisableSubmit\n      );\n    },\n    [actionData, selectedUnits]\n  );\n\n  const generateConfirmationModal = () => {\n    if (confirmType && selectedAction) {\n      // Allow for adding more confirmation types, like for cancel\n      // if inputs have been changed.\n      if (confirmType === \"submit\") {\n        return SubmitConfirmation(\n          selectedAction,\n          selectedUnits.length,\n          selectedUnits,\n          () => {\n            setConfirmType(\"\");\n            executeAction();\n            closePanel(\"\");\n          },\n          () => setConfirmType(\"\")\n        );\n      }\n    }\n  };\n\n  const data = Object.keys(actionData).length > 0 ? actionData : null;\n\n  return (\n    <Aside width=\"narrow\">\n      <div className=\"p-panel actions-panel\">\n        <PanelHeader title={generateTitle()} />\n        <div\n          className=\"actions-panel__unit-list\"\n          data-test=\"actions-panel-unit-list\"\n        >\n          Run action on: {generateSelectedUnitList()}\n        </div>\n        <div className=\"actions-panel__action-list\">\n          <LoadingHandler\n            hasData={data ? true : false}\n            loading={fetchingActionData}\n            noDataMessage=\"This charm has not provided any actions.\"\n          >\n            {Object.keys(actionData).map((actionName) => (\n              <RadioInputBox\n                name={actionName}\n                description={actionData[actionName].description}\n                onSelect={selectHandler}\n                selectedInput={selectedAction}\n                key={actionName}\n              >\n                <ActionOptions\n                  name={actionName}\n                  data={actionData}\n                  onValuesChange={changeHandler}\n                />\n              </RadioInputBox>\n            ))}\n          </LoadingHandler>\n        </div>\n        {generateConfirmationModal()}\n        <div className=\"actions-panel__drawer\">\n          <Button\n            appearance=\"positive\"\n            className=\"actions-panel__run-action\"\n            disabled={disableSubmit}\n            onClick={handleSubmit}\n          >\n            Run action\n          </Button>\n        </div>\n      </div>\n    </Aside>\n  );\n}\n\nfunction onValuesChange(\n  actionName: string,\n  values: ActionOptionValue,\n  optionValues: MutableRefObject<ActionOptionValues>\n) {\n  const updatedValues: ActionOptionValue = {};\n  Object.keys(values).forEach((key) => {\n    updatedValues[key.replace(`${actionName}-`, \"\")] = values[key];\n  });\n\n  optionValues.current = {\n    ...optionValues.current,\n    [actionName]: updatedValues,\n  };\n}\n\nfunction enableSubmit(\n  selectedAction: string | undefined,\n  selectedUnits: string[],\n  actionData: ActionData,\n  optionsValues: MutableRefObject<ActionOptionValues>,\n  setDisableSubmit: (disable: boolean) => void\n) {\n  if (selectedAction && selectedUnits.length > 0) {\n    if (hasNoOptions(selectedAction, optionsValues.current)) {\n      setDisableSubmit(false);\n      return;\n    }\n    if (\n      requiredPopulated(selectedAction, actionData, optionsValues.current) &&\n      optionsValidate(selectedAction, optionsValues.current)\n    ) {\n      setDisableSubmit(false);\n      return;\n    }\n  }\n  setDisableSubmit(true);\n}\n\ntype ValidationFnProps = (\n  selectedAction: string,\n  optionValues: ActionOptionValues\n) => boolean;\n\ntype RequiredPopulated = (\n  selectedAction: string,\n  actionData: ActionData,\n  optionValues: ActionOptionValues\n) => boolean;\n\nconst hasNoOptions: ValidationFnProps = (selected, optionValues) => {\n  // If there are no options stored then it doesn't have any.\n  if (!optionValues[selected]) {\n    return true;\n  }\n  return Object.keys(optionValues[selected]).length === 0;\n};\n\nconst requiredPopulated: RequiredPopulated = (\n  selected,\n  actionData,\n  optionsValues\n) => {\n  const required = actionData[selected].params.required;\n  if (!required) {\n    return true;\n  }\n  if (required.length === 0) {\n    return true;\n  }\n  return !required.some((option) => optionsValues[selected][option] === \"\");\n};\n\nconst optionsValidate: ValidationFnProps = (selected, optionsValues) => {\n  // XXX TODO\n  return true;\n};\n\nfunction SubmitConfirmation(\n  actionName: string,\n  unitCount: number,\n  unitList: string[],\n  confirmFunction: () => void,\n  cancelFunction: () => void\n): JSX.Element {\n  const unitNames = unitList.reduce((acc, unitName) => {\n    return `${acc}, ${unitName.split(\"/\")[1]}`;\n  });\n  return (\n    <ConfirmationModal\n      buttonRow={\n        <div>\n          <Button key=\"cancel\" onClick={cancelFunction}>\n            Cancel\n          </Button>\n          <Button appearance=\"positive\" key=\"save\" onClick={confirmFunction}>\n            Confirm\n          </Button>\n        </div>\n      }\n    >\n      <div>\n        <h4>Run {actionName}?</h4>\n        <div className=\"p-confirmation-modal__info-group\">\n          <div className=\"p-confirmation-modal__sub-header\">UNIT COUNT</div>\n          <div data-test=\"confirmation-modal-unit-count\">{unitCount}</div>\n        </div>\n        <div className=\"p-confirmation-modal__info-group\">\n          <div className=\"p-confirmation-modal__sub-header\">UNIT NAME</div>\n          <div data-test=\"confirmation-modal-unit-names\">{unitNames}</div>\n        </div>\n      </div>\n    </ConfirmationModal>\n  );\n}\n","import { useState } from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(\"Unable to parse local storage:\", error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that persists the\n  // new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n","import { useState } from \"react\";\nimport { useSelector, useDispatch, useStore } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { getBakery } from \"app/selectors\";\nimport { connectAndStartPolling } from \"app/actions\";\n\nimport classNames from \"classnames\";\n\nimport useLocalStorage from \"hooks/useLocalStorage\";\n\nimport Aside from \"components/Aside/Aside\";\nimport PanelHeader from \"components/PanelHeader/PanelHeader\";\n\nimport \"./register-controller.scss\";\n\nexport default function RegisterController() {\n  const [formValues, setFormValues] = useState({});\n  const dispatch = useDispatch();\n  const reduxStore = useStore();\n  const bakery = useSelector(getBakery);\n  const [additionalControllers, setAdditionalControllers] = useLocalStorage(\n    \"additionalControllers\",\n    []\n  );\n  const history = useHistory();\n\n  function handleRegisterAController(e) {\n    e.preventDefault();\n    // XXX Validate form values\n    additionalControllers.push([\n      `wss://${formValues.wsControllerHost}/api`, // wsControllerURL\n      { user: formValues.username, password: formValues.password }, // credentials\n      null, // bakery\n      formValues.identityProviderAvailable, // identityProviderAvailable\n      true, // additional controller\n    ]);\n    setAdditionalControllers(additionalControllers);\n    dispatch(connectAndStartPolling(reduxStore, bakery));\n    // Close the panel\n    history.push(\"/controllers\");\n  }\n\n  function handleInputChange(e) {\n    const newFormValues = { ...formValues };\n    newFormValues[e.target.name] =\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\n    setFormValues(newFormValues);\n  }\n\n  function generateTheControllerLink(controllerIP) {\n    if (!controllerIP) {\n      return \"the controller\";\n    }\n    const dashboardLink = `https://${controllerIP}/dashboard`;\n    return (\n      <a href={dashboardLink} target=\"_blank\" rel=\"noopener noreferrer\">\n        the controller\n      </a>\n    );\n  }\n\n  return (\n    <Aside>\n      <div className=\"p-panel register-controller\">\n        <PanelHeader title={<h4>Register a controller</h4>} />\n        <div className=\"p-panel__content\">\n          <p className=\"p-form-help-text\">\n            Information can be retrieved using the{\" \"}\n            <code>juju show-controller</code> command.\n          </p>\n          <form\n            className=\"p-form p-form--stacked\"\n            onSubmit={handleRegisterAController}\n          >\n            <div className=\"p-form__group row\">\n              <div className=\"col-2\">\n                <label\n                  htmlFor=\"controller-name\"\n                  className=\"p-form__label is-required\"\n                >\n                  Name\n                </label>\n              </div>\n\n              <div className=\"col-10\">\n                <div className=\"p-form__control\">\n                  <input\n                    type=\"text\"\n                    id=\"controller-name\"\n                    name=\"controllerName\"\n                    onChange={handleInputChange}\n                    required={true}\n                  />\n                  <p className=\"p-form-help-text\">\n                    Must be a valid alpha-numeric Juju controller name. <br />\n                    e.g. production-controller-aws\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"p-form__group row\">\n              <div className=\"col-2\">\n                <label htmlFor=\"host\" className=\"p-form__label is-required\">\n                  Host\n                </label>\n              </div>\n\n              <div className=\"col-10\">\n                <div className=\"p-form__control\">\n                  <input\n                    type=\"text\"\n                    id=\"host\"\n                    name=\"wsControllerHost\"\n                    onChange={handleInputChange}\n                    required={true}\n                  />\n                  <p className=\"p-form-help-text\">\n                    You'll typically want to use the public IP:Port address for\n                    the controller. <br />\n                    e.g. 91.189.88.181:17070\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"p-form__group row\">\n              <div className=\"col-2\">\n                <label htmlFor=\"username\" className=\"p-form__label\">\n                  Username\n                </label>\n              </div>\n\n              <div className=\"col-10\">\n                <div className=\"p-form__control\">\n                  <input\n                    type=\"text\"\n                    id=\"username\"\n                    name=\"username\"\n                    onChange={handleInputChange}\n                  />\n                  <p className=\"p-form-help-text\">\n                    The username you use to access the controller.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"p-form__group row\">\n              <div className=\"col-2\">\n                <label htmlFor=\"password\" className=\"p-form__label\">\n                  Password\n                </label>\n              </div>\n\n              <div className=\"col-10\">\n                <div className=\"p-form__control\">\n                  <input\n                    type=\"password\"\n                    id=\"password\"\n                    name=\"password\"\n                    onChange={handleInputChange}\n                  />\n                  <p className=\"p-form-help-text\">\n                    The password will be what you used when running{\" \"}\n                    <code>juju register</code> or if unchanged from the default\n                    it can be retrieved by running <code>juju dashboard</code>.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div\n              className={classNames(\"p-form__group row\", {\n                \"u-hide\": formValues.username && formValues.password,\n              })}\n            >\n              <div className=\"col-10 col-start-large-3\">\n                <input\n                  type=\"checkbox\"\n                  id=\"identityProviderAvailable\"\n                  name=\"identityProvider\"\n                  defaultChecked={false}\n                  onChange={handleInputChange}\n                />\n                <label htmlFor=\"identityProviderAvailable\">\n                  An identity provider is available.{\" \"}\n                </label>\n                <div className=\"p-form-help-text identity-provider\">\n                  If you provided a username and password this should be left\n                  unchecked.\n                </div>\n              </div>\n            </div>\n            <div className=\"p-form__group row\">\n              <div className=\"col-10 col-start-large-3\">\n                <i className=\"p-icon--warning\"></i>\n                <div className=\"controller-link-message\">\n                  Visit{\" \"}\n                  {generateTheControllerLink(formValues?.wsControllerHost)} to\n                  accept the certificate on this controller to enable a secure\n                  connection\n                </div>\n              </div>\n            </div>\n            <div className=\"p-form__group row\">\n              <div className=\"col-10 col-start-large-3\">\n                <input\n                  type=\"checkbox\"\n                  id=\"certificateHasBeenAccepted\"\n                  name=\"certificateAccepted\"\n                  defaultChecked={false}\n                  onChange={handleInputChange}\n                  required={true}\n                />\n                <label htmlFor=\"certificateHasBeenAccepted\">\n                  The SSL certificate, if any, has been accepted.{\" \"}\n                  <span className=\"required-star\">*</span>\n                </label>\n              </div>\n            </div>\n\n            <hr />\n\n            <div className=\"row register-a-controller__submit-segment\">\n              <div className=\"col-9\">\n                <p className=\"p-form-help-text\">\n                  The credentials are stored locally in your browser and can be\n                  cleared on log-out.\n                </p>\n              </div>\n              <div className=\"col-3\">\n                <button\n                  className=\"p-button--positive\"\n                  type=\"submit\"\n                  disabled={!formValues.certificateAccepted}\n                >\n                  Add Controller\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </Aside>\n  );\n}\n","import { useMemo } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getModelUUID, getModelStatus } from \"app/selectors\";\nimport { useSelector } from \"react-redux\";\nimport { useQueryParams, StringParam } from \"use-query-params\";\n\n// Return model status data based on model name in URL\nexport default function useModelStatus() {\n  let { modelName } = useParams();\n\n  // if model name cannot be derived from URL params, fallback and check for\n  // query string value.\n  const queryParams = useQueryParams({\n    model: StringParam,\n  });\n\n  if (!modelName) {\n    modelName = queryParams[0].model;\n  }\n\n  const getModelUUIDMemo = useMemo(() => getModelUUID(modelName), [modelName]);\n  const modelUUID = useSelector(getModelUUIDMemo);\n  const getModelStatusMemo = useMemo(\n    () => getModelStatus(modelUUID),\n    [modelUUID]\n  );\n\n  return useSelector(getModelStatusMemo);\n}\n","import { motion, AnimatePresence } from \"framer-motion\";\n\ntype Props = {\n  children: JSX.Element;\n  className?: string;\n  isAnimating: boolean;\n};\n\nexport default function SlideDownFadeOut({\n  children,\n  className,\n  isAnimating,\n}: Props): JSX.Element {\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 1, y: 0 }}\n        animate={isAnimating && { opacity: 0, y: 50 }}\n        className={className}\n      >\n        {children}\n      </motion.div>\n    </AnimatePresence>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { Formik, Field, Form } from \"formik\";\nimport { formatFriendlyDateToNow } from \"app/utils/utils\";\nimport type { TSFixMe } from \"types\";\n\nimport SlideDownFadeOut from \"animations/SlideDownFadeOut\";\n\nimport \"./_share-card.scss\";\n\ntype Props = {\n  userName: string;\n  lastConnected: string | null;\n  access: string;\n  isOwner: boolean;\n  removeUser: (userName: string) => void;\n  accessSelectChange: (\n    e: React.ChangeEvent<HTMLInputElement>,\n    userName: string\n  ) => TSFixMe;\n};\n\nexport default function ShareCard({\n  userName,\n  lastConnected,\n  access,\n  isOwner,\n  removeUser,\n  accessSelectChange,\n}: Props) {\n  const [inFocus, setInFocus] = useState(false);\n  const [hasBeenRemoved, setHasBeenRemoved] = useState(false);\n  const [showStatus, setShowStatus] = useState(true);\n  const [updateStatus, setUpdateStatus] = useState<null | string>(null);\n\n  useEffect(() => {\n    const timeOut = setTimeout(() => {\n      setShowStatus(false);\n    }, 3000);\n\n    return () => {\n      clearTimeout(timeOut);\n    };\n  }, [showStatus]);\n\n  const getStatusIconClassNames = (status: string | null) => {\n    let classNames = \"\";\n    switch (status) {\n      case \"Updating\":\n        classNames = \"p-icon--spinner u-animation--spin\";\n        break;\n      case \"Updated\":\n        classNames = \"p-icon--success\";\n        break;\n      case \"Error\":\n        classNames = \"p-icon--error\";\n        break;\n      default:\n        break;\n    }\n    return classNames;\n  };\n\n  return (\n    <div>\n      <SlideDownFadeOut isAnimating={hasBeenRemoved}>\n        <div className=\"share-card\" data-active={inFocus}>\n          <div className=\"share-card__title\">\n            <strong className=\"share-card__username\">{userName}</strong>\n            <span className=\"share-card__secondary\">\n              {isOwner ? (\n                \"Owner\"\n              ) : (\n                <i\n                  className=\"p-icon--delete\"\n                  onClick={() => {\n                    removeUser(userName);\n                    setHasBeenRemoved(true);\n                  }}\n                  onKeyPress={() => removeUser(userName)}\n                  role=\"button\"\n                  tabIndex={0}\n                >\n                  Remove user\n                </i>\n              )}\n            </span>\n          </div>\n          <div className=\"share-card__supplementary\">\n            Last connected:{\" \"}\n            {lastConnected ? formatFriendlyDateToNow(lastConnected) : `Never`}\n            <div className=\"share-card__access-wrapper\">\n              {!isOwner && (\n                <>\n                  <Formik initialValues={{}} onSubmit={() => {}}>\n                    <Form>\n                      <Field\n                        as=\"select\"\n                        name=\"access\"\n                        onFocus={() => setInFocus(true)}\n                        onBlur={() => setInFocus(false)}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          setShowStatus(true);\n                          setUpdateStatus(\"Updating\");\n                          const accessChange = accessSelectChange(e, userName);\n                          if (accessChange) {\n                            accessChange.then((response: any) => {\n                              if (!response?.results[0]?.error) {\n                                setInFocus(false);\n                                setUpdateStatus(\"Updated\");\n                              } else {\n                                setUpdateStatus(\"Error\");\n                              }\n                            });\n                          }\n                        }}\n                        value={access}\n                        className=\"share__card-access\"\n                      >\n                        <option value=\"read\">read</option>\n                        <option value=\"write\">write</option>\n                        <option value=\"admin\">admin</option>\n                      </Field>\n                    </Form>\n                  </Formik>\n\n                  <div className=\"share-card__status\" data-visible={showStatus}>\n                    <div\n                      className={`share-card__status-wrap ${\n                        updateStatus === \"updating\" ? \"is-spinner\" : \"\"\n                      }`}\n                    >\n                      <span className=\"share-card__status-text\">\n                        {updateStatus}\n                      </span>{\" \"}\n                      <i className={getStatusIconClassNames(updateStatus)}></i>\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </SlideDownFadeOut>\n    </div>\n  );\n}\n","import toast from \"react-hot-toast\";\n\nimport \"./_toast-card.scss\";\n\ntype ToastInstance = {\n  createdAt: number;\n  duration?: number | undefined;\n  id: string;\n  message: any;\n  pauseDuration: number;\n  type: string;\n  visible: boolean;\n};\n\ntype Props = {\n  toastInstance: ToastInstance;\n  type: \"positive\" | \"caution\" | \"negative\";\n  text: string;\n  undo?: () => void;\n};\n\nexport default function ToastCard({ toastInstance, type, text, undo }: Props) {\n  let iconName;\n  switch (type) {\n    case \"positive\":\n      iconName = \"success\";\n      break;\n    case \"caution\":\n      iconName = \"warning\";\n      break;\n    case \"negative\":\n      iconName = \"error\";\n      break;\n    default:\n      break;\n  }\n\n  const handleClose = (id: string) => {\n    toast.remove(id);\n  };\n\n  return (\n    <div\n      className=\"toast-card\"\n      data-type={type}\n      role=\"status\"\n      aria-live=\"polite\"\n    >\n      <div className=\"toast-card__body\">\n        {iconName && <i className={`p-icon--${iconName}`}>Success</i>}\n        <div\n          className=\"toast-card__message\"\n          dangerouslySetInnerHTML={{ __html: text }}\n        ></div>\n        <i\n          className=\"p-icon--close\"\n          onClick={() => handleClose(toastInstance.id)}\n          onKeyPress={() => handleClose(toastInstance.id)}\n          role=\"button\"\n          tabIndex={0}\n        >\n          Close\n        </i>\n      </div>\n      {undo && (\n        <footer className=\"toast-card__undo\">\n          <button\n            onClick={() => {\n              undo();\n              handleClose(toastInstance.id);\n            }}\n            className=\"p-button--base\"\n          >\n            Undo\n          </button>\n        </footer>\n      )}\n    </div>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { useStore, useSelector, useDispatch } from \"react-redux\";\nimport { Formik, Field, Form } from \"formik\";\nimport cloneDeep from \"clone-deep\";\nimport useModelStatus from \"hooks/useModelStatus\";\nimport { setModelSharingPermissions } from \"juju\";\nimport { motion } from \"framer-motion\";\nimport toast from \"react-hot-toast\";\n\nimport { getModelControllerDataByUUID } from \"app/selectors\";\n\nimport Aside from \"components/Aside/Aside\";\nimport PanelHeader from \"components/PanelHeader/PanelHeader\";\nimport ShareCard from \"components/ShareCard/ShareCard\";\nimport ToastCard from \"components/ToastCard/ToastCard\";\n\nimport type { TSFixMe } from \"types\";\n\nimport \"./share-model.scss\";\n\ntype ModelControllerData = {\n  additionalController: boolean;\n  path: string;\n  url: string;\n  uuid: string;\n  version: string;\n};\n\ntype User = {\n  user: string;\n  \"display-name\": string;\n  \"last-connection\": string | null;\n  access: string;\n};\n\ntype UsersAccess = {\n  [key: string]: string;\n};\n\ntype UserAccess = {\n  name: string;\n  access: string | null;\n};\n\ntype DefaultRootState = {};\n\nexport default function ShareModel() {\n  const dispatch = useDispatch();\n  const store = useStore();\n  const [usersAccess, setUsersAccess] = useState<UsersAccess>({});\n  const [newUserFormSubmitActive, setNewUserFormSubmitActive] = useState(false);\n\n  const [showAddNewUser, setShowAddNewUser] = useState(false);\n\n  const modelStatusData: TSFixMe = useModelStatus() || null;\n\n  const controllerUUID = modelStatusData?.info?.[\"controller-uuid\"];\n  const modelUUID = modelStatusData?.info.uuid;\n  const modelName = modelStatusData?.info.name;\n\n  const modelControllerDataByUUID =\n    getModelControllerDataByUUID(controllerUUID);\n\n  const modelControllerData: ModelControllerData = useSelector(\n    modelControllerDataByUUID as (\n      state: DefaultRootState\n    ) => ModelControllerData\n  );\n\n  const modelControllerURL = modelControllerData?.url;\n  const users = modelStatusData?.info?.users;\n\n  useEffect(() => {\n    const clonedUserAccess: UsersAccess | null = cloneDeep(usersAccess);\n\n    users?.forEach((user: User) => {\n      const displayName = user[\"user\"];\n\n      if (clonedUserAccess) {\n        clonedUserAccess[displayName] = user?.[\"access\"];\n        setUsersAccess(clonedUserAccess);\n      }\n    });\n  }, [users]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const isOwner = (user: string) => {\n    return user === modelStatusData?.info[\"owner-tag\"].replace(\"user-\", \"\");\n  };\n\n  const userAlreadyHasAccess = (userName: string, users: User[]) => {\n    return users.some((userEntry: User) => userEntry.user === userName);\n  };\n\n  const handleValidateNewUser = (values: TSFixMe) => {\n    setNewUserFormSubmitActive(\n      values.username !== \"\" && values.accessLevel !== null\n    );\n  };\n\n  const updatePermissions = async (\n    action: string,\n    user: string,\n    permissionTo: string | undefined,\n    permissionFrom: string | undefined\n  ) => {\n    const response = await setModelSharingPermissions(\n      modelControllerURL,\n      modelUUID,\n      store.getState,\n      user,\n      permissionTo,\n      permissionFrom,\n      action,\n      dispatch\n    );\n    if (response?.error) {\n      toast.custom((t) => (\n        <ToastCard toastInstance={t} type=\"negative\" text={response.error} />\n      ));\n      return false;\n    } else {\n      return response;\n    }\n  };\n\n  const handleAccessSelectChange = async (\n    e: React.ChangeEvent<HTMLInputElement>,\n    userName: string\n  ) => {\n    const permissionTo = e.target.value;\n    const clonedUserAccess = cloneDeep(usersAccess);\n    if (clonedUserAccess) {\n      clonedUserAccess[userName] = permissionTo;\n    }\n    setUsersAccess(clonedUserAccess);\n    const permissionFrom = usersAccess?.[userName];\n\n    const response = await updatePermissions(\n      \"grant\",\n      userName,\n      permissionTo,\n      permissionFrom\n    );\n    const error = response?.results[0]?.error?.message;\n    if (error) {\n      toast.custom((t) => (\n        <ToastCard toastInstance={t} type=\"negative\" text={error} />\n      ));\n    } else {\n      toast.custom((t) => (\n        <ToastCard\n          toastInstance={t}\n          type=\"positive\"\n          text={`Permissions for <strong>${userName}</strong> have been changed to <em>${permissionTo}.</em>`}\n        />\n      ));\n    }\n    return response;\n  };\n\n  const handleRemoveUser = async (userName: string) => {\n    await updatePermissions(\n      \"revoke\",\n      userName,\n      undefined,\n      usersAccess?.[userName]\n    );\n\n    toast.custom((t) => (\n      <ToastCard\n        toastInstance={t}\n        type=\"positive\"\n        text={`<strong>${userName}</strong> has been successfully removed.`}\n        undo={async () => {\n          const permissionTo = usersAccess?.[userName];\n          const permissionFrom = undefined;\n          await updatePermissions(\n            \"grant\",\n            userName,\n            permissionTo,\n            permissionFrom\n          );\n        }}\n      />\n    ));\n  };\n\n  const handleNewUserFormSubmit = async (\n    values: UserAccess,\n    resetForm: () => void\n  ) => {\n    if (userAlreadyHasAccess(values.name, users)) {\n      toast.custom((t) => (\n        <ToastCard\n          toastInstance={t}\n          type=\"negative\"\n          text={`<strong>${values.name}</strong> already has access to this model.`}\n        />\n      ));\n    } else {\n      const newUserName = values.name;\n      const newUserPermission = values.access;\n      let response = null;\n      if (newUserName && newUserPermission) {\n        response = await updatePermissions(\n          \"grant\",\n          newUserName,\n          newUserPermission,\n          undefined\n        );\n      }\n\n      const error = response?.results[0]?.error?.message;\n      if (error) {\n        toast.custom((t) => (\n          <ToastCard toastInstance={t} type=\"negative\" text={error} />\n        ));\n      } else {\n        resetForm();\n        toast.custom((t) => (\n          <ToastCard\n            toastInstance={t}\n            type=\"positive\"\n            text={`<strong>${values.name}</strong> now has access to this model.`}\n          />\n        ));\n      }\n    }\n  };\n\n  // Ensure user with 'owner' status is always the first card\n  const sortedUsers = cloneDeep(users || null);\n  sortedUsers?.some(\n    (item: User, i: Number) =>\n      isOwner(item.user) && sortedUsers.unshift(sortedUsers.splice(i, 1)[0])\n  );\n\n  return (\n    <Aside loading={!modelStatusData} isSplit={true}>\n      <motion.div layout className=\"p-panel share-model\">\n        <PanelHeader\n          title={\n            <div className=\"title-wrapper\">\n              {showAddNewUser ? (\n                <>\n                  <button\n                    className=\"p-button--base has-icon\"\n                    onClick={() => setShowAddNewUser(false)}\n                  >\n                    <i className=\"p-icon--chevron-up\"></i>\n                    <span>Back</span>\n                  </button>\n                </>\n              ) : (\n                <div className=\"title-wrapper__heading\">\n                  <h5>\n                    <i className=\"p-icon--share is-inline\"></i> Model access:{\" \"}\n                    {modelName}\n                  </h5>{\" \"}\n                </div>\n              )}\n            </div>\n          }\n        />\n        <div\n          className=\"p-panel__content aside-split-wrapper\"\n          // This attribute toggles between the cards and form on small screens\n          data-mobile-show-add-user={showAddNewUser}\n        >\n          <div className=\"aside-split-col share-cards\">\n            <div className=\"share-cards__heading\">\n              <h5>Sharing with:</h5>\n              <button\n                className=\"add-user-btn p-button--base has-icon\"\n                onClick={() => setShowAddNewUser(true)}\n              >\n                <i className=\"p-icon--plus\"></i>\n                <span>Add new user</span>\n              </button>\n            </div>\n            {sortedUsers?.map((userObj: User) => {\n              const userName = userObj[\"user\"];\n              const lastConnected = userObj[\"last-connection\"];\n              return (\n                <ShareCard\n                  key={userName}\n                  userName={userName}\n                  lastConnected={lastConnected}\n                  access={usersAccess?.[userName]}\n                  isOwner={isOwner(userName)}\n                  removeUser={handleRemoveUser}\n                  accessSelectChange={handleAccessSelectChange}\n                />\n              );\n            })}\n          </div>\n          <div className=\"aside-split-col add-new-user\">\n            <h5>Add new user</h5>\n            <Formik\n              initialValues={{\n                name: \"\",\n                access: \"read\",\n              }}\n              validate={(values) => handleValidateNewUser(values)}\n              onSubmit={(values, { resetForm }) => {\n                handleNewUserFormSubmit(values, resetForm);\n                setShowAddNewUser(false);\n              }}\n            >\n              <Form>\n                <label className=\"is-required\" htmlFor=\"username\">\n                  Username\n                </label>\n                <Field\n                  required\n                  type=\"text\"\n                  placeholder=\"Username\"\n                  name=\"name\"\n                />\n                <label className=\"is-required\" htmlFor=\" \">\n                  Access level\n                </label>\n                <div className=\"p-radio\">\n                  <label htmlFor=\"accessRead\">\n                    <Field\n                      id=\"accessRead\"\n                      type=\"radio\"\n                      className=\"p-radio__input\"\n                      name=\"access\"\n                      aria-labelledby=\"Read\"\n                      value=\"read\"\n                    />\n                    <span className=\"p-radio__label\" id=\"accessLevel1\">\n                      read\n                      <span className=\"help-text\">\n                        A user can view the state of the model\n                      </span>\n                    </span>\n                  </label>\n                </div>\n\n                <div className=\"p-radio\">\n                  <label htmlFor=\"accessWrite\">\n                    <Field\n                      id=\"accessWrite\"\n                      type=\"radio\"\n                      className=\"p-radio__input\"\n                      name=\"access\"\n                      aria-labelledby=\"Write\"\n                      value=\"write\"\n                    />\n                    <span className=\"p-radio__label\" id=\"accessLevel2\">\n                      write\n                      <span className=\"help-text\">\n                        In addition to 'read' abilities, a user can\n                        modify/configure models\n                      </span>\n                    </span>\n                  </label>\n                </div>\n\n                <div className=\"p-radio\">\n                  <label htmlFor=\"accessAdmin\">\n                    <Field\n                      id=\"accessAdmin\"\n                      type=\"radio\"\n                      className=\"p-radio__input\"\n                      name=\"access\"\n                      aria-labelledby=\"Admin\"\n                      value=\"admin\"\n                    />\n                    <span className=\"p-radio__label\" id=\"accessLevel3\">\n                      admin\n                      <span className=\"help-text\">\n                        In addition to 'write' abilities, a user can perform\n                        model upgrades and connect to machines via juju ssh.\n                        Makes the user an effective model owner.\n                      </span>\n                    </span>\n                  </label>\n                </div>\n                <div className=\"action-wrapper\">\n                  <button\n                    className=\"p-button--positive\"\n                    type=\"submit\"\n                    disabled={!newUserFormSubmitActive}\n                  >\n                    Add user\n                  </button>\n                </div>\n              </Form>\n            </Formik>\n          </div>\n        </div>\n      </motion.div>\n    </Aside>\n  );\n}\n","import { useQueryParam, StringParam } from \"use-query-params\";\nimport { AnimatePresence } from \"framer-motion\";\nimport useEventListener from \"hooks/useEventListener\";\n\nimport ActionsPanel from \"panels/ActionsPanel/ActionsPanel\";\nimport RegisterController from \"panels/RegisterController/RegisterController\";\nimport ShareModel from \"panels/ShareModelPanel/ShareModel\";\n\nimport \"./_panels.scss\";\n\n// Close panel if Escape key is pressed when panel active\nexport const close = {\n  onEscape: function (\n    e: KeyboardEvent,\n    queryStringSetter: (qs: undefined) => void\n  ) {\n    if (e.code === \"Escape\") {\n      queryStringSetter(undefined);\n    }\n  },\n};\n\nexport default function Panels() {\n  const [panelQs, setPanelQs] = useQueryParam(\"panel\", StringParam);\n\n  useEventListener(\"keydown\", (e: KeyboardEvent) =>\n    close.onEscape(e, setPanelQs)\n  );\n\n  const generatePanel = () => {\n    switch (panelQs) {\n      case \"register-controller\":\n        return <RegisterController />;\n      case \"execute-action\":\n        return <ActionsPanel />;\n      case \"share-model\":\n        return <ShareModel />;\n      default:\n        return null;\n    }\n  };\n  return <AnimatePresence>{panelQs && generatePanel()}</AnimatePresence>;\n}\n","import { TSFixMe } from \"types\";\nimport { useState, useEffect } from \"react\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Toaster } from \"react-hot-toast\";\n\nimport Logo from \"components/Logo/Logo\";\nimport Banner from \"components/Banner/Banner\";\nimport PrimaryNav from \"components/PrimaryNav/PrimaryNav\";\n\nimport Panels from \"panels/panels\";\n\nimport useOffline from \"hooks/useOffline\";\n\nimport type { EntityDetailsRoute } from \"components/Routes/Routes\";\n\nimport { sideNavCollapsed } from \"ui/actions\";\nimport { isSideNavCollapsed } from \"ui/selectors\";\n\nimport \"./_base-layout.scss\";\n\ntype Props = {\n  children: JSX.Element;\n};\n\nconst BaseLayout = ({ children }: Props) => {\n  const [mobileMenuCollapsed, setMobileMenuCollapsed] = useState(true);\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  // Check if pathname includes a model name - and then always collapse sidebar\n  const { modelName } = useParams<EntityDetailsRoute>();\n\n  const collapseSidebar = useSelector<TSFixMe>(isSideNavCollapsed) || false;\n\n  useEffect(() => {\n    dispatch(sideNavCollapsed(!!modelName));\n\n    return () => {\n      dispatch(sideNavCollapsed(false));\n    };\n  }, [modelName, dispatch]);\n\n  const isOffline = useOffline();\n\n  return (\n    <>\n      <a className=\"skip-main\" href=\"#main-content\">\n        Skip to main content\n      </a>\n\n      <Banner\n        isActive={isOffline !== null}\n        variant={isOffline === false ? \"positive\" : \"caution\"}\n      >\n        {isOffline ? (\n          <p>Your dashboard is offline.</p>\n        ) : (\n          <p>\n            Your dashboard is now back online - please{\" \"}\n            <a href={location.pathname}>refresh your browser.</a>\n          </p>\n        )}\n      </Banner>\n\n      <div id=\"confirmation-modal-container\"></div>\n\n      <div className=\"l-application\">\n        <div className=\"l-navigation-bar\">\n          <Logo />\n          <button\n            className=\"is-dense toggle-menu\"\n            onClick={() => {\n              setMobileMenuCollapsed(!mobileMenuCollapsed);\n            }}\n          >\n            {mobileMenuCollapsed ? \"Open menu\" : \"Close menu\"}\n          </button>\n        </div>\n        <header\n          className=\"l-navigation\"\n          data-collapsed={mobileMenuCollapsed}\n          data-sidenav-initially-collapsed={collapseSidebar}\n        >\n          <div className=\"l-navigation__drawer\">\n            <PrimaryNav />\n          </div>\n        </header>\n        <main className=\"l-main\" id=\"main-content\">\n          <div data-test=\"main-children\">{children}</div>\n        </main>\n        <Panels />\n        <Toaster\n          position=\"bottom-right\"\n          containerClassName=\"toast-container\"\n          toastOptions={{\n            duration: 5000,\n          }}\n          reverseOrder={true}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default BaseLayout;\n","import { useState, useEffect } from \"react\";\n\n/**\n * Returns offline status\n *\n * @returns {Boolean} isOffline\n */\nexport default function useOffline() {\n  const [isOffline, setIsOffline] = useState(null);\n\n  useEffect(() => {\n    const offlineEvent = window.addEventListener(\n      \"offline\",\n      function () {\n        setIsOffline(true);\n      },\n      false\n    );\n    const onlineEvent = window.addEventListener(\n      \"online\",\n      function () {\n        setIsOffline(false);\n      },\n      false\n    );\n    return () => {\n      window.removeEventListener(\"offline\", offlineEvent);\n      window.removeEventListener(\"online\", onlineEvent);\n    };\n  }, []);\n\n  return isOffline;\n}\n","import \"./_header.scss\";\n\ntype Props = {\n  children: JSX.Element;\n};\n\nconst Header = ({ children }: Props): JSX.Element => {\n  return <div className=\"header\">{children}</div>;\n};\n\nexport default Header;\n","import { motion, AnimatePresence } from \"framer-motion\";\n\ntype Props = {\n  children: JSX.Element;\n  className?: string;\n  isActive: boolean;\n};\n\nexport default function FadeIn({\n  children,\n  className,\n  isActive = true,\n}: Props): JSX.Element {\n  return (\n    <>\n      {isActive && (\n        <AnimatePresence>\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className={className}\n          >\n            {children}\n          </motion.div>\n        </AnimatePresence>\n      )}\n    </>\n  );\n}\n","import { useEffect } from \"react\";\n\n/**\n * Set the browser window title.\n * @param {String} title - The title to set.\n */\nexport default function useWindowTitle(title) {\n  const titlePart = title ? `${title} | ` : \"\";\n  useEffect(() => {\n    document.title = `${titlePart}Juju Dashboard`;\n  }, [titlePart]);\n}\n","import { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\nconst DonutChart = ({ chartData }) => {\n  const svgRef = useRef();\n  const width = 100;\n  const height = 100;\n  const scale = 0.49;\n\n  const isDisabled =\n    (chartData?.blocked || 0) +\n      (chartData?.alert || 0) +\n      (chartData?.running || 0) ===\n    0\n      ? true\n      : false;\n\n  useEffect(() => {\n    const radius = Math.min(width, height) / 2;\n\n    const svg = d3\n      .select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\n        \"transform\",\n        `translate(${width / 2},${height / 2}) scale(${scale},${scale})`\n      );\n\n    const data = !isDisabled ? chartData : { disabled: 1 };\n\n    const color = d3\n      .scaleOrdinal()\n      .domain(Object.keys(data))\n      .range(\n        !isDisabled ? [\"is-blocked\", \"is-alert\", \"is-running\"] : [\"is-disabled\"]\n      );\n\n    const pie = d3.pie().value((d) => d[1]);\n    const dataReady = pie(Object.entries(data));\n\n    svg\n      .selectAll(\"g\")\n      .data(dataReady)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", d3.arc().innerRadius(100).outerRadius(radius))\n      .attr(\"class\", (d) => color(d.data[0]));\n\n    return () => {\n      svg.remove();\n    };\n  }, [chartData, isDisabled]);\n  return <svg ref={svgRef} />;\n};\n\nexport default DonutChart;\n","import DonutChart from \"components/DonutChart/DonutChart\";\n\nimport { pluralize } from \"app/utils/utils\";\n\nimport \"./_controller-chart.scss\";\n\nfunction getPercentage(denominator, numerator) {\n  if (denominator === 0 || numerator === 0) {\n    return 0;\n  }\n  const trunc = Math.trunc(denominator / numerator);\n  if (Number.isNaN(trunc)) {\n    return 0;\n  }\n  return trunc;\n}\n\nexport default function ControllerChart({ chartData, totalLabel }) {\n  const totalCount =\n    (chartData.blocked || 0) +\n    (chartData.alert || 0) +\n    (chartData.running || 0);\n\n  return (\n    <div className=\"p-chart\">\n      <div className=\"p-chart__chart\">\n        <DonutChart chartData={chartData} />\n      </div>\n      <div className=\"p-chart__legend\">\n        <ul className=\"p-list p-legend\">\n          <li\n            className=\"p-list__item p-legend__item label\"\n            data-test=\"legend-label\"\n          >\n            <strong data-test=\"total-count\">\n              {totalCount} {pluralize(totalCount, totalLabel)}\n            </strong>\n          </li>\n          <li\n            className=\"p-list__item p-legend__item is-blocked\"\n            data-test=\"legend-blocked\"\n          >\n            Blocked: {getPercentage(totalCount, chartData.blocked)}%,{\" \"}\n            {chartData.blocked || 0}\n          </li>\n          <li\n            className=\"p-list__item p-legend__item is-alert\"\n            data-test=\"legend-alert\"\n          >\n            Alerts: {getPercentage(totalCount, chartData.alert)}%,{\" \"}\n            {chartData.alert || 0}\n          </li>\n          <li\n            className=\"p-list__item p-legend__item is-running\"\n            data-test=\"legend-running\"\n          >\n            Running: {getPercentage(totalCount, chartData.running)}%,{\" \"}\n            {chartData.running || 0}\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import { useSelector } from \"react-redux\";\n\nimport {\n  getGroupedMachinesDataByStatus,\n  getGroupedApplicationsDataByStatus,\n  getGroupedUnitsDataByStatus,\n} from \"app/selectors\";\nimport ControllerChart from \"../ControllerChart/ControllerChart\";\n\nimport \"./_controller-overview.scss\";\n\nexport default function ControllersOverview() {\n  const groupedMachinesDataByStatus = useSelector(\n    getGroupedMachinesDataByStatus\n  );\n  const groupedApplicationsDataByStatus = useSelector(\n    getGroupedApplicationsDataByStatus\n  );\n  const groupedUnitsDataByStatus = useSelector(getGroupedUnitsDataByStatus);\n\n  let machinesChartData = {\n    blocked: groupedMachinesDataByStatus.blocked.length,\n    alert: groupedMachinesDataByStatus.alert.length,\n    running: groupedMachinesDataByStatus.running.length,\n  };\n  let applicationsChartData = {\n    blocked: groupedApplicationsDataByStatus.blocked.length,\n    alert: groupedApplicationsDataByStatus.alert.length,\n    running: groupedApplicationsDataByStatus.running.length,\n  };\n  let unitsChartData = {\n    blocked: groupedUnitsDataByStatus.blocked.length,\n    alert: groupedUnitsDataByStatus.alert.length,\n    running: groupedUnitsDataByStatus.running.length,\n  };\n\n  return (\n    <div className=\"p-strip is-shallow controllers-overview\">\n      <div className=\"controllers-overview__container\">\n        <div className=\"controllers-overview__chart\">\n          <ControllerChart chartData={machinesChartData} totalLabel=\"machine\" />\n        </div>\n        <div className=\"controllers-overview__chart\">\n          <ControllerChart\n            chartData={applicationsChartData}\n            totalLabel=\"application\"\n          />\n        </div>\n        <div className=\"controllers-overview__chart\">\n          <ControllerChart chartData={unitsChartData} totalLabel=\"unit\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport cloneDeep from \"clone-deep\";\n\nimport BaseLayout from \"layout/BaseLayout/BaseLayout\";\nimport Header from \"components/Header/Header\";\nimport MainTable from \"@canonical/react-components/dist/components/MainTable/MainTable\";\n\nimport FadeIn from \"animations/FadeIn\";\n\nimport useWindowTitle from \"hooks/useWindowTitle\";\n\nimport { getControllerData, getModelData } from \"app/selectors\";\n\nimport { useQueryParam, StringParam } from \"use-query-params\";\n\nimport ControllersOverview from \"./ControllerOverview/ControllerOverview\";\n\nimport \"./_controllers.scss\";\n\nfunction Details() {\n  useWindowTitle(\"Controllers\");\n  const controllerData = useSelector(getControllerData);\n  const modelData = useSelector(getModelData);\n\n  const controllerMap = {};\n  const additionalControllers = [];\n  if (controllerData) {\n    Object.entries(controllerData).forEach((controllerData) => {\n      controllerData[1].forEach((controller) => {\n        if (controller.additionalController) {\n          additionalControllers.push(controller.uuid);\n        }\n        controllerMap[controller.uuid] = {\n          ...controller,\n          models: 0,\n          machines: 0,\n          applications: 0,\n          units: 0,\n          wsControllerURL: controllerData[0],\n        };\n      });\n    });\n    if (modelData) {\n      for (const modelUUID in modelData) {\n        const model = modelData[modelUUID];\n        if (model.info) {\n          const controllerUUID = model.info[\"controller-uuid\"];\n          if (controllerMap[controllerUUID]) {\n            controllerMap[controllerUUID].models += 1;\n            controllerMap[controllerUUID].machines += Object.keys(\n              model.machines\n            ).length;\n            const applicationKeys = Object.keys(model.applications);\n            controllerMap[controllerUUID].applications +=\n              applicationKeys.length;\n            const unitCount = applicationKeys.reduce((acc, appName) => {\n              const units = model.applications[appName].units || {}; // Subordinates don't have units\n              return acc + Object.keys(units).length;\n            }, 0);\n            controllerMap[controllerUUID].units += unitCount;\n          }\n        }\n      }\n    }\n  }\n\n  const headers = [\n    { content: \"Default\", sortKey: \"name\" },\n    { content: \"cloud/region\", sortKey: \"cloud/region\" },\n    { content: \"models\", sortKey: \"models\", className: \"u-align--right\" },\n    { content: \"machines\", sortKey: \"machines\", className: \"u-align--right\" },\n    {\n      content: \"applications\",\n      sortKey: \"applications\",\n      className: \"u-align--right\",\n    },\n    { content: \"units\", sortKey: \"units\", className: \"u-align--right\" },\n    { content: \"version\", sortKey: \"version\", className: \"u-align--right\" },\n    { content: \"public\", sortKey: \"public\", className: \"u-align--right\" },\n  ];\n\n  const additionalHeaders = cloneDeep(headers);\n  additionalHeaders[0].content = (\n    <span>\n      Registered\n      <span\n        className=\"controllers--registered-tooltip p-icon--help\"\n        title=\"The controller authentication data is only stored in your browser localStorage. If you'd like this to persist across browsers try JAAS\"\n      ></span>\n    </span>\n  );\n\n  function generatePathValue(controllerData) {\n    const column = { content: \"\" };\n    if (controllerData?.path === \"admin/jaas\") {\n      column.content = \"JAAS\";\n    } else if (controllerData?.path) {\n      column.content = controllerData.path;\n    } else {\n      column.content = controllerData?.wsControllerURL;\n      column.className = \"is-disconnected\";\n      column.title = \"disconnected\";\n    }\n    return column;\n  }\n\n  function generateRow(c) {\n    const cloud = c?.location?.cloud || \"unknown\";\n    const region = c?.location?.region || \"unknown\";\n    const cloudRegion = `${cloud}/${region}`;\n    const publicAccess = `${c?.Public}` || \"False\";\n\n    return {\n      columns: [\n        generatePathValue(c),\n        { content: cloudRegion },\n        { content: c.models, className: \"u-align--right\" },\n        { content: c.machines, className: \"u-align--right\" },\n        { content: c.applications, className: \"u-align--right\" },\n        { content: c.units, className: \"u-align--right\" },\n        { content: c.version, className: \"u-align--right\" },\n        { content: publicAccess, className: \"u-align--right u-capitalise\" },\n      ],\n    };\n  }\n\n  // XXX this isn't a great way of doing this.\n  const additionalRows = additionalControllers.map((uuid) => {\n    const row = generateRow(controllerMap[uuid]);\n    delete controllerMap[uuid];\n    return row;\n  });\n\n  const rows = controllerMap && Object.values(controllerMap).map(generateRow);\n\n  const setPanelQs = useQueryParam(\"panel\", StringParam)[1];\n\n  return (\n    <>\n      <div className=\"controllers--header\">\n        <div className=\"controllers__heading\">\n          Model status across controllers\n        </div>\n        <div className=\"controllers--register\">\n          <button\n            className=\"p-button--positive\"\n            onClick={() => setPanelQs(\"register-controller\")}\n          >\n            Register a controller\n          </button>\n        </div>\n      </div>\n      <ControllersOverview />\n      <div className=\"l-controllers-table u-overflow--scroll\">\n        {rows.length > 0 && <MainTable headers={headers} rows={rows} />}\n        {additionalRows.length > 0 && (\n          <MainTable headers={additionalHeaders} rows={additionalRows} />\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default function ControllersIndex() {\n  const controllerData = useSelector(getControllerData);\n  let controllerCount = 0;\n  if (controllerData) {\n    controllerCount = Object.keys(controllerData).length;\n  }\n  const modelData = useSelector(getModelData);\n  let modelCount = 0;\n  if (modelData) {\n    modelCount = Object.keys(modelData).length;\n  }\n\n  return (\n    <BaseLayout>\n      <Header>\n        <div className=\"entity-details__header\">\n          <strong className=\"controllers--count\">\n            {controllerCount} controllers,{\" \"}\n            <Link to=\"/models\">{modelCount} models</Link>\n          </strong>\n        </div>\n      </Header>\n      <div className=\"l-content controllers\">\n        <FadeIn isActive={true}>\n          <Details />\n        </FadeIn>\n      </div>\n    </BaseLayout>\n  );\n}\n","import { useSelector, useStore } from \"react-redux\";\nimport { getActiveUserTag, getWSControllerURL } from \"app/selectors\";\n\nexport default function useActiveUser() {\n  const store = useStore();\n  const getState = store.getState;\n  return getActiveUserTag(useSelector(getWSControllerURL), getState())?.replace(\n    \"user-\",\n    \"\"\n  );\n}\n","export default __webpack_public_path__ + \"static/media/aws.80fb338e.svg\";","export default __webpack_public_path__ + \"static/media/azure.394f88bf.svg\";","export default __webpack_public_path__ + \"static/media/gce.cf230f61.svg\";","export default __webpack_public_path__ + \"static/media/kubernetes.f5c2ef9a.svg\";","import awsLogo from \"static/images/logo/cloud/aws.svg\";\nimport azureLogo from \"static/images/logo/cloud/azure.svg\";\nimport gceLogo from \"static/images/logo/cloud/gce.svg\";\nimport kubernetesLogo from \"static/images/logo/cloud/kubernetes.svg\";\n\nimport { Link } from \"react-router-dom\";\nimport { extractCloudName, extractCredentialName } from \"app/utils/utils\";\n\n/**\n  Generates the model details link for the table cell. If no ownerTag can be\n  provided then it'll return raw text for the model name.\n  @param {String} modelName The name of the model.\n  @param {String} ownerTag The ownerTag of the model.\n  @param {String} label The contents of the link.\n  @returns {Object} The React component for the link.\n*/\nexport function generateModelDetailsLink(modelName, ownerTag, label) {\n  // Because we get some data at different times based on the multiple API calls\n  // we need to check for their existence and supply reasonable fallbacks if it\n  // isn't available. Once we have a single API call for all the data this check\n  // can be removed.\n  if (!ownerTag) {\n    // We will just return an unclickable name until we get an owner tag as\n    // without it we can't create a reliable link.\n    return label;\n  }\n  // If the owner isn't the logged in user then we need to use the\n  // fully qualified path name.\n  const modelDetailsPath = `/models/${ownerTag.replace(\n    \"user-\",\n    \"\"\n  )}/${modelName}`;\n  return <Link to={modelDetailsPath}>{label}</Link>;\n}\n\n/**\n  Used to fetch the values from status as it won't be defined when the\n  modelInfo data is.\n  @param {Object|undefined} status The status for the model.\n  @param {String} key The key to fetch.\n  @returns {String} The computed value for the requested field if defined, or\n    an empty string.\n*/\nexport function getStatusValue(status, key) {\n  let returnValue = \"\";\n  if (typeof status === \"object\" && status !== null) {\n    switch (key) {\n      case \"summary\":\n        const applicationKeys = Object.keys(status.applications);\n        const applicationCount = applicationKeys.length;\n        const machineCount = Object.keys(status.machines).length;\n        const unitCount = applicationKeys.reduce((prev, key) => {\n          const units = status.applications[key].units || {};\n          return prev + Object.keys(units).length;\n        }, 0);\n\n        returnValue = (\n          <>\n            <div className=\"u-flex\">\n              <div\n                className=\"u-flex--block p-tooltip--top-center\"\n                aria-describedby=\"tp-cntr\"\n              >\n                <div className=\"has-icon\">\n                  <i className=\"p-icon--applications\"></i>\n                  <span>{applicationCount}</span>\n                </div>\n                <span\n                  className=\"p-tooltip__message\"\n                  role=\"tooltip\"\n                  id=\"tp-cntr\"\n                >\n                  Applications\n                </span>\n              </div>\n              <div\n                className=\"u-flex--block p-tooltip--top-center\"\n                aria-describedby=\"tp-cntr\"\n              >\n                <div className=\"has-icon\">\n                  <i className=\"p-icon--units\"></i>\n                  <span>{unitCount}</span>\n                </div>\n                <span\n                  className=\"p-tooltip__message\"\n                  role=\"tooltip\"\n                  id=\"tp-cntr\"\n                >\n                  Units\n                </span>\n              </div>\n              <div\n                className=\"u-flex--block p-tooltip--top-center\"\n                aria-describedby=\"tp-cntr\"\n              >\n                <div className=\"has-icon\">\n                  <i className=\"p-icon--machines\"></i>\n                  <span>{machineCount}</span>\n                </div>\n                <span\n                  className=\"p-tooltip__message\"\n                  role=\"tooltip\"\n                  id=\"tp-cntr\"\n                >\n                  Machines\n                </span>\n              </div>\n            </div>\n          </>\n        );\n        break;\n      case \"cloud-tag\":\n        returnValue = extractCloudName(status.model[\"cloud-tag\"]);\n        break;\n      case \"region\":\n        returnValue = status.model.region;\n        break;\n      case \"cloud-credential-tag\":\n        returnValue = extractCredentialName(status[\"cloud-credential-tag\"]);\n        break;\n      case \"controllerUuid\":\n        returnValue = status[\"controller-uuid\"];\n        break;\n      case \"controllerName\":\n        returnValue = status.controllerName;\n        break;\n      case \"status.since\":\n        returnValue = status.status.since?.split(\"T\")[0];\n        break;\n      default:\n        console.log(`unsupported status value key: ${key}`);\n        break;\n    }\n  }\n  return returnValue;\n}\n\n/**\n  Generates the cloud and region info from model data.\n  @param {Object} model The model data.\n  @returns {Object} The React element for the model cloud and region cell.\n*/\nexport function generateCloudCell(model) {\n  let provider = model?.info?.[\"provider-type\"];\n  let logo = null;\n  switch (provider) {\n    case \"ec2\":\n      logo = (\n        <img\n          src={awsLogo}\n          alt=\"AWS logo\"\n          className=\"p-table__logo\"\n          data-test=\"provider-logo\"\n        />\n      );\n      break;\n    case \"gce\":\n      logo = (\n        <img\n          src={gceLogo}\n          alt=\"Google Cloud Platform logo\"\n          className=\"p-table__logo\"\n          data-test=\"provider-logo\"\n        />\n      );\n      break;\n    case \"azure\":\n      logo = (\n        <img\n          src={azureLogo}\n          alt=\"Azure logo\"\n          className=\"p-table__logo\"\n          data-test=\"provider-logo\"\n        />\n      );\n      break;\n    case \"kubernetes\":\n      logo = (\n        <img\n          src={kubernetesLogo}\n          alt=\"Kubernetes logo\"\n          className=\"p-table__logo\"\n          data-test=\"provider-logo\"\n        />\n      );\n      break;\n  }\n\n  const cloud = (\n    <>\n      {logo}\n      {generateCloudAndRegion(model)}\n    </>\n  );\n\n  return cloud;\n}\n\n/**\n  Returns the model cloud and region data formatted as {cloud}/{region}.\n  @param {Object} model The model data\n  @returns {String} The formatted cloud and region data.\n*/\nexport function generateCloudAndRegion(model) {\n  return `${getStatusValue(model, \"cloud-tag\")}/${getStatusValue(\n    model,\n    \"region\"\n  )}`;\n}\n\n/**\n  Returns the model access button or an alternative value\n  @param {Function} setPanelQs A function to set query strings\n  @param {String} modelName the name of the model\n  @returns {Object} The markup for the table cell\n*/\nexport function generateAccessButton(setPanelQs, modelName) {\n  return (\n    <button\n      onClick={() => {\n        setPanelQs({\n          model: modelName,\n          panel: \"share-model\",\n        });\n      }}\n      className=\"model-access p-button--neutral is-dense\"\n    >\n      Access\n    </button>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport MainTable from \"@canonical/react-components/dist/components/MainTable\";\nimport { useQueryParams, StringParam, withDefault } from \"use-query-params\";\nimport useActiveUser from \"hooks/useActiveUser\";\n\nimport {\n  generateStatusElement,\n  getModelStatusGroupData,\n  extractOwnerName,\n  canAdministerModelAccess,\n} from \"app/utils/utils\";\n\nimport { getGroupedByStatusAndFilteredModelData } from \"app/selectors\";\n\nimport {\n  generateModelDetailsLink,\n  getStatusValue,\n  generateCloudCell,\n  generateCloudAndRegion,\n  generateAccessButton,\n} from \"./shared\";\n\n/**\n  Generates the table headers for the supplied table label.\n  @param {String} label The title of the table.\n  @param {Number} count The number of elements in the status.\n  @returns {Array} The headers for the table.\n*/\nfunction generateStatusTableHeaders(label, count) {\n  return [\n    {\n      content: generateStatusElement(label, count),\n      sortKey: \"name\",\n    },\n    { content: \"\", sortKey: \"summary\" }, // The unit/machines/apps counts\n    { content: \"Owner\", sortKey: \"owner\" },\n    { content: \"Cloud/Region\", sortKey: \"cloud\" },\n    { content: \"Credential\", sortKey: \"credential\" },\n    { content: \"Controller\", sortKey: \"controller\" },\n    {\n      content: \"Last Updated\",\n      sortKey: \"lastUpdated\",\n      className: \"u-align--right\",\n    },\n    {\n      content: \"\",\n      sortKey: \"\",\n      className: \"sm-screen-access-header\",\n    },\n  ];\n}\n\n/**\n  Generates the warning message for the model name cell.\n  @param {Object} model The full model data.\n  @return {Object} The react component for the warning message.\n*/\nconst generateWarningMessage = (model) => {\n  const { messages } = getModelStatusGroupData(model);\n  const title = messages.join(\"; \");\n  const link = generateModelDetailsLink(\n    model.model.name,\n    model?.info?.ownerTag,\n    title\n  );\n  return (\n    <span className=\"model-table-list_error-message\" title={title}>\n      {link}\n    </span>\n  );\n};\n\n/**\n  Generates the model name cell.\n  @param {Object} model The model data.\n  @param {String} groupLabel The status group the model belongs in.\n    e.g. blocked, alert, running\n  @returns {Object} The React element for the model name cell.\n*/\nconst generateModelNameCell = (model, groupLabel) => {\n  const link = generateModelDetailsLink(\n    model.model.name,\n    model.info && model.info[\"owner-tag\"],\n    model.model.name\n  );\n  return (\n    <>\n      <div>{link}</div>\n      {groupLabel === \"blocked\" ? generateWarningMessage(model) : null}\n    </>\n  );\n};\n\n/**\n  Returns the model info and statuses in the proper format for the table data.\n  @param {Object} groupedModels The models grouped by state\n  @returns {Object} The formatted table data.\n*/\nfunction generateModelTableDataByStatus(groupedModels, setPanelQs, activeUser) {\n  const modelData = {\n    blockedRows: [],\n    alertRows: [],\n    runningRows: [],\n  };\n\n  Object.keys(groupedModels).forEach((groupLabel) => {\n    const models = groupedModels[groupLabel];\n\n    models.forEach((model) => {\n      let owner = \"\";\n      if (model.info) {\n        owner = extractOwnerName(model.info[\"owner-tag\"]);\n      }\n      const cloud = generateCloudCell(model);\n      const credential = getStatusValue(model.info, \"cloud-credential-tag\");\n      const controller = getStatusValue(model.info, \"controllerName\");\n      // .slice(2) here will make the year 2 characters instead of 4\n      // e.g. 2021-01-01 becomes 21-01-01\n      const lastUpdated = getStatusValue(model.info, \"status.since\")?.slice(2);\n      modelData[`${groupLabel}Rows`].push({\n        \"data-test-model-uuid\": model?.uuid,\n        columns: [\n          {\n            \"data-test-column\": \"name\",\n            content: generateModelNameCell(model, groupLabel),\n          },\n          {\n            \"data-test-column\": \"summary\",\n            content: getStatusValue(model, \"summary\"),\n            className: \"u-overflow--visible\",\n          },\n          {\n            \"data-test-column\": \"owner\",\n            content: <>{owner}</>,\n          },\n          {\n            \"data-test-column\": \"cloud\",\n            content: cloud,\n            className: \"u-truncate\",\n            title: generateCloudAndRegion(model),\n          },\n          {\n            \"data-test-column\": \"credential\",\n            content: credential,\n          },\n          {\n            \"data-test-column\": \"controller\",\n            content: controller,\n          },\n          // We're not currently able to get a last-accessed or updated from JAAS.\n          {\n            \"data-test-column\": \"updated\",\n            content: (\n              <>\n                {canAdministerModelAccess(activeUser, model?.info?.users) &&\n                  generateAccessButton(setPanelQs, model.model.name)}\n                <span className=\"model-access-alt\">{lastUpdated}</span>\n              </>\n            ),\n            className: `u-align--right lrg-screen-access-cell ${\n              canAdministerModelAccess(activeUser, model?.info?.users)\n                ? \"has-permission\"\n                : \"\"\n            }`,\n          },\n          {\n            content: (\n              <>\n                {canAdministerModelAccess(activeUser, model?.info?.users) &&\n                  generateAccessButton(setPanelQs, model.model.name)}\n              </>\n            ),\n            className: \"sm-screen-access-cell\",\n          },\n        ],\n        sortData: {\n          name: model.model.name,\n          owner,\n          cloud,\n          credential,\n          controller,\n          lastUpdated,\n        },\n      });\n    });\n  });\n\n  return modelData;\n}\n\nexport default function StatusGroup({ filters }) {\n  const groupedAndFilteredData = useSelector(\n    getGroupedByStatusAndFilteredModelData(filters)\n  );\n  const setPanelQs = useQueryParams({\n    model: StringParam,\n    panel: withDefault(StringParam, \"share-model\"),\n  })[1];\n  const activeUser = useActiveUser();\n\n  const { blockedRows, alertRows, runningRows } =\n    generateModelTableDataByStatus(\n      groupedAndFilteredData,\n      setPanelQs,\n      activeUser\n    );\n\n  const emptyStateMsg = \"There are no models with this status\";\n\n  return (\n    <div className=\"status-group u-overflow--scroll\">\n      {blockedRows.length ? (\n        <MainTable\n          headers={generateStatusTableHeaders(\"Blocked\", blockedRows.length)}\n          rows={blockedRows}\n          sortable\n          emptyStateMsg={emptyStateMsg}\n          className=\"p-main-table\"\n        />\n      ) : null}\n      {alertRows.length ? (\n        <MainTable\n          headers={generateStatusTableHeaders(\"Alert\", alertRows.length)}\n          rows={alertRows}\n          sortable\n          emptyStateMsg={emptyStateMsg}\n          className=\"p-main-table\"\n        />\n      ) : null}\n      {runningRows.length ? (\n        <MainTable\n          headers={generateStatusTableHeaders(\"Running\", runningRows.length)}\n          rows={runningRows}\n          sortable\n          emptyStateMsg={emptyStateMsg}\n          className=\"p-main-table\"\n        />\n      ) : null}\n    </div>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport MainTable from \"@canonical/react-components/dist/components/MainTable\";\nimport { useQueryParams, StringParam, withDefault } from \"use-query-params\";\nimport useActiveUser from \"hooks/useActiveUser\";\n\nimport {\n  generateStatusElement,\n  getModelStatusGroupData,\n  extractOwnerName,\n  canAdministerModelAccess,\n} from \"app/utils/utils\";\n\nimport { getGroupedByCloudAndFilteredModelData } from \"app/selectors\";\n\nimport {\n  generateModelDetailsLink,\n  getStatusValue,\n  generateAccessButton,\n} from \"./shared\";\n\n/**\n  Returns the model info and statuses in the proper format for the table data.\n  @param {Object} groupedModels The models grouped by state\n  @returns {Object} The formatted table data.\n*/\nfunction generateModelTableDataByCloud(groupedModels) {\n  const modelData = {};\n  Object.keys(groupedModels).forEach((cloud) => {\n    modelData[cloud] = modelData[cloud] || [];\n    modelData[cloud].push(groupedModels[cloud]);\n  });\n  return modelData;\n}\n\n/**\n  Generates the table headers for the cloud grouped table\n  @param {String} cloud The title of the table.\n  @param {Number} count The number of elements in the status.\n  @returns {Array} The headers for the table.\n*/\nfunction generateCloudTableHeaders(cloud, count) {\n  return [\n    {\n      content: generateStatusElement(cloud, count, false),\n      sortKey: \"name\",\n    },\n    { content: \"\", sortKey: \"summary\" }, // The unit/machines/apps counts\n    { content: \"Owner\", sortKey: \"owner\" },\n    { content: \"Status\", sortKey: \"status\" },\n    { content: \"Region\", sortKey: \"region\" },\n    { content: \"Credential\", sortKey: \"credential\" },\n    { content: \"Controller\", sortKey: \"controller\" },\n    {\n      content: \"Last Updated\",\n      sortKey: \"lastUpdated\",\n      className: \"u-align--right\",\n    },\n    {\n      content: \"\",\n      sortKey: \"\",\n      className: \"sm-screen-access-header\",\n    },\n  ];\n}\n\nexport default function CloudGroup({ filters }) {\n  const activeUser = useActiveUser();\n\n  const groupedAndFilteredData = useSelector(\n    getGroupedByCloudAndFilteredModelData(filters)\n  );\n\n  const setPanelQs = useQueryParams({\n    model: StringParam,\n    panel: withDefault(StringParam, \"share-model\"),\n  })[1];\n\n  const cloudRows = generateModelTableDataByCloud(groupedAndFilteredData);\n  let cloudTables = [];\n  let cloudModels = {};\n  for (const cloud in cloudRows) {\n    Object.values(cloudRows[cloud]).forEach((modelGroup) => {\n      cloudModels.rows = [];\n      modelGroup.forEach((model) => {\n        const { highestStatus } = getModelStatusGroupData(model);\n        const owner = extractOwnerName(model.info[\"owner-tag\"]);\n        const region = getStatusValue(model, \"region\");\n        const credential = getStatusValue(model.info, \"cloud-credential-tag\");\n        const controller = getStatusValue(model.info, \"controllerName\");\n        const lastUpdated = getStatusValue(model.info, \"status.since\")?.slice(\n          2\n        );\n        cloudModels.rows.push({\n          \"data-test-model-uuid\": model?.uuid,\n          columns: [\n            {\n              \"data-test-column\": \"name\",\n              content: generateModelDetailsLink(\n                model.info.name,\n                model.info && model.info[\"owner-tag\"],\n                model.info.name\n              ),\n            },\n            {\n              \"data-test-column\": \"summary\",\n              content: getStatusValue(model, \"summary\"),\n              className: \"u-overflow--visible\",\n            },\n            {\n              \"data-test-column\": \"owner\",\n              content: owner,\n            },\n            {\n              \"data-test-column\": \"status\",\n              content: generateStatusElement(highestStatus),\n              className: \"u-capitalise\",\n            },\n            {\n              \"data-test-column\": \"region\",\n              content: region,\n            },\n            {\n              \"data-test-column\": \"credential\",\n              content: credential,\n            },\n            {\n              \"data-test-column\": \"controller\",\n              content: controller,\n            },\n            // We're not currently able to get a last-accessed or updated from JAAS.\n            {\n              \"data-test-column\": \"updated\",\n              content: (\n                <>\n                  {canAdministerModelAccess(activeUser, model?.info?.users) &&\n                    generateAccessButton(setPanelQs, model.info.name)}\n                  <span className=\"model-access-alt\">{lastUpdated}</span>\n                </>\n              ),\n              className: `u-align--right lrg-screen-access-cell ${\n                canAdministerModelAccess(activeUser, model?.info?.users)\n                  ? \"has-permission\"\n                  : \"\"\n              }`,\n            },\n            {\n              content: (\n                <>\n                  {canAdministerModelAccess(activeUser, model?.info?.users) &&\n                    generateAccessButton(setPanelQs, model.info.name)}\n                </>\n              ),\n              className: \"sm-screen-access-cell\",\n            },\n          ],\n          sortData: {\n            name: model.info.name,\n            owner,\n            status: highestStatus,\n            region,\n            credential,\n            controller,\n            lastUpdated,\n          },\n        });\n      });\n    });\n\n    cloudTables.push(\n      <MainTable\n        key={cloud}\n        headers={generateCloudTableHeaders(cloud, cloudModels.rows.length)}\n        rows={cloudModels.rows}\n        sortable\n      />\n    );\n  }\n  return <div className=\"cloud-group u-overflow--scroll\">{cloudTables}</div>;\n}\n","import { useSelector } from \"react-redux\";\nimport MainTable from \"@canonical/react-components/dist/components/MainTable\";\nimport { useQueryParams, StringParam, withDefault } from \"use-query-params\";\nimport useActiveUser from \"hooks/useActiveUser\";\n\nimport {\n  generateStatusElement,\n  getModelStatusGroupData,\n  canAdministerModelAccess,\n} from \"app/utils/utils\";\n\nimport { getGroupedByOwnerAndFilteredModelData } from \"app/selectors\";\n\nimport {\n  generateModelDetailsLink,\n  getStatusValue,\n  generateCloudCell,\n  generateCloudAndRegion,\n  generateAccessButton,\n} from \"./shared\";\n\n/**\n  Returns the model info and statuses in the proper format for the table data.\n  @param {Object} groupedModels The models grouped by state\n  @returns {Object} The formatted table data.\n*/\nfunction generateModelTableDataByOwner(groupedModels) {\n  const modelData = {};\n  Object.keys(groupedModels).forEach((owner) => {\n    modelData[owner] = modelData[owner] || [];\n    modelData[owner].push(groupedModels[owner]);\n  });\n  return modelData;\n}\n\n/**\n  Generates the table headers for the owner grouped table\n  @param {String} owner The title of the table.\n  @param {Number} count The number of elements in the status.\n  @returns {Array} The headers for the table.\n*/\nfunction generateOwnerTableHeaders(owner, count) {\n  return [\n    {\n      content: generateStatusElement(owner, count, false),\n      sortKey: \"name\",\n    },\n    { content: \"\", sortKey: \"summary\" }, // The unit/machines/apps counts\n    { content: \"Status\", sortKey: \"status\" },\n    { content: \"Cloud/Region\", sortKey: \"cloud\" },\n    { content: \"Credential\", sortKey: \"credential\" },\n    { content: \"Controller\", sortKey: \"controller\" },\n    {\n      content: \"Last Updated\",\n      sortKey: \"lastUpdated\",\n      className: \"u-align--right\",\n    },\n    {\n      content: \"\",\n      sortKey: \"\",\n      className: \"sm-screen-access-header\",\n    },\n  ];\n}\n\nexport default function OwnerGroup({ filters }) {\n  const groupedAndFilteredData = useSelector(\n    getGroupedByOwnerAndFilteredModelData(filters)\n  );\n  const ownerRows = generateModelTableDataByOwner(groupedAndFilteredData);\n  const setPanelQs = useQueryParams({\n    model: StringParam,\n    panel: withDefault(StringParam, \"share-model\"),\n  })[1];\n  const activeUser = useActiveUser();\n\n  let ownerTables = [];\n  let ownerModels = {};\n  for (const owner in ownerRows) {\n    Object.values(ownerRows[owner]).forEach((modelGroup) => {\n      ownerModels.rows = [];\n      modelGroup.forEach((model) => {\n        const { highestStatus } = getModelStatusGroupData(model);\n        const cloud = generateCloudCell(model);\n        const credential = getStatusValue(model.info, \"cloud-credential-tag\");\n        const controller = getStatusValue(model.info, \"controllerName\");\n        const lastUpdated = getStatusValue(model.info, \"status.since\")?.slice(\n          2\n        );\n        ownerModels.rows.push({\n          \"data-test-model-uuid\": model?.uuid,\n          columns: [\n            {\n              \"data-test-column\": \"name\",\n              content: generateModelDetailsLink(\n                model.info.name,\n                model.info && model.info[\"owner-tag\"],\n                model.info.name\n              ),\n            },\n            {\n              \"data-test-column\": \"summary\",\n              content: getStatusValue(model, \"summary\"),\n              className: \"u-overflow--visible\",\n            },\n            {\n              \"data-test-column\": \"status\",\n              content: generateStatusElement(highestStatus),\n              className: \"u-capitalise\",\n            },\n            {\n              \"data-test-column\": \"cloud\",\n              content: cloud,\n              className: \"u-truncate\",\n              title: generateCloudAndRegion(model),\n            },\n            {\n              \"data-test-column\": \"credential\",\n              content: credential,\n            },\n            {\n              \"data-test-column\": \"controller\",\n              content: controller,\n            },\n            {\n              \"data-test-column\": \"updated\",\n              content: (\n                <>\n                  {canAdministerModelAccess(activeUser, model?.info?.users) &&\n                    generateAccessButton(setPanelQs, model.info.name)}\n                  <span className=\"model-access-alt\">{lastUpdated}</span>\n                </>\n              ),\n              className: `u-align--right lrg-screen-access-cell ${\n                canAdministerModelAccess(activeUser, model?.info?.users)\n                  ? \"has-permission\"\n                  : \"\"\n              }`,\n            },\n            {\n              content: (\n                <>\n                  {canAdministerModelAccess(activeUser, model?.info?.users) &&\n                    generateAccessButton(setPanelQs, model.info.name)}\n                </>\n              ),\n              className: \"sm-screen-access-cell\",\n            },\n          ],\n          sortData: {\n            name: model.info.name,\n            status: highestStatus,\n            cloud,\n            credential,\n            controller,\n            lastUpdated,\n          },\n        });\n      });\n    });\n\n    ownerTables.push(\n      <MainTable\n        key={owner}\n        headers={generateOwnerTableHeaders(owner, ownerModels.rows.length)}\n        rows={ownerModels.rows}\n        sortable\n        className=\"p-main-table\"\n      />\n    );\n  }\n  return <div className=\"owners-group u-overflow--scroll\">{ownerTables}</div>;\n}\n","import StatusGroup from \"./StatusGroup\";\nimport CloudGroup from \"./CloudGroup\";\nimport OwnerGroup from \"./OwnerGroup\";\n\nimport \"./_model-table-list.scss\";\n\nexport default function ModelTableList({ filters, groupedBy }) {\n  switch (groupedBy) {\n    case \"status\":\n    default:\n      return <StatusGroup filters={filters} />;\n    case \"cloud\":\n      return <CloudGroup filters={filters} />;\n    case \"owner\":\n      return <OwnerGroup filters={filters} />;\n  }\n}\n","import classNames from \"classnames\";\n\nimport \"./_button-group.scss\";\n\ntype Props = {\n  buttons: string[];\n  label?: string;\n  activeButton: string;\n  setActiveButton: (value: string) => void;\n};\n\nconst ButtonGroup = ({\n  buttons,\n  label,\n  activeButton,\n  setActiveButton,\n}: Props): JSX.Element => {\n  return (\n    <div className=\"p-button-group\">\n      <div className=\"p-button-group__inner\">\n        {label ? (\n          <span className=\"p-button-group__label\" data-test=\"label\">\n            {label}\n          </span>\n        ) : null}\n        <div className=\"p-button-group__buttons\">\n          {buttons.map((label) => (\n            <button\n              aria-label={`view by ${label}`}\n              key={label}\n              className={classNames(\"p-button-group__button\", {\n                \"is-selected\": activeButton === label,\n              })}\n              value={label}\n              onClick={(e) => setActiveButton(e.currentTarget.value)}\n            >\n              {label}\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ButtonGroup;\n","import \"./_chip-group.scss\";\n\ntype Chip = {\n  [key: string]: number;\n};\n\ntype Props = {\n  chips: Chip;\n  descriptor: string | null;\n};\n\nconst ChipGroup = ({ chips, descriptor }: Props) => {\n  const getLabelType = (descriptor: string | null) => {\n    let label;\n    switch (descriptor) {\n      case \"localApps\":\n        label = \"Local applications\";\n        break;\n      case \"units\":\n        label = \"Units\";\n        break;\n      case \"machines\":\n        label = \"Machines\";\n        break;\n      default:\n        break;\n    }\n    return label;\n  };\n\n  const getSumTotal = (chips: Chip) => {\n    let total = 0;\n    chips &&\n      Object.values(chips).forEach((chipValue) => {\n        total += chipValue;\n      });\n    return total;\n  };\n\n  const numberOfChips = getSumTotal(chips);\n  const labelType = getLabelType(descriptor);\n\n  return (\n    <>\n      {numberOfChips > 0 && (\n        <div className=\"chip-group\">\n          {labelType && (\n            <strong className=\"chip-group__descriptor\">\n              {`${numberOfChips} ${labelType}`}\n            </strong>\n          )}\n          {Object.entries(chips).map(([label, count]) => {\n            return (\n              count > 0 && (\n                <div className=\"p-chip\" key={label}>\n                  <span\n                    className={`status-icon is-${label.toLowerCase()}`}\n                  >{`${count} ${label}`}</span>\n                </div>\n              )\n            );\n          })}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ChipGroup;\n","import { useSelector } from \"react-redux\";\nimport Spinner from \"@canonical/react-components/dist/components/Spinner\";\n\nimport BaseLayout from \"layout/BaseLayout/BaseLayout\";\nimport Header from \"components/Header/Header\";\nimport ModelTableList from \"components/ModelTableList/ModelTableList\";\nimport ButtonGroup from \"components/ButtonGroup/ButtonGroup\";\nimport ChipGroup from \"components/ChipGroup/ChipGroup\";\n\nimport { SearchAndFilter } from \"@canonical/react-components\";\nimport useModelAttributes from \"hooks/useModelAttributes\";\n\nimport useWindowTitle from \"hooks/useWindowTitle\";\n\nimport FadeIn from \"animations/FadeIn\";\n\nimport { pluralize } from \"app/utils/utils\";\n\nimport {\n  useQueryParam,\n  useQueryParams,\n  StringParam,\n  ArrayParam,\n  withDefault,\n} from \"use-query-params\";\n\nimport { getGroupedModelStatusCounts, getModelData } from \"app/selectors\";\n\nimport \"./_models.scss\";\n\nexport default function Models() {\n  useWindowTitle(\"Models\");\n  // Grab filter from 'groupedby' query in URL and assign to variable\n  const [groupModelsBy, setGroupModelsBy] = useQueryParam(\n    \"groupedby\",\n    withDefault(StringParam, \"status\")\n  );\n\n  const [filters, setFilters] = useQueryParams({\n    cloud: withDefault(ArrayParam, []),\n    owner: withDefault(ArrayParam, []),\n    region: withDefault(ArrayParam, []),\n    credential: withDefault(ArrayParam, []),\n    custom: withDefault(ArrayParam, []),\n  });\n\n  // loop model data and pull out filter panel data\n  const modelData = useSelector(getModelData);\n  const { clouds, regions, owners, credentials } =\n    useModelAttributes(modelData);\n\n  // Generate chips from available model data\n  const generateChips = (lead, values) => {\n    let chipValues = [];\n    values.forEach((value) => {\n      chipValues.push({ lead, value });\n    });\n    return chipValues;\n  };\n\n  const { blocked, alert, running } = useSelector(getGroupedModelStatusCounts);\n\n  let activeFilters = {};\n\n  const isObjectsEqual = (obj1, obj2) =>\n    JSON.stringify(obj1) === JSON.stringify(obj2);\n\n  const existingSearchData = [];\n  for (const [lead, values] of Object.entries(filters)) {\n    values.forEach((value) => {\n      existingSearchData.push({ lead, value });\n    });\n  }\n\n  const modelCount = blocked + alert + running;\n  const modelsLoaded = modelCount > 0;\n\n  return (\n    <BaseLayout>\n      <Header>\n        <div className=\"models__header\" data-disabled={modelCount === 0}>\n          <strong className=\"models__count\">\n            {modelCount} {pluralize(modelCount, \"model\")}\n          </strong>\n          <ButtonGroup\n            activeButton={groupModelsBy}\n            buttons={[\"status\", \"cloud\", \"owner\"]}\n            label=\"Group by:\"\n            setActiveButton={setGroupModelsBy}\n          />\n          <SearchAndFilter\n            filterPanelData={[\n              {\n                id: 0,\n                heading: \"Cloud\",\n                chips: generateChips(\"Cloud\", clouds),\n              },\n              {\n                id: 1,\n                heading: \"Region\",\n                chips: generateChips(\"Region\", regions),\n              },\n              {\n                id: 2,\n                heading: \"Owner\",\n                chips: generateChips(\"Owner\", owners),\n              },\n              {\n                id: 3,\n                heading: \"Credential\",\n                chips: generateChips(\"Credential\", credentials),\n              },\n            ]}\n            existingSearchData={existingSearchData}\n            returnSearchData={(searchData) => {\n              // Reset active filters\n              activeFilters = {\n                cloud: [],\n                owner: [],\n                region: [],\n                credential: [],\n                custom: [],\n              };\n\n              // Loop search data and pull out each filter\n              searchData.length &&\n                searchData.forEach(({ lead, value }) => {\n                  const chipLead = lead ? lead.toLowerCase() : \"custom\";\n                  if (!activeFilters[chipLead]) {\n                    activeFilters[chipLead] = [];\n                  }\n                  activeFilters[chipLead].push(value);\n                });\n\n              if (!isObjectsEqual(activeFilters, filters)) {\n                setFilters(activeFilters);\n              }\n            }}\n          />\n        </div>\n      </Header>\n\n      {modelsLoaded ? (\n        <FadeIn isActive={modelsLoaded}>\n          <div className=\"l-content\">\n            <div className=\"models\">\n              <ChipGroup chips={{ blocked, alert, running }} />\n              <ModelTableList groupedBy={groupModelsBy} filters={filters} />\n            </div>\n          </div>\n        </FadeIn>\n      ) : (\n        <div className=\"entity-details__loading\">\n          <Spinner />\n        </div>\n      )}\n    </BaseLayout>\n  );\n}\n","import {\n  extractCloudName,\n  extractOwnerName,\n  extractCredentialName,\n} from \"app/utils/utils\";\n\nexport default function useModelAttributes(modelData) {\n  const clouds = [];\n  const regions = [];\n  const owners = [];\n  const credentials = [];\n\n  // Loop the model data and pull out the available filters\n  Object.values(modelData).forEach((model) => {\n    if (!model.info) {\n      return;\n    }\n    // Extract cloud filters\n    const cloudFilter = extractCloudName(model.info[\"cloud-tag\"]);\n    if (!clouds.includes(cloudFilter)) clouds.push(cloudFilter);\n\n    // Extract region filters\n    const regionFilter = model.info[\"cloud-region\"];\n    if (!regions.includes(regionFilter)) regions.push(regionFilter);\n\n    // Extract owner filters\n    const ownerFilter = extractOwnerName(model.info[\"owner-tag\"]);\n    if (!owners.includes(ownerFilter)) owners.push(ownerFilter);\n\n    // Extract credential filters\n    const credentialFilter = extractCredentialName(\n      model.info[\"cloud-credential-tag\"]\n    );\n    if (!credentials.includes(credentialFilter))\n      credentials.push(credentialFilter);\n  });\n\n  return { clouds, regions, owners, credentials };\n}\n","import { createSelector } from \"reselect\";\n\nimport type { ReduxState, ModelsList } from \"types\";\nimport type {\n  AnnotationData,\n  ApplicationData,\n  MachineData,\n  ModelInfo,\n  ModelWatcherData,\n  RelationData,\n  UnitData,\n} from \"./types\";\n\nconst getModelWatcherData = (state: ReduxState): ModelWatcherData =>\n  state.juju.modelWatcherData;\nconst getModelList = (state: ReduxState): ModelsList => state.juju.models;\n\nexport function getModelWatcherDataByUUID(modelUUID: string) {\n  return createSelector(getModelWatcherData, (modelWatcherData) => {\n    if (modelWatcherData?.[modelUUID]) {\n      return modelWatcherData[modelUUID];\n    }\n    return null;\n  });\n}\n\nexport function getModelInfo(modelUUID: string) {\n  return createSelector(\n    getModelWatcherDataByUUID(modelUUID),\n    (modelWatcherData): ModelInfo | null => {\n      if (modelWatcherData) {\n        return modelWatcherData.model;\n      }\n      return null;\n    }\n  );\n}\n\nexport function getModelUUID(modelName: string, ownerName: string) {\n  return createSelector(getModelList, (modelList: ModelsList) => {\n    let modelUUID = \"\";\n    if (!modelList) {\n      return modelUUID;\n    }\n    Object.entries(modelList).some(([key, { name, ownerTag, uuid }]) => {\n      if (name === modelName && ownerTag.replace(\"user-\", \"\") === ownerName) {\n        modelUUID = uuid;\n        return true;\n      }\n      return false;\n    });\n    return modelUUID;\n  });\n}\n\nexport function getModelAnnotations(modelUUID: string) {\n  return createSelector(\n    getModelWatcherDataByUUID(modelUUID),\n    (modelWatcherData): AnnotationData | null => {\n      if (modelWatcherData) {\n        return modelWatcherData.annotations;\n      }\n      return null;\n    }\n  );\n}\n\nexport function getModelApplications(modelUUID: string) {\n  return createSelector(\n    getModelWatcherDataByUUID(modelUUID),\n    (modelWatcherData): ApplicationData | null => {\n      if (modelWatcherData) {\n        return modelWatcherData.applications;\n      }\n      return null;\n    }\n  );\n}\n\nexport function getModelUnits(modelUUID: string) {\n  return createSelector(\n    getModelWatcherDataByUUID(modelUUID),\n    (modelWatcherData): UnitData | null => {\n      if (modelWatcherData) {\n        return modelWatcherData.units;\n      }\n      return null;\n    }\n  );\n}\n\nexport function getModelRelations(modelUUID: string) {\n  return createSelector(\n    getModelWatcherDataByUUID(modelUUID),\n    (modelWatcherData): RelationData | null => {\n      if (modelWatcherData) {\n        return modelWatcherData.relations;\n      }\n      return null;\n    }\n  );\n}\n\nexport function getModelMachines(modelUUID: string) {\n  return createSelector(\n    getModelWatcherDataByUUID(modelUUID),\n    (modelWatcherData): MachineData | null => {\n      if (modelWatcherData) {\n        return modelWatcherData.machines;\n      }\n      return null;\n    }\n  );\n}\n\n// The order of this enum is important. It needs to be organized in order of\n// best to worst status.\nenum Statuses {\n  running,\n  alert,\n  blocked,\n}\n\ninterface StatusData {\n  // keyof typeof returns the list of string keys in the Statuses enum\n  // not the numeric indexes generated at compile time.\n  [applicationName: string]: keyof typeof Statuses;\n}\n\n/**\n  Returns an object of key value pairs indicating an\n  applications aggregate unit status.\n*/\nexport function getAllModelApplicationStatus(modelUUID: string) {\n  return createSelector(\n    getModelUnits(modelUUID),\n    (units): StatusData | null => {\n      if (!units) {\n        return null;\n      }\n\n      const applicationStatuses: StatusData = {};\n      // Convert the various unit statuses into our three current\n      // status types \"blocked\", \"alert\", \"running\".\n      Object.entries(units).forEach(([unitId, unitData]) => {\n        let workloadStatus = Statuses.running;\n        switch (unitData[\"workload-status\"].current) {\n          case \"maintenance\":\n          case \"waiting\":\n            workloadStatus = Statuses.alert;\n            break;\n          case \"blocked\":\n            workloadStatus = Statuses.blocked;\n            break;\n        }\n\n        let agentStatus = Statuses.running;\n        switch (unitData[\"agent-status\"].current) {\n          case \"allocating\":\n          case \"executing\":\n          case \"rebooting\":\n            agentStatus = Statuses.alert;\n            break;\n          case \"failed\":\n          case \"lost\":\n            agentStatus = Statuses.blocked;\n            break;\n        }\n        // Use the enum index to determine the worst status value.\n        const worstStatusIndex = Math.max(\n          workloadStatus,\n          agentStatus,\n          Statuses.running\n        );\n\n        applicationStatuses[unitData.application] = Statuses[\n          worstStatusIndex\n        ] as keyof typeof Statuses;\n      });\n\n      return applicationStatuses;\n    }\n  );\n}\n","import type { ReactNode } from \"react\";\nimport cloneDeep from \"clone-deep\";\n\ntype Header = HeaderRow[];\n\ntype HeaderRow = {\n  content: string | ReactNode;\n  sortKey?: string;\n  className?: string;\n};\n\nexport const localApplicationTableHeaders: Header = [\n  { content: \"local apps\", sortKey: \"local-apps\" },\n  { content: \"status\", sortKey: \"status\" },\n  { content: \"version\", sortKey: \"version\" },\n  { content: \"scale\", className: \"u-align--right\", sortKey: \"scale\" },\n  { content: \"store\", sortKey: \"store\" },\n  { content: \"rev\", className: \"u-align--right\", sortKey: \"rev\" },\n  { content: \"message\", sortKey: \"message\" },\n];\n\nexport const remoteApplicationTableHeaders: Header = [\n  { content: \"remote apps\", sortKey: \"remote-apps\" },\n  { content: \"status\", sortKey: \"status\" },\n  { content: \"interface\", sortKey: \"interface\" },\n  { content: \"offer url\", sortKey: \"offer-url\" },\n  { content: \"store\", sortKey: \"store\" },\n];\n\nexport const unitTableHeaders: Header = [\n  { content: \"unit\", sortKey: \"unit\" },\n  { content: \"workload\", sortKey: \"workload\" },\n  { content: \"agent\", sortKey: \"agent\" },\n  { content: \"machine\", className: \"u-align--right\", sortKey: \"machine\" },\n  { content: \"public address\", sortKey: \"publicAddress\" },\n  { content: \"ports\", className: \"u-align--right\", sortKey: \"ports\" },\n  { content: \"message\", sortKey: \"message\" },\n];\n\nexport const generateSelectableUnitTableHeaders = (\n  selectContent: HeaderRow,\n  removeMachines: boolean\n): Header => {\n  let headers = cloneDeep(unitTableHeaders);\n  if (removeMachines) {\n    headers = headers.filter((header) => !(header.sortKey === \"machine\"));\n  }\n  headers.splice(0, 0, selectContent);\n  return headers;\n};\n\nexport const machineTableHeaders: Header = [\n  { content: \"machine\", sortKey: \"machine\" },\n  { content: \"apps\", sortKey: \"apps\" },\n  { content: \"state\", sortKey: \"state\" },\n  { content: \"az\", sortKey: \"az\" },\n  { content: \"instance id\", sortKey: \"instanceId\" },\n  { content: \"message\", sortKey: \"message\" },\n];\n\nexport const relationTableHeaders: Header = [\n  { content: \"relation provider\", sortKey: \"provider\" },\n  { content: \"requirer\", sortKey: \"requirer\" },\n  { content: \"interface\", sortKey: \"interface\" },\n  { content: \"type\", sortKey: \"type\" },\n];\n\nexport const consumedTableHeaders: Header = [\n  { content: \"consumed\" },\n  { content: \"endpoint\" },\n  { content: \"status\" },\n];\n\nexport const offersTableHeaders: Header = [\n  { content: \"connected offers\" },\n  { content: \"endpoints\" },\n  { content: \"connections\" },\n];\n\nexport const appsOffersTableHeaders: Header = [\n  { content: \"offers\" },\n  { content: \"interface\" },\n  { content: \"connection\" },\n  { content: \"offer url\" },\n];\n","import cloneDeep from \"clone-deep\";\nimport { Field } from \"formik\";\n\nimport {\n  extractRevisionNumber,\n  generateStatusElement,\n  generateRelationIconImage,\n  extractRelationEndpoints,\n  generateIconImg,\n  generateEntityIdentifier,\n} from \"app/utils/utils\";\n\nexport function generateLocalApplicationRows(\n  applications,\n  applicationStatuses,\n  tableRowClick,\n  query\n) {\n  if (!applications) {\n    return [];\n  }\n\n  function getStore(charmURL) {\n    if (charmURL) {\n      return charmURL.indexOf(\"local:\") === 0 ? \"Local\" : \"Charmhub\";\n    }\n    return \"\";\n  }\n\n  return Object.keys(applications).map((key) => {\n    const app = applications[key];\n    const rev = extractRevisionNumber(app[\"charm-url\"]) || \"-\";\n    const store = getStore(app[\"charm-url\"]);\n    const version = app[\"workload-version\"] || \"-\";\n\n    return {\n      columns: [\n        {\n          \"data-test-column\": \"name\",\n          content: generateEntityIdentifier(app[\"charm-url\"] || \"\", key, false),\n          className: \"u-truncate\",\n        },\n        {\n          \"data-test-column\": \"status\",\n          content: app.status\n            ? generateStatusElement(applicationStatuses[app.name])\n            : \"-\",\n          className: \"u-capitalise u-truncate\",\n        },\n        {\n          \"data-test-column\": \"version\",\n          content: app[\"workload-version\"] || \"-\",\n        },\n        {\n          \"data-test-column\": \"scale\",\n          content: app[\"unit-count\"],\n          className: \"u-align--right\",\n        },\n        {\n          \"data-test-column\": \"store\",\n          content: store,\n        },\n        {\n          \"data-test-column\": \"revision\",\n          content: rev,\n          className: \"u-align--right\",\n        },\n        {\n          \"data-test-column\": \"message\",\n          content: app.status?.message,\n          className: \"u-truncate\",\n          title: app.status?.message,\n        },\n      ],\n      sortData: {\n        app: key,\n        status: app.status?.status,\n        version,\n        scale: app[\"unit-count\"],\n        store,\n        rev,\n        notes: \"-\",\n      },\n      onClick: (e) => tableRowClick(\"app\", key, e),\n      \"data-app\": key,\n      className:\n        query?.panel === \"apps\" && query?.entity === key ? \"is-selected\" : \"\",\n    };\n  });\n}\n\nexport function generateRemoteApplicationRows(\n  modelStatusData,\n  tableRowClick,\n  query\n) {\n  if (!modelStatusData) {\n    return [];\n  }\n  const applications = cloneDeep(modelStatusData[\"remote-applications\"]);\n  return (\n    applications &&\n    Object.keys(applications).map((key) => {\n      const app = applications[key];\n      const status = app.status.status;\n      const offerUrl = app[\"offer-url\"];\n\n      const interfaces = Object.keys(app?.[\"relations\"]).map(\n        (endpointInterface) => endpointInterface\n      );\n\n      return {\n        columns: [\n          {\n            \"data-test-column\": \"app\",\n            content: app[\"offer-name\"], // we cannot access charm name\n            className: \"u-truncate\",\n          },\n          {\n            \"data-test-column\": \"status\",\n            content: status,\n            className: \"u-capitalise u-truncate\",\n          },\n          {\n            \"data-test-column\": \"interface\",\n            content: interfaces.join(\",\"),\n          },\n          {\n            \"data-test-column\": \"offer_url\",\n            content: offerUrl,\n            className: \"u-truncate\",\n          },\n          {\n            \"data-test-column\": \"store\",\n            content: \"-\", // store info not yet available from API\n          },\n        ],\n        sortData: {\n          app: key,\n          status: \"status\",\n          interface: \"interface\",\n          offer_url: \"offer_url\",\n          store: \"store\",\n        },\n        \"data-app\": key,\n        onClick: (e) => false && tableRowClick(key, \"remoteApps\", e), // DISABLED PANEL\n        className:\n          query?.panel === \"remoteApps\" && query?.entity === key\n            ? \"is-selected\"\n            : \"\",\n      };\n    })\n  );\n}\n\nexport function generateUnitRows(\n  units,\n  tableRowClick,\n  showCheckbox,\n  hideMachines\n) {\n  if (!units) {\n    return [];\n  }\n\n  function generatePortsList(ports) {\n    if (!ports || ports.length === 0) {\n      return \"-\";\n    }\n    return ports.map((portData) => portData.number).join(\", \");\n  }\n\n  const clonedUnits = cloneDeep(units);\n\n  // Restructure the unit list data to allow for the proper subordinate\n  // rendering with the current table setup.\n  Object.entries(clonedUnits).forEach(([unitId, unitData]) => {\n    // The unit list may not have the principal in it because this code is\n    // used to generate the table for the application unit list as well\n    // in which case it'll be the only units in the list.\n    if (unitData.subordinate && clonedUnits[unitData.principal]) {\n      if (!clonedUnits[unitData.principal].subordinates) {\n        clonedUnits[unitData.principal].subordinates = {};\n      }\n      clonedUnits[unitData.principal].subordinates[unitId] = unitData;\n      delete clonedUnits[unitId];\n    }\n  });\n\n  const unitRows = [];\n  Object.keys(clonedUnits).forEach((unitId) => {\n    const unit = clonedUnits[unitId];\n    const workload = unit[\"workload-status\"].current || \"-\";\n    const agent = unit[\"agent-status\"].current || \"-\";\n    const publicAddress = unit[\"public-address\"] || \"-\";\n    const ports = generatePortsList(unit.ports);\n    const message = unit[\"workload-status\"].message || \"-\";\n    const charm = unit[\"charm-url\"];\n    let columns = [\n      {\n        content: generateEntityIdentifier(charm ? charm : \"\", unitId, false),\n        className: \"u-truncate\",\n      },\n      {\n        content: generateStatusElement(workload),\n        className: \"u-capitalise\",\n      },\n      { content: agent },\n      {\n        content: unit[\"machine-id\"],\n        className: \"u-align--right\",\n        key: \"machine\",\n      },\n      { content: publicAddress },\n      {\n        content: ports,\n        className: \"u-align--right\",\n        title: ports,\n      },\n      {\n        content: <span title={message}>{message}</span>,\n        className: \"u-truncate\",\n      },\n    ];\n\n    if (hideMachines) {\n      columns = columns.filter((column) => !(column.key === \"machine\"));\n    }\n\n    if (showCheckbox) {\n      const fieldID = `table-checkbox-${unitId}`;\n      const ariaLabeledBy = `aria-labeled-${unitId}`;\n      columns.splice(0, 0, {\n        content: (\n          <label className=\"p-checkbox--inline\" htmlFor={fieldID}>\n            <Field\n              id={fieldID}\n              type=\"checkbox\"\n              aria-labelledby={ariaLabeledBy}\n              className=\"p-checkbox__input\"\n              name=\"selectedUnits\"\n              value={unitId}\n            />\n            <span className=\"p-checkbox__label\" id={ariaLabeledBy}></span>\n          </label>\n        ),\n      });\n    }\n\n    unitRows.push({\n      columns,\n      sortData: {\n        unit: unitId,\n        workload,\n        agent,\n        machine: unit.machine,\n        publicAddress,\n        ports,\n        message,\n      },\n      onClick: (e) => tableRowClick(\"unit\", unitId, e),\n      \"data-unit\": unitId,\n    });\n\n    const subordinates = unit.subordinates;\n\n    if (subordinates) {\n      for (let [key] of Object.entries(subordinates)) {\n        const subordinate = subordinates[key];\n        let columns = [\n          {\n            content: generateEntityIdentifier(\n              subordinate[\"charm-url\"],\n              key,\n              true\n            ),\n            className: \"u-truncate\",\n          },\n          {\n            content: generateStatusElement(\n              subordinate[\"workload-status\"].current\n            ),\n            className: \"u-capitalise\",\n          },\n          { content: subordinate[\"agent-status\"].current },\n          { content: subordinate[\"machine-id\"], className: \"u-align--right\" },\n          { content: subordinate[\"public-address\"] },\n          {\n            content: subordinate[\"public-address\"].split(\":\")[-1] || \"-\",\n            className: \"u-align--right\",\n          },\n          {\n            content: subordinate[\"workload-status\"].current,\n            className: \"u-truncate\",\n          },\n        ];\n\n        if (showCheckbox) {\n          // Add an extra column if the checkbox is shown on the parent.\n          columns.splice(0, 0, {\n            content: \"\",\n          });\n        }\n\n        unitRows.push({\n          columns,\n          // This is using the parent data for sorting so that they stick to\n          // their parent while being sorted. This isn't fool-proof but it's\n          // the best we have for the current design and table implementation.\n          sortData: {\n            unit: unitId,\n            workload,\n            agent,\n            machine: unit[\"machine-id\"],\n            publicAddress,\n            ports,\n            message,\n          },\n          onClick: (e) => tableRowClick(\"unit\", unitId, e),\n          \"data-unit\": unitId,\n        });\n      }\n    }\n  });\n\n  return unitRows;\n}\n\nexport function generateMachineRows(\n  machines,\n  units,\n  tableRowClick,\n  selectedEntity\n) {\n  if (!machines) {\n    return [];\n  }\n\n  const generateMachineApps = (machineId, units) => {\n    const appsOnMachine = [];\n    units &&\n      Object.values(units).forEach((unitInfo) => {\n        if (machineId === unitInfo[\"machine-id\"]) {\n          appsOnMachine.push([unitInfo.application, unitInfo[\"charm-url\"]]);\n        }\n      });\n    const apps = appsOnMachine.length\n      ? appsOnMachine.map((app) => {\n          return generateIconImg(app[0], app[1]);\n        })\n      : \"None\";\n    return apps;\n  };\n\n  return Object.keys(machines).map((machineId) => {\n    const machine = machines[machineId];\n    const az =\n      machine?.[\"hardware-characteristics\"]?.[\"availability-zone\"] || \"\";\n    return {\n      columns: [\n        {\n          content: (\n            <>\n              <div>\n                {machineId}\n                <span className=\"u-capitalise\">. {machine.series}</span>\n              </div>\n              {machine.dnsName}\n            </>\n          ),\n        },\n        {\n          content: generateMachineApps(machineId, units),\n          className: \"machine-app-icons\",\n        },\n        {\n          content: generateStatusElement(machine[\"agent-status\"].current),\n          className: \"u-capitalise\",\n        },\n        { content: az },\n        { content: machine[\"instance-id\"] },\n        {\n          content: (\n            <span title={machine[\"agent-status\"].message}>\n              {machine[\"agent-status\"].message}\n            </span>\n          ),\n          className: \"u-truncate\",\n        },\n      ],\n      sortData: {\n        machine: machine.series,\n        state: machine?.[\"agent-status\"]?.current,\n        az,\n        instanceId: machine[\"instance-id\"],\n        message: machine?.[\"agent-status\"].message,\n      },\n      onClick: (e) => tableRowClick(\"machine\", machineId, e),\n      \"data-machine\": machineId,\n      className: selectedEntity === machineId ? \"is-selected\" : \"\",\n    };\n  });\n}\n\nexport function generateRelationRows(relationData, applications) {\n  if (!relationData) {\n    return [];\n  }\n  return Object.keys(relationData).map((relationId) => {\n    const relation = relationData[relationId];\n    const {\n      provider,\n      requirer,\n      peer,\n      providerApplicationName,\n      requirerApplicationName,\n      peerApplicationName,\n    } = extractRelationEndpoints(relation);\n    const providerLabel = provider || peer || \"-\";\n    const requirerLabel = requirer || \"-\";\n    return {\n      columns: [\n        {\n          content: (\n            <>\n              {generateRelationIconImage(\n                providerApplicationName || peerApplicationName,\n                applications\n              )}\n              {providerLabel}\n            </>\n          ),\n          className: \"u-truncate\",\n        },\n        {\n          content: (\n            <>\n              {generateRelationIconImage(requirerApplicationName, applications)}\n              {requirerLabel}\n            </>\n          ),\n          title: requirerLabel,\n          className: \"u-truncate\",\n        },\n        { content: relation.endpoints[0].relation.interface },\n        { content: relation.endpoints[0].relation.role },\n      ],\n      sortData: {\n        provider: providerLabel,\n        requirer: requirerLabel,\n        interface: relation.interface,\n        type: relation?.endpoints[0]?.relation.role,\n      },\n    };\n  });\n}\n\nexport function generateOffersRows(modelStatusData) {\n  if (!modelStatusData) {\n    return [];\n  }\n\n  const offers = modelStatusData.offers;\n  return Object.keys(offers).map((offerId) => {\n    const offer = offers[offerId];\n    return {\n      columns: [\n        {\n          content: (\n            <>\n              {generateRelationIconImage(\n                offer.applicationName,\n                modelStatusData\n              )}\n              {offer.applicationName}\n            </>\n          ),\n          className: \"u-truncate\",\n        },\n        {\n          content: Object.entries(offer.endpoints)\n            .map((endpoint) => `${endpoint[1].name}:${endpoint[1].interface}`)\n            .join(\"/n\"),\n          className: \"u-truncate\",\n        },\n        {\n          content: offer.activeConnectedCount,\n        },\n      ],\n    };\n  });\n}\n\nexport function generateAppOffersRows(modelStatusData, tableRowClick, query) {\n  if (!modelStatusData) {\n    return [];\n  }\n\n  const offers = modelStatusData.offers;\n\n  return Object.keys(offers).map((offerId) => {\n    const offer = offers[offerId];\n\n    const interfaces = Object.keys(offer?.[\"endpoints\"]).map(\n      (endpointInterface) => endpointInterface\n    );\n\n    return {\n      columns: [\n        {\n          content: (\n            <>\n              {generateRelationIconImage(offer, modelStatusData)}\n              {offer[\"offer-name\"]}\n            </>\n          ),\n          className: \"u-truncate\",\n        },\n        {\n          content: <>{interfaces.join(\",\")}</>,\n        },\n        {\n          content: (\n            <>\n              {offer[\"active-connected-count\"]} /{\" \"}\n              {offer[\"total-connected-count\"]}\n            </>\n          ),\n        },\n        {\n          content: \"-\", // offer url is not yet available from the API\n        },\n      ],\n      onClick: (e) => false && tableRowClick(offerId, \"offers\", e), // DISABLED PANEL\n      \"data-app\": offerId,\n      className:\n        query.panel === \"offers\" && query.entity === offerId\n          ? \"is-selected\"\n          : \"\",\n    };\n  });\n}\n\nexport function generateConsumedRows(modelStatusData) {\n  if (!modelStatusData) {\n    return [];\n  }\n\n  const remoteApplications = modelStatusData[\"remote-applications\"] || {};\n  return Object.keys(remoteApplications).map((appName) => {\n    const application = remoteApplications[appName];\n    return {\n      columns: [\n        {\n          content: (\n            <>\n              {generateRelationIconImage(\n                application.offerName,\n                modelStatusData\n              )}\n              {application.offerName}\n            </>\n          ),\n          className: \"u-truncate\",\n        },\n        {\n          content: Object.entries(application.endpoints)\n            .map((endpoint) => `${endpoint[1].name}:${endpoint[1].interface}`)\n            .join(\"/n\"),\n          className: \"u-truncate\",\n        },\n        {\n          content: application.status.status,\n        },\n      ],\n    };\n  });\n}\n","import { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport cloneDeep from \"clone-deep\";\n\nimport { generateIconPath } from \"app/utils/utils\";\n\n/**\n  Returns whether the application is a subordinate.\n  @param {Object} app The application status object.\n  @returns {Boolean} If the application is a subordinate.\n*/\nconst isSubordinate = (app) => app?.subordinateTo?.length > 0;\n\n/**\n  Computes the maximum delta from 0 for both the x and y axis. This is necessary\n  because there are no restrictions on placing applications in a bundle at\n  negative indexes.\n  @param {Object} annotations The annotations object from the model status.\n  @returns {Object} The deltas for x and y in the keys { deltaX, deltaY }.\n*/\nconst computePositionDelta = (annotations) => {\n  let deltaX = null;\n  let deltaY = null;\n\n  if (!annotations) {\n    return { deltaX, deltaY };\n  }\n\n  Object.keys(annotations).forEach((appName) => {\n    const { \"gui-x\": guiX, \"gui-y\": guiY } = annotations[appName];\n    const x = parseFloat(guiX);\n    const y = parseFloat(guiY);\n    if (!isNaN(x) && (deltaX === null || x < deltaX)) {\n      deltaX = x;\n    }\n    if (!isNaN(y) && (deltaY === null || y < deltaY)) {\n      deltaY = y;\n    }\n  });\n\n  return { deltaX, deltaY };\n};\n\n/**\n  Retrieve the X and Y annotation with the highest value.\n  @param {Object} annotations The annotations object from the model status.\n  @returns {Object} The value of the annotation with the highest X and Y value.\n*/\nconst computeMaxXY = (annotations) => {\n  let maxY = 0;\n  let maxX = 0;\n  if (!annotations) {\n    return { maxX, maxY };\n  }\n\n  Object.keys(annotations).forEach((appName) => {\n    const { \"gui-x\": guiX, \"gui-y\": guiY } = annotations[appName];\n    const y = parseFloat(guiY);\n    const x = parseFloat(guiX);\n    if (!isNaN(x) && x > maxX) {\n      maxX = x;\n    }\n    if (!isNaN(y) && y > maxY) {\n      maxY = y;\n    }\n  });\n\n  return { maxX, maxY };\n};\n\n/**\n  Applies the supplied delta to the supplied position. Both inputs are parsed\n  as floats.\n  @param {Number} position\n  @param {Number} delta\n  @returns {Float} The position value with the delta applied.\n*/\nconst applyDelta = (position, delta) =>\n  parseFloat(position) + -parseFloat(delta);\n\n/**\n  Generates the relation positions for the two endpoints based on the\n  application name data passed in.\n  @param {*} data The relation data.\n  @returns {Object} x and y coordinates for the two relation endpoints.\n*/\nconst getRelationPosition = (data) => {\n  // Gets the values from the elements translate attribute.\n  // translate(123.456, 789.012)\n  const translateValues = /(\\d*\\.?\\d*),\\s(\\d*\\.?\\d*)/;\n  const getElement = (index) => d3.select(`[data-name=\"${data[index]}\"]`);\n  const getRect = (element) =>\n    translateValues.exec(element.node().getAttribute(\"transform\"));\n  const getData = (element) => element.data()[0];\n\n  const element1 = getElement(0);\n  const element2 = getElement(1);\n  const app1 = getRect(element1);\n  const app2 = getRect(element2);\n\n  return {\n    x1: applyDelta(app1[1], isSubordinate(getData(element1)) ? -60 : -90),\n    y1: applyDelta(app1[2], isSubordinate(getData(element1)) ? -60 : -90),\n    x2: applyDelta(app2[1], isSubordinate(getData(element2)) ? -60 : -90),\n    y2: applyDelta(app2[2], isSubordinate(getData(element2)) ? -60 : -90),\n  };\n};\n\nconst Topology = ({\n  annotations,\n  applications: applicationData,\n  relations: relationData,\n  width,\n  height,\n}) => {\n  const ref = useRef();\n\n  const annotationData = cloneDeep(annotations);\n\n  const { deltaX, deltaY } = computePositionDelta(annotationData);\n\n  const applications = Object.entries(applicationData).map(\n    ([appName, application]) => {\n      return {\n        ...application,\n        ...annotationData[appName],\n        name: appName,\n      };\n    }\n  );\n\n  // Apply deltas to the annotations.\n  for (const appName in annotationData) {\n    const annotation = annotationData[appName];\n    if (annotation[\"gui-x\"]) {\n      annotation[\"gui-x\"] = applyDelta(annotation[\"gui-x\"], deltaX);\n    }\n    if (annotation[\"gui-y\"]) {\n      annotation[\"gui-y\"] = applyDelta(annotation[\"gui-y\"], deltaY);\n    }\n  }\n\n  let { maxX, maxY } = computeMaxXY(annotationData);\n  if (maxX === 0) {\n    // If there is no maxX then all of the icons are unplaced\n    // so set a maximum width.\n    maxX = 500;\n  }\n\n  // Dedupe the relations as we only draw a single line between two\n  // applications regardless of how many relations are between them.\n  const extractor = /(.+):(.+)\\s(.+):(.+)/;\n  const endpoints = Object.entries(relationData || {}).reduce(\n    (acc, [key, relation]) => {\n      // We don't draw peer relations so we can ignore them.\n      if (relation.endpoints.length > 1) {\n        const parts = key.match(extractor);\n        acc.push(`${parts[1]}:${parts[3]}`);\n      }\n      return acc;\n    },\n    []\n  );\n\n  // Remove any duplicate endpoints and split into pairs.\n  const deDupedRelations = [...new Set(endpoints)].map((pair) =>\n    pair.split(\":\")\n  );\n  // Remove relations that do not have all applications in the map.\n  // The missing application is likely a cross-model-relation which isn't\n  // fully supported yet.\n  // https://github.com/canonical-web-and-design/jaas-dashboard/issues/526\n  const applicationNames = Object.keys(applicationData);\n\n  const relations = deDupedRelations.filter(\n    (relation) =>\n      applicationNames.includes(relation[0]) &&\n      applicationNames.includes(relation[1])\n  );\n\n  useEffect(() => {\n    const topo = d3\n      .select(ref.current)\n      .attr(\"viewBox\", `0 0 ${width} ${height}`)\n      .append(\"g\");\n\n    const appIcons = topo.selectAll(\".application\").data(applications);\n\n    let gridCount = {\n      x: 0,\n      y: maxY,\n    };\n\n    const appIcon = appIcons\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\", (d) => {\n        const x = d[\"gui-x\"] !== undefined ? d[\"gui-x\"] : gridCount.x;\n        const y = d[\"gui-y\"] !== undefined ? d[\"gui-y\"] : gridCount.y;\n        gridCount.x += 250;\n        // Let the placed units determine the max width of the visualization.\n        // and move the grid units to a new line.\n        if (gridCount.x > maxX) {\n          gridCount.x = 0;\n          gridCount.y += 200;\n        }\n        return `translate(${x}, ${y})`;\n      });\n\n    appIcon\n      .classed(\"application\", true)\n      .attr(\"data-name\", (d) => d.name)\n      .append(\"circle\")\n      .attr(\"cx\", (d) => (isSubordinate(d) ? 60 : 90))\n      .attr(\"cy\", (d) => (isSubordinate(d) ? 60 : 90))\n      .attr(\"r\", (d) => (isSubordinate(d) ? 60 : 90))\n      .attr(\"fill\", \"#f5f5f5\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"stroke\", \"#888888\")\n      .call((_) => {\n        // When ever a new element is added zoom the canvas to fit.\n        const { width: svgWidth, height: svgHeight } = topo\n          .node()\n          .getBoundingClientRect();\n        if (svgWidth > 0 && svgHeight > 0) {\n          // Magic number that presents reasonable padding around the viz.\n          const padding = 200;\n          const scale = Math.min(\n            width / (svgWidth + padding),\n            height / (svgHeight + padding)\n          );\n          const translateX = (width - svgWidth * scale) / 2;\n          const translateY = (height - svgHeight * scale) / 2;\n          topo.attr(\n            \"transform\",\n            `translate(${translateX},${translateY}) scale(${scale},${scale})`\n          );\n        }\n      });\n\n    appIcon\n      .append(\"image\")\n      .attr(\"xlink:href\", (d) => generateIconPath(d[\"charm-url\"]))\n      .attr(\"width\", (d) => (isSubordinate(d) ? 96 : 126))\n      .attr(\"height\", (d) => (isSubordinate(d) ? 96 : 126))\n      .attr(\"transform\", (d) =>\n        isSubordinate(d) ? \"translate(13, 13)\" : \"translate(28, 28)\"\n      )\n      .attr(\"clip-path\", (d) =>\n        isSubordinate(d)\n          ? \"circle(43px at 48px 48px)\"\n          : \"circle(55px at 63px 63px)\"\n      );\n\n    const relationLines = topo.selectAll(\".relation\").data(relations);\n    const relationLine = relationLines.enter().insert(\"g\", \":first-child\");\n\n    relationLine\n      .classed(\"relation\", true)\n      .append(\"line\")\n      .attr(\"x1\", (d) => getRelationPosition(d).x1)\n      .attr(\"y1\", (d) => getRelationPosition(d).y1)\n      .attr(\"x2\", (d) => getRelationPosition(d).x2)\n      .attr(\"y2\", (d) => getRelationPosition(d).y2)\n      .attr(\"stroke\", \"#666666\")\n      .attr(\"stroke-width\", 2);\n\n    appIcons.exit().remove();\n    relationLines.exit().remove();\n\n    return () => {\n      topo.remove();\n    };\n  }, [applications, deltaX, deltaY, height, width, maxX, maxY, relations]);\n  return <svg ref={ref} />;\n};\n\nexport default Topology;\n","import { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport Topology from \"components/Topology/Topology\";\nimport Modal from \"@canonical/react-components/dist/components/Modal\";\n\nimport { getViewportWidth } from \"app/utils/utils\";\nimport useAnalytics from \"hooks/useAnalytics\";\nimport useEventListener from \"hooks/useEventListener\";\nimport {\n  getModelAnnotations,\n  getModelApplications,\n  getModelRelations,\n  getModelUUID,\n} from \"juju/model-selectors\";\n\nimport type { EntityDetailsRoute } from \"components/Routes/Routes\";\n\nimport \"./_info-panel.scss\";\n\nconst expandedTopologyDimensions = () => {\n  const de = document.documentElement;\n  const vw = Math.max(de.clientWidth, window.innerWidth || 0);\n  const vh = Math.max(de.clientHeight, window.innerHeight || 0);\n  const delta = 300;\n  return {\n    width: vw - delta,\n    height: vh - delta,\n  };\n};\n\nconst infoPanelDimensions = () => {\n  const vw = getViewportWidth();\n  // If changes are made to the 1580px breakpoint below then be sure to update\n  // the same breakpoint in _info-panel.scss.\n  const size = vw >= 1580 ? 300 : 180;\n  return size;\n};\n\nconst InfoPanel = () => {\n  const { modelName, userName } = useParams<EntityDetailsRoute>();\n\n  const [showExpandedTopology, setShowExpandedTopology] = useState(false);\n\n  const modelUUID = useSelector(getModelUUID(modelName, userName));\n  const annotations = useSelector(getModelAnnotations(modelUUID));\n  const applications = useSelector(getModelApplications(modelUUID));\n  const relations = useSelector(getModelRelations(modelUUID));\n\n  const applicationsCount = Object.keys(applications || {}).length;\n\n  const { width, height } = expandedTopologyDimensions();\n  const topologySize = infoPanelDimensions();\n\n  const sendAnalytics = useAnalytics();\n\n  // Close topology, if open, on Escape key press\n  const closeOnEscape = function (e: KeyboardEvent) {\n    if (e.code === \"Escape\" && showExpandedTopology) {\n      setShowExpandedTopology(false);\n    }\n  };\n  useEventListener(\"keydown\", closeOnEscape);\n\n  const handleExpandTopology = () => {\n    setShowExpandedTopology(!showExpandedTopology);\n    sendAnalytics({\n      path: undefined,\n      category: \"User\",\n      action: \"Opened expanded topology\",\n    });\n  };\n\n  return (\n    <div className=\"info-panel\" data-testid=\"info-panel\">\n      {showExpandedTopology ? (\n        <Modal\n          close={() => setShowExpandedTopology(false)}\n          title={modelName?.split(\"/\")[1] || modelName}\n        >\n          <Topology\n            width={width}\n            height={height}\n            annotations={annotations}\n            applications={applications}\n            relations={relations}\n          />\n        </Modal>\n      ) : (\n        <>\n          {applicationsCount > 0 && (\n            <div className=\"info-panel__pictogram\">\n              <Topology\n                width={topologySize}\n                height={topologySize}\n                annotations={annotations}\n                applications={applications}\n                relations={relations}\n              />\n              {modelName !== undefined && (\n                <i\n                  className=\"p-icon--fullscreen\"\n                  onClick={handleExpandTopology}\n                  onKeyPress={handleExpandTopology}\n                  role=\"button\"\n                  tabIndex={0}\n                >\n                  Expand topology\n                </i>\n              )}\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default InfoPanel;\n","import { ReactNode, useState } from \"react\";\n\nimport \"./_content-reveal.scss\";\n\ntype Props = {\n  title: string | ReactNode;\n  children: JSX.Element;\n  openByDefault: ReactNode;\n};\n\nexport default function ContentReveal({\n  title,\n  openByDefault,\n  children,\n}: Props) {\n  const [isOpen, setIsOpen] = useState(openByDefault);\n\n  function handleToggle() {\n    setIsOpen(!isOpen);\n  }\n\n  const iconName = isOpen ? \"minus\" : \"plus\";\n\n  return (\n    <div className=\"content-reveal\" data-open={isOpen}>\n      <div\n        className=\"content-reveal__header\"\n        onClick={() => handleToggle()}\n        onKeyDown={() => handleToggle()}\n        role=\"button\"\n        tabIndex={0}\n      >\n        <i className={`p-icon--${iconName}`}></i>\n        <div className=\"content-reveal__title\">{title}</div>\n      </div>\n      <div className=\"content-reveal__content\" aria-hidden={!isOpen}>\n        {children}\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useMemo, useRef, useState } from \"react\";\n\n// Colors taken from the VSCode section of\n// https://en.wikipedia.org/wiki/ANSI_escape_code#3/4_bit\nconst ansiColors = {\n  0: null, // reset\n  30: \"0,0,0\", // Black\n  31: \"205,49,49\", // Red\n  32: \"13,188,121\", // Green\n  33: \"229,229,16\", // Yellow\n  34: \"26,114,200\", //  Blue\n  35: \"188,63,188\", // Magenta\n  36: \"17,168,205\", // Cyan\n  37: \"229,229,229\", // White\n  90: \"102,102,102\", // Bright Black (Gray)\n  91: \"241,76,76\", // Bright Red\n  92: \"35,209,139\", // Bright Green\n  93: \"245,245,67\", // Bright Yellow\n  94: \"59,142,234\", // Bright Blue\n  95: \"214,112,214\", // Bright Magenta\n  96: \"41,184,219\", // Bright Cyan\n  97: \"229,229,229\", // Bright White\n};\n\nconst findANSICode = /\\[\\d{1,3}m/g;\n\nconst getStyle = (ansiCode) => {\n  const fgColor = ansiColors[ansiCode];\n  if (fgColor) {\n    return `color: rgb(${fgColor})`;\n  }\n  // We may have been provided a background color.\n  const bgColor = ansiColors[ansiCode - 10];\n  if (bgColor) {\n    return `color: rgb(${bgColor})`;\n  }\n};\n\nconst colorize = (content) => {\n  const colors = Array.from(content.matchAll(findANSICode));\n  if (colors.length === 0) {\n    return content;\n  }\n\n  let colorizedContent = \"\";\n  let previousIndex = 0;\n  colors.forEach((color, index) => {\n    const ansiCode = color[0];\n    const ansiCodeNumber = ansiCode.replace(\"[\", \"\").replace(\"m\", \"\");\n\n    if (color.index !== 0 && previousIndex === 0) {\n      // Add the content up until the first colour without wrapping it.\n      colorizedContent =\n        colorizedContent + content.substring(previousIndex, color.index);\n      previousIndex = color.index;\n    }\n    const endIndex = colors[index + 1]?.index || content.length;\n    let part = content.substring(color.index, endIndex).replace(ansiCode, \"\");\n    const style = getStyle(ansiCodeNumber);\n    if (style) {\n      part = `<span style=\"${style}\">${part}</span>`;\n    }\n    colorizedContent = colorizedContent + part;\n    previousIndex = color.index;\n  });\n  return colorizedContent;\n};\n\nconst DEFAULT_HEIGHT = 300;\n// 20 is a magic number, sometimes the browser stops firing the drag at\n// an inoportune time and the element isn't left completely closed.\nconst CONSIDER_CLOSED = 20;\nconst HELP_HEIGHT = 50;\n\nconst WebCLIOutput = ({\n  content,\n  helpMessage,\n  showHelp,\n  setShouldShowHelp,\n}) => {\n  const resizeDeltaY = useRef(0);\n  const [height, setHeight] = useState(1);\n\n  useEffect(() => {\n    const resize = (e) => {\n      const viewPortHeight = window.innerHeight;\n      const mousePosition = e.clientY + 40; // magic number\n      const newHeight = viewPortHeight - mousePosition + resizeDeltaY.current;\n\n      const maximumOutputHeight = viewPortHeight - 100; // magic number.\n      if (newHeight < maximumOutputHeight && newHeight >= 10) {\n        setHeight(newHeight);\n      }\n    };\n\n    const addResizeListener = (e) => {\n      const dragHandles = [\"webcli__output-dragarea\", \"webcli__output-handle\"];\n      if (!dragHandles.includes(e.target.classList.value)) {\n        return;\n      }\n      resizeDeltaY.current = e.layerY;\n      document.addEventListener(\"mousemove\", resize);\n      document.addEventListener(\"ontouchmove\", resize);\n    };\n\n    const removeResizeListener = () => {\n      document.removeEventListener(\"mousemove\", resize);\n      document.removeEventListener(\"ontouchmove\", resize);\n    };\n\n    window.addEventListener(\"mousedown\", addResizeListener);\n    window.addEventListener(\"mouseup\", removeResizeListener);\n    window.addEventListener(\"ontouchstart\", addResizeListener);\n    window.addEventListener(\"ontouchend\", removeResizeListener);\n    return () => {\n      window.removeEventListener(\"mousedown\", addResizeListener);\n      window.removeEventListener(\"mouseup\", removeResizeListener);\n      window.removeEventListener(\"ontouchstart\", addResizeListener);\n      window.removeEventListener(\"ontouchend\", removeResizeListener);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (showHelp) {\n      setHeight(HELP_HEIGHT);\n    }\n  }, [showHelp]);\n\n  useEffect(() => {\n    if (height < CONSIDER_CLOSED) {\n      setShouldShowHelp(false);\n    }\n  }, [height, setShouldShowHelp]);\n\n  useEffect(() => {\n    // New content is coming in, so check if we're collapsed and if we\n    // are then open it back up.\n    if (\n      content.length > 1 &&\n      height <= HELP_HEIGHT &&\n      height !== DEFAULT_HEIGHT\n    ) {\n      setHeight(DEFAULT_HEIGHT);\n    }\n    // We can't have height as a dependency because we don't want this to run\n    // when the height changes, only when the content comes in.\n    /* eslint-disable-next-line react-hooks/exhaustive-deps */\n  }, [content]);\n\n  // Strip any color escape codes from the content.\n  content = content.replace(/\\\\u001b/gi, \"\");\n  const colorizedContent = useMemo(() => {\n    if (showHelp) {\n      return helpMessage;\n    }\n    return colorize(content);\n  }, [content, showHelp, helpMessage]);\n\n  return (\n    <div className=\"webcli__output\" style={{ height: `${height}px` }}>\n      <div className=\"webcli__output-dragarea\" aria-hidden={true}>\n        <div className=\"webcli__output-handle\"></div>\n      </div>\n      <pre className=\"webcli__output-content\" style={{ height: `${height}px` }}>\n        <code dangerouslySetInnerHTML={{ __html: colorizedContent }}></code>\n      </pre>\n    </div>\n  );\n};\n\nexport default WebCLIOutput;\n","class Connection {\n  constructor(options) {\n    this._messageCallback = options.messageCallback;\n    this.address = options.address;\n    this.wsOnOpen = options.onopen;\n    this.wsOnClose = options.onclose;\n  }\n\n  _messageBuffer = \"\";\n\n  connect() {\n    const ws = new WebSocket(this.address);\n    ws.onopen = this._wsOnOpen;\n    ws.onclose = this._wsOnClose;\n    ws.onmessage = this._handleMessage.bind(this);\n    this._ws = ws;\n    return this;\n  }\n\n  send(message) {\n    this._ws.send(message);\n  }\n\n  disconnect() {\n    this._ws.close();\n  }\n\n  _handleMessage(e) {\n    try {\n      const data = JSON.parse(e.data);\n      if (data[\"redirect-to\"]) {\n        // This is a JAAS controller and we need to instead\n        // connect to the sub controller.\n        this._ws.close();\n        this.address = data[\"redirect-to\"];\n        this.connect();\n      }\n\n      if (data.done) {\n        // This is the last message.\n        return;\n      }\n      if (!data.output) {\n        // This is the first message, an empty object and a newline.\n        return;\n      }\n      this._pushToMessageBuffer(`\\n${data?.output[0]}`);\n    } catch (e) {\n      console.log(e);\n      // XXX handle the invalid data response\n    }\n  }\n\n  _pushToMessageBuffer(message) {\n    this._messageBuffer = this._messageBuffer + message;\n    setTimeout(() => {\n      /*\n        The messageBuffer is required because the websocket returns messages\n        much faster than React wants to update the component. Doing this allows\n        us to store the messages in a buffer and then set the output every\n        cycle.\n      */\n      this._messageCallback(this._messageBuffer);\n      this._messageBuffer = \"\";\n    });\n  }\n}\n\nexport default Connection;\n","import { useEffect, useMemo, useRef, useState } from \"react\";\nimport { useSelector, useStore } from \"react-redux\";\n\nimport { getActiveUserTag, getBakery } from \"app/selectors\";\n\nimport useAnalytics from \"../../hooks/useAnalytics\";\n\nimport WebCLIOutput from \"./Output.js\";\n\nimport Connection from \"./connection\";\n\nimport \"./_webcli.scss\";\n\nconst WebCLI = ({\n  controllerWSHost,\n  credentials,\n  modelUUID,\n  protocol = \"wss\",\n}) => {\n  const [connection, setConnection] = useState(null);\n  const [shouldShowHelp, setShouldShowHelp] = useState(false);\n  const inputRef = useRef();\n  const wsMessageStore = useRef();\n  let [output, setOutput] = useState(\"\");\n  const sendAnalytics = useAnalytics();\n  const bakery = useSelector(getBakery);\n  const storeState = useStore().getState();\n\n  const clearMessageBuffer = () => {\n    wsMessageStore.current = \"\";\n    setOutput(\"\"); // Clear the output when sending a new message.\n  };\n\n  const wsAddress = useMemo(() => {\n    if (!controllerWSHost || !modelUUID) {\n      return null;\n    }\n    return `${protocol}://${controllerWSHost}/model/${modelUUID}/commands`;\n  }, [controllerWSHost, modelUUID, protocol]);\n\n  useEffect(() => {\n    if (!wsAddress) {\n      console.error(\"no websocket address provided\");\n      return;\n    }\n    const conn = new Connection({\n      address: wsAddress,\n      onopen: () => {},\n      onclose: () => {},\n      messageCallback: (message) => {\n        wsMessageStore.current = wsMessageStore.current + message;\n        setOutput(wsMessageStore.current);\n      },\n    }).connect();\n    setConnection(conn);\n    return () => {\n      conn.disconnect();\n    };\n  }, [wsAddress]);\n\n  const handleCommandSubmit = (e) => {\n    e.preventDefault();\n    clearMessageBuffer();\n    setShouldShowHelp(false);\n    // We need to get the most up to date connection information in the event\n    // that the original connection was redirected. This typically happens in\n    // a JAAS style environment.\n    let authentication = {};\n    if (credentials && credentials.user && credentials.password) {\n      authentication.user = credentials.user;\n      authentication.credentials = credentials.password;\n    } else {\n      // A user name and password were not provided so try and get a macaroon.\n      // The macaroon should be already stored as we've already connected to\n      // the model for the model status.\n      const origin = new URL(connection.address).origin;\n      const macaroons = bakery.storage.get(origin);\n      if (macaroons) {\n        const deserialized = JSON.parse(atob(macaroons));\n        const originalWSOrigin = new URL(wsAddress).origin;\n        const activeUser = getActiveUserTag(\n          `${originalWSOrigin}/api`,\n          storeState\n        );\n        authentication.user = activeUser?.replace(\"user-\", \"\");\n        authentication.macaroons = [deserialized];\n      } else {\n        // XXX Surface error to the user.\n        console.error(\"No authentication information available\");\n      }\n    }\n\n    connection.send(\n      JSON.stringify({\n        ...authentication,\n        commands: [e.currentTarget.children.command.value.trim()],\n      })\n    );\n    sendAnalytics({\n      category: \"User\",\n      action: \"WebCLI command sent\",\n    });\n    inputRef.current.value = \"\"; // Clear the input after sending the message.\n  };\n\n  const showHelp = () => {\n    setShouldShowHelp(true);\n  };\n\n  // If we do not have an address then do not try and render the UI.\n  if (!wsAddress) {\n    return null;\n  }\n\n  return (\n    <div className=\"webcli\">\n      <WebCLIOutput\n        content={output}\n        showHelp={shouldShowHelp}\n        setShouldShowHelp={setShouldShowHelp}\n        helpMessage={`Welcome to the Juju Web CLI - see the <a href=\"https://juju.is/docs/olm/using-the-juju-web-cli\" class=\"p-link--inverted\" target=\"_blank\">full documentation here</a>.`}\n      />\n      <div className=\"webcli__input\">\n        <div className=\"webcli__input-prompt\">$ juju</div>\n        <form onSubmit={handleCommandSubmit}>\n          <input\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            autoCapitalize=\"none\"\n            spellCheck=\"false\"\n            className=\"webcli__input-input\"\n            type=\"text\"\n            name=\"command\"\n            ref={inputRef}\n            placeholder=\"enter command\"\n          />\n        </form>\n        <div className=\"webcli__input-help\">\n          <i\n            className=\"p-icon--help is-light\"\n            onClick={showHelp}\n            onKeyDown={showHelp}\n            role=\"button\"\n            tabIndex=\"0\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WebCLI;\n","import classnames from \"classnames\";\nimport Spinner from \"@canonical/react-components/dist/components/Spinner\";\n\nimport useEventListener from \"hooks/useEventListener\";\n\nimport \"./_slide-panel.scss\";\n\nfunction SlidePanel({\n  children,\n  onClose,\n  isActive,\n  isLoading = false,\n  className,\n}) {\n  // Close panel if Escape key is pressed when panel active\n  const closeOnEscape = (e) => {\n    if (isActive && e.code === \"Escape\") {\n      onClose();\n    }\n  };\n  useEventListener(\"keydown\", closeOnEscape);\n\n  // Close panel if click is detected outside when panel is active\n  const closeOnClickOutside = (e) => {\n    if (\n      isActive &&\n      !e.target.closest(\".p-modal\") &&\n      !e.target.closest(\".slide-panel\") &&\n      !e.target.closest('[role=\"row\"]') &&\n      !e.target.closest(\".webcli\")\n    ) {\n      onClose();\n    }\n  };\n  useEventListener(\"click\", closeOnClickOutside);\n\n  return (\n    <div\n      className={classnames(\"slide-panel\", className)}\n      aria-hidden={!isActive}\n    >\n      <button\n        className=\"p-modal__close\"\n        aria-label=\"Close active modal\"\n        aria-controls=\"modal\"\n        onClick={onClose}\n        onKeyPress={onClose}\n      >\n        Close\n      </button>\n      <div className=\"slide-panel__content\" data-loading={isLoading}>\n        {isLoading ? <Spinner /> : children}\n      </div>\n    </div>\n  );\n}\n\nexport default SlidePanel;\n","import { Link, useParams } from \"react-router-dom\";\n\nimport type { EntityDetailsRoute } from \"components/Routes/Routes\";\n\nimport \"./_breadcrumbs.scss\";\n\nexport default function Breadcrumb(): JSX.Element {\n  const { userName, modelName, appName, unitId, machineId } =\n    useParams<EntityDetailsRoute>();\n\n  const generateBreadcrumbs = function (): JSX.Element {\n    const view = machineId ? \"machines\" : \"apps\";\n    const isNestedEntityPage = !!appName || !!unitId || !!machineId;\n    if (isNestedEntityPage) {\n      return (\n        <>\n          <li\n            className=\"p-breadcrumbs__item u-no-padding--top\"\n            data-test=\"breadcrumb-model\"\n          >\n            <Link to={`/models/${userName}/${modelName}`}>{modelName}</Link>\n          </li>\n          {!unitId && (\n            <li\n              className=\"p-breadcrumbs__item u-no-padding--top\"\n              data-test=\"breadcrumb-section\"\n            >\n              <Link to={`/models/${userName}/${modelName}?activeView=${view}`}>\n                {entityType.title}\n              </Link>\n            </li>\n          )}\n          {unitId && (\n            <>\n              <li\n                className=\"p-breadcrumbs__item u-no-padding--top\"\n                data-test=\"breadcrumb-section\"\n              >\n                <Link to={`/models/${userName}/${modelName}?activeView=apps`}>\n                  Applications\n                </Link>\n              </li>\n              <li\n                className=\"p-breadcrumbs__item u-no-padding--top\"\n                data-test=\"breadcrumb-app\"\n              >\n                <Link to={`/models/${userName}/${modelName}/app/${appName}`}>\n                  {appName}\n                </Link>\n              </li>\n            </>\n          )}\n          <li\n            className=\"p-breadcrumbs__item u-no-padding--top\"\n            data-test={`breadcrumb-${entityType.title?.toLowerCase()}`}\n          >\n            <strong>{entityType.id}</strong>\n          </li>\n        </>\n      );\n    }\n    return (\n      <li\n        className=\"p-breadcrumbs__item p-breadcrumbs__item--restricted\"\n        data-test=\"breadcrumb-model\"\n        title={modelName}\n      >\n        <Link to={`/models/${userName}/${modelName}`} className=\"p-link--soft\">\n          <strong>{modelName}</strong>\n        </Link>\n      </li>\n    );\n  };\n\n  type EntityType = {\n    id: string | undefined;\n    title: string | undefined;\n  };\n\n  const entityType: EntityType = {\n    id: undefined,\n    title: undefined,\n  };\n\n  if (!!appName) {\n    entityType.id = appName;\n    entityType.title = \"Applications\";\n  }\n\n  if (!!unitId) {\n    entityType.id = unitId;\n    entityType.title = \"Units\";\n  }\n\n  if (!!machineId) {\n    entityType.id = machineId;\n    entityType.title = \"Machines\";\n  }\n\n  return (\n    <nav className=\"p-breadcrumbs\" aria-label=\"Breadcrumb navigation\">\n      <ol className=\"p-breadcrumbs__items\" data-test=\"breadcrumb-items\">\n        {generateBreadcrumbs()}\n      </ol>\n    </nav>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/bulb.31f25996.svg\";","export default __webpack_public_path__ + \"static/media/no-config-params.1840ee6f.svg\";","import { useEffect, useRef, useState } from \"react\";\nimport classnames from \"classnames\";\n\nimport { isSet } from \"app/utils/utils\";\n\nimport type { ConfigProps } from \"./ConfigPanel\";\n\nexport default function BooleanConfig({\n  config,\n  selectedConfig,\n  setSelectedConfig,\n  setNewValue,\n}: ConfigProps): JSX.Element {\n  const [inputFocused, setInputFocused] = useState(false);\n  const [inputChanged, setInputChanged] = useState(false);\n  const [showDescription, setShowDescription] = useState(false);\n  const [showUseDefault, setShowUseDefault] = useState(\n    config.value !== config.default\n  );\n  const trueRef = useRef<HTMLInputElement>(null);\n  const falseRef = useRef<HTMLInputElement>(null);\n  const descriptionRef = useRef<HTMLDivElement>(null);\n  const [maxDescriptionHeight, setMaxDescriptionHeight] = useState(\"0px\");\n\n  let inputValue = config.default;\n  if (isSet(config.newValue)) {\n    inputValue = config.newValue;\n  } else if (config.default !== config.value) {\n    inputValue = config.value;\n  }\n\n  useEffect(() => {\n    if (descriptionRef.current?.firstChild) {\n      setMaxDescriptionHeight(\n        `${\n          (descriptionRef.current.firstChild as HTMLPreElement).clientHeight\n        }px`\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!descriptionRef.current) {\n      return;\n    }\n    if (showDescription) {\n      descriptionRef.current.style.maxHeight = maxDescriptionHeight;\n    } else {\n      descriptionRef.current.style.maxHeight = \"0px\";\n    }\n  }, [showDescription, maxDescriptionHeight]);\n\n  useEffect(() => {\n    if (selectedConfig?.name === config.name) {\n      setInputFocused(true);\n    } else {\n      setInputFocused(false);\n    }\n  }, [selectedConfig, config]);\n\n  useEffect(() => {\n    if (\n      (isSet(config.newValue) && config.newValue !== config.default) ||\n      (!isSet(config.newValue) && config.value !== config.default)\n    ) {\n      setShowUseDefault(true);\n    } else {\n      setShowUseDefault(false);\n    }\n\n    if (isSet(config.newValue) && config.newValue !== config.value) {\n      setInputChanged(true);\n    } else {\n      setInputChanged(false);\n    }\n  }, [config]);\n\n  function handleOptionChange(e: any) {\n    const bool = e.target.value === \"true\" ? true : false;\n    setNewValue(e.target.name, bool);\n  }\n\n  function resetToDefault() {\n    setNewValue(config.name, config.default);\n  }\n\n  return (\n    // XXX How to tell aria to ignore the click but not the element?\n    // eslint-disable-next-line\n    <div\n      className={classnames(\"config-input\", {\n        \"config-input--focused\": inputFocused,\n        \"config-input--changed\": inputChanged,\n      })}\n      onClick={() => setSelectedConfig(config)}\n    >\n      <h5 className=\"u-float-left\">\n        <i\n          className={classnames(\"config-input--view-description\", {\n            \"p-icon--plus\": !showDescription,\n            \"p-icon--minus\": showDescription,\n          })}\n          onClick={() => setShowDescription(!showDescription)}\n          onKeyPress={() => setShowDescription(!showDescription)}\n          role=\"button\"\n          tabIndex={0}\n        />\n        {config.name}\n      </h5>\n      <button\n        className={classnames(\n          \"u-float-right p-button--base config-panel__hide-button\",\n          {\n            \"config-panel__show-button\": showUseDefault,\n          }\n        )}\n        onClick={resetToDefault}\n      >\n        use default\n      </button>\n      <div\n        className={classnames(\"config-input--description\")}\n        ref={descriptionRef}\n      >\n        <pre className=\"config-input--description-container\">\n          {config.description}\n        </pre>\n      </div>\n      <div className=\"row\">\n        <label className=\".p-radio--inline col-2\">\n          <input\n            type=\"radio\"\n            className=\"p-radio__input\"\n            name={config.name}\n            aria-labelledby={config.name}\n            checked={inputValue === true}\n            value=\"true\"\n            onClick={handleOptionChange}\n            onChange={handleOptionChange}\n            ref={trueRef}\n          />\n          <span className=\"p-radio__label\">true</span>\n        </label>\n        <label className=\"p-radio--inline col-2\">\n          <input\n            type=\"radio\"\n            className=\"p-radio__input\"\n            name={config.name}\n            aria-labelledby={config.name}\n            checked={inputValue === false}\n            value=\"false\"\n            onClick={handleOptionChange}\n            onChange={handleOptionChange}\n            ref={falseRef}\n          />\n          <span className=\"p-radio__label\">false</span>\n        </label>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport classnames from \"classnames\";\n\nimport { isSet } from \"app/utils/utils\";\n\nimport type { ConfigProps } from \"./ConfigPanel\";\n\nexport default function TextAreaConfig({\n  config,\n  selectedConfig,\n  setSelectedConfig,\n  setNewValue,\n}: ConfigProps): JSX.Element {\n  const [inputFocused, setInputFocused] = useState(false);\n  const [inputChanged, setInputChanged] = useState(false);\n  const [showUseDefault, setShowUseDefault] = useState(\n    config.value !== config.default\n  );\n  const [showDescription, setShowDescription] = useState(false);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  const descriptionRef = useRef<HTMLDivElement>(null);\n  const [maxDescriptionHeight, setMaxDescriptionHeight] = useState(\"0px\");\n\n  let inputValue = config.default;\n  if (isSet(config.newValue)) {\n    inputValue = config.newValue;\n  } else if (config.default !== config.value) {\n    inputValue = config.value;\n  }\n\n  useEffect(() => {\n    if (descriptionRef.current?.firstChild) {\n      setMaxDescriptionHeight(\n        `${\n          (descriptionRef.current.firstChild as HTMLPreElement).clientHeight\n        }px`\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!descriptionRef.current) {\n      return;\n    }\n    if (showDescription) {\n      descriptionRef.current.style.maxHeight = maxDescriptionHeight;\n    } else {\n      descriptionRef.current.style.maxHeight = \"0px\";\n    }\n  }, [showDescription, maxDescriptionHeight]);\n\n  useEffect(() => {\n    setInputFocused(selectedConfig?.name === config.name);\n  }, [selectedConfig, config]);\n\n  useEffect(() => {\n    if (\n      (isSet(config.newValue) && config.newValue !== config.default) ||\n      (!isSet(config.newValue) && config.value !== config.default)\n    ) {\n      setShowUseDefault(true);\n    } else {\n      setShowUseDefault(false);\n    }\n\n    if (isSet(config.newValue) && config.newValue !== config.value) {\n      setInputChanged(true);\n    } else {\n      setInputChanged(false);\n    }\n  }, [config]);\n\n  function resetToDefault() {\n    setNewValue(config.name, config.default);\n  }\n\n  function handleShowDescription() {\n    setShowDescription(!showDescription);\n  }\n\n  return (\n    // XXX How to tell aria to ignore the click but not the element?\n    // eslint-disable-next-line\n    <div\n      className={classnames(\"config-input\", {\n        \"config-input--focused\": inputFocused,\n        \"config-input--changed\": inputChanged,\n      })}\n      data-config-name={config.name}\n      onClick={() => setSelectedConfig(config)}\n    >\n      <h5 className=\"u-float-left\">\n        <i\n          className={classnames(\"config-input--view-description\", {\n            \"p-icon--plus\": !showDescription,\n            \"p-icon--minus\": showDescription,\n          })}\n          onClick={handleShowDescription}\n          onKeyPress={handleShowDescription}\n          role=\"button\"\n          tabIndex={0}\n        />\n        {config.name}\n      </h5>\n      <button\n        className={classnames(\n          \"u-float-right p-button--base config-panel__hide-button\",\n          {\n            \"config-panel__show-button\": showUseDefault,\n          }\n        )}\n        onClick={resetToDefault}\n      >\n        use default\n      </button>\n      <div\n        className={classnames(\"config-input--description\")}\n        ref={descriptionRef}\n      >\n        <pre className=\"config-input--description-container\">\n          {config.description}\n        </pre>\n      </div>\n      <textarea\n        ref={inputRef}\n        value={inputValue}\n        onFocus={() => setSelectedConfig(config)}\n        onChange={(e) => {\n          setNewValue(config.name, e.target.value);\n        }}\n      ></textarea>\n    </div>\n  );\n}\n","import { ReactNode, useEffect, useState } from \"react\";\nimport { getApplicationConfig, setApplicationConfig } from \"juju\";\nimport { useStore } from \"react-redux\";\nimport type { Store } from \"redux\";\nimport classnames from \"classnames\";\nimport cloneDeep from \"clone-deep\";\n\nimport Spinner from \"@canonical/react-components/dist/components/Spinner\";\n\nimport { generateIconImg, isSet } from \"app/utils/utils\";\nimport FadeIn from \"animations/FadeIn\";\nimport ConfirmationModal from \"components/ConfirmationModal/ConfirmationModal\";\nimport SlidePanel from \"components/SlidePanel/SlidePanel\";\n\nimport useAnalytics from \"hooks/useAnalytics\";\nimport useEventListener from \"hooks/useEventListener\";\n\nimport bulbImage from \"static/images/bulb.svg\";\nimport boxImage from \"static/images/no-config-params.svg\";\n\nimport BooleanConfig from \"./BooleanConfig\";\nimport TextAreaConfig from \"./TextAreaConfig\";\n\nimport \"./_config-panel.scss\";\n\ntype Props = {\n  appName: string;\n  charm: string;\n  modelUUID: string;\n  onClose: () => void;\n};\n\ntype ConfigData = {\n  name: string;\n  default: any;\n  description: string;\n  source: \"default\" | \"user\";\n  type: \"string\" | \"int\" | \"float\" | \"boolean\";\n  value: any;\n  newValue: any;\n};\n\ntype Config = {\n  [key: string]: ConfigData;\n};\n\nexport type ConfigProps = {\n  config: ConfigData;\n  selectedConfig: ConfigData | undefined;\n  setSelectedConfig: Function;\n  setNewValue: SetNewValue;\n};\n\ntype SetNewValue = (name: string, value: any) => void;\n\ntype ConfirmTypes = \"apply\" | \"cancel\" | null;\n\nexport default function ConfigPanel({\n  appName,\n  charm,\n  modelUUID,\n  onClose,\n}: Props): JSX.Element {\n  const reduxStore = useStore();\n  const [config, setConfig] = useState<Config>({});\n  const [selectedConfig, setSelectedConfig] = useState<ConfigData | undefined>(\n    undefined\n  );\n  const [enableSave, setEnableSave] = useState<boolean>(false);\n  const [showResetAll, setShowResetAll] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [savingConfig, setSavingConfig] = useState<boolean>(false);\n  const [confirmType, setConfirmType] = useState<ConfirmTypes>(null);\n\n  const sendAnalytics = useAnalytics();\n\n  useEventListener(\"keydown\", (e: KeyboardEvent) => {\n    if (e.code === \"Escape\" && confirmType !== null) {\n      setConfirmType(null);\n    }\n  });\n\n  useEffect(() => {\n    setIsLoading(true);\n    getConfig(\n      modelUUID,\n      appName,\n      reduxStore,\n      setIsLoading,\n      setConfig,\n      checkAllDefaults\n    );\n  }, [appName, modelUUID, reduxStore]);\n\n  useEffect(() => {\n    sendAnalytics({\n      category: \"User\",\n      action: \"Config panel opened\",\n    });\n  }, [sendAnalytics]);\n\n  function setNewValue(name: string, value: any) {\n    const newConfig = cloneDeep(config);\n    newConfig[name].newValue = value;\n    if (newConfig[name].newValue === newConfig[name].value) {\n      delete newConfig[name].newValue;\n    }\n    setConfig(newConfig);\n    checkEnableSave(newConfig);\n    checkAllDefaults(newConfig);\n  }\n\n  function checkAllDefaults(config: Config) {\n    const shouldShow = Object.keys(config).some((key) => {\n      const cfg = config[key];\n      if (isSet(cfg.newValue)) {\n        if (cfg.newValue === cfg.default) {\n          return false;\n        } else if (cfg.newValue !== cfg.default) {\n          return true;\n        }\n      } else if (cfg.value !== cfg.default) {\n        return true;\n      }\n      return false;\n    });\n    setShowResetAll(shouldShow);\n  }\n\n  function allFieldsToDefault() {\n    const newConfig = cloneDeep(config);\n    Object.keys(newConfig).forEach((key) => {\n      const cfg = newConfig[key];\n      if (cfg.value !== cfg.default) {\n        cfg.newValue = cfg.default;\n      } else if (cfg.newValue !== cfg.default) {\n        cfg.newValue = cfg.default;\n      }\n    });\n    setConfig(newConfig);\n    checkAllDefaults(newConfig);\n    checkEnableSave(newConfig);\n  }\n\n  function checkEnableSave(newConfig: Config) {\n    const fieldChanged = hasChangedFields(newConfig);\n    setEnableSave(fieldChanged);\n  }\n\n  function hasChangedFields(newConfig: Config): boolean {\n    return Object.keys(newConfig).some(\n      (key) =>\n        isSet(newConfig[key].newValue) &&\n        newConfig[key].newValue !== newConfig[key].value\n    );\n  }\n\n  function handleSubmit() {\n    setConfirmType(\"apply\");\n  }\n\n  function handleCancel() {\n    if (hasChangedFields(config)) {\n      setConfirmType(\"cancel\");\n    } else {\n      onClose();\n    }\n  }\n\n  async function _submitToJuju() {\n    setSavingConfig(true);\n    const error = await setApplicationConfig(\n      modelUUID,\n      appName,\n      config,\n      reduxStore.getState()\n    );\n    // It returns an empty object if it's successful.\n    if (typeof error === \"string\") {\n      // XXX Surface this to the user.\n      console.error(\"error setting config\", error);\n    }\n    await getConfig(\n      modelUUID,\n      appName,\n      reduxStore,\n      setIsLoading,\n      setConfig,\n      checkAllDefaults\n    );\n    setSavingConfig(false);\n    setEnableSave(false);\n    setConfirmType(null);\n    sendAnalytics({\n      category: \"User\",\n      action: \"Config values updated\",\n    });\n  }\n\n  function generateConfirmationDialog(): JSX.Element | null {\n    if (confirmType) {\n      const changedConfigList = generateChangedKeyValues(config);\n\n      if (confirmType === \"apply\") {\n        return SaveConfirmation(\n          appName,\n          changedConfigList,\n          () => {\n            setConfirmType(null);\n            _submitToJuju();\n          },\n          () => setConfirmType(null)\n        );\n      }\n      if (confirmType === \"cancel\") {\n        return CancelConfirmation(\n          appName,\n          changedConfigList,\n          () => {\n            setConfirmType(null);\n            onClose();\n          },\n          () => setConfirmType(null)\n        );\n      }\n    }\n    return null;\n  }\n\n  function checkCanClose() {\n    if (hasChangedFields(config)) {\n      // They are trying to close the panel but the user has\n      // unchanged values so show the confirmation dialog.\n      setConfirmType(\"cancel\");\n      return false;\n    }\n    onClose();\n    return true;\n  }\n\n  return (\n    <SlidePanel\n      isActive={true}\n      onClose={checkCanClose}\n      isLoading={!appName}\n      className=\"config-panel\"\n    >\n      <div className=\"config-panel\">\n        {isLoading ? (\n          <div className=\"full-size u-vertically-center\">\n            <Spinner />\n          </div>\n        ) : !isLoading && (!config || Object.keys(config).length === 0) ? (\n          <FadeIn isActive={true}>\n            <div className=\"full-size u-align-center\">\n              <NoConfigMessage />\n            </div>\n          </FadeIn>\n        ) : (\n          <FadeIn isActive={true} className=\"config-content row\">\n            <>\n              <div className=\"config-panel__config-list col-6\">\n                <div className=\"config-panel__list-header\">\n                  <div className=\"entity-name\">\n                    {generateIconImg(appName, charm)} {appName}\n                  </div>\n                  <div className=\"config-panel__reset-all\">\n                    <button\n                      className={classnames(\n                        \"u-button-neutral config-panel__hide-button\",\n                        {\n                          \"config-panel__show-button\": showResetAll,\n                        }\n                      )}\n                      onClick={allFieldsToDefault}\n                    >\n                      Reset all values\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"config-panel__list\">\n                  {generateConfigElementList(\n                    config,\n                    selectedConfig,\n                    setSelectedConfig,\n                    setNewValue\n                  )}\n                </div>\n                {generateConfirmationDialog()}\n                <div\n                  className={classnames(\"config-panel__drawer\", {\n                    \"is-open\": confirmType !== null,\n                  })}\n                >\n                  <div className=\"config-panel__button-row\">\n                    <button\n                      className=\"p-button--neutral\"\n                      onClick={handleCancel}\n                    >\n                      Cancel\n                    </button>\n                    <button\n                      className={classnames(\n                        \"p-button--positive config-panel__save-button\",\n                        {\n                          \"is-active\": savingConfig,\n                        }\n                      )}\n                      onClick={handleSubmit}\n                      disabled={!enableSave || savingConfig}\n                    >\n                      {!savingConfig ? (\n                        \"Save and apply\"\n                      ) : (\n                        <>\n                          <i className=\"p-icon--spinner u-animation--spin is-light\"></i>\n                          <span>Saving&hellip;</span>\n                        </>\n                      )}\n                    </button>\n                  </div>\n                </div>\n              </div>\n              <div className=\"config-panel__description col-6\">\n                {selectedConfig ? (\n                  <FadeIn\n                    key={selectedConfig.name}\n                    isActive={true}\n                    className=\"config-panel__description-wrapper\"\n                  >\n                    <>\n                      <h4>Configuration Description</h4>\n                      <h5>{selectedConfig.name}</h5>\n                      <pre>{selectedConfig.description}</pre>\n                    </>\n                  </FadeIn>\n                ) : (\n                  <div className=\"config-panel__no-description u-vertically-center\">\n                    <NoDescriptionMessage />\n                  </div>\n                )}\n              </div>\n            </>\n          </FadeIn>\n        )}\n      </div>\n    </SlidePanel>\n  );\n}\n\nasync function getConfig(\n  modelUUID: string,\n  appName: string,\n  reduxStore: Store,\n  setIsLoading: (value: boolean) => void,\n  setConfig: (value: Config) => void,\n  checkAllDefaults: (value: Config) => void\n) {\n  return getApplicationConfig(modelUUID, appName, reduxStore.getState()).then(\n    (result) => {\n      // Add the key to the config object to make for easier use later.\n      const config: Config = {};\n      Object.keys(result.config).forEach((key) => {\n        config[key] = result.config[key];\n        config[key].name = key;\n      });\n      setIsLoading(false);\n      setConfig(config);\n      checkAllDefaults(config);\n    }\n  );\n}\n\nfunction generateConfigElementList(\n  configs: Config,\n  selectedConfig: ConfigData | undefined,\n  setSelectedConfig: Function,\n  setNewValue: SetNewValue\n) {\n  const elements = Object.keys(configs).map((key) => {\n    const config = configs[key];\n    if (config.type === \"boolean\") {\n      return (\n        <BooleanConfig\n          key={config.name}\n          config={config}\n          selectedConfig={selectedConfig}\n          setSelectedConfig={setSelectedConfig}\n          setNewValue={setNewValue}\n        />\n      );\n    } else {\n      return (\n        <TextAreaConfig\n          key={config.name}\n          config={config}\n          selectedConfig={selectedConfig}\n          setSelectedConfig={setSelectedConfig}\n          setNewValue={setNewValue}\n        />\n      );\n    }\n  });\n\n  return elements;\n}\n\nfunction generateChangedKeyValues(config: Config) {\n  const changedValues = Object.keys(config).reduce(\n    (accumulator: ReactNode[], key: string) => {\n      const cfg = config[key];\n      if (isSet(cfg.newValue) && cfg.newValue !== cfg.value) {\n        accumulator.push(\n          <div key={key}>\n            <h5>{key}</h5>\n            <pre>{cfg.newValue}</pre>\n          </div>\n        );\n      }\n      return accumulator;\n    },\n    []\n  );\n  return changedValues;\n}\n\nfunction NoConfigMessage() {\n  return (\n    <div className=\"config-panel__message\">\n      <img src={boxImage} alt=\"\" className=\"config-panel--center-img\" />\n      <h4>This application doesn't have any configuration parameters</h4>\n    </div>\n  );\n}\n\nfunction NoDescriptionMessage() {\n  return (\n    <div className=\"config-panel__message\">\n      <img src={bulbImage} alt=\"\" className=\"config-panel--center-img\" />\n      <h4>\n        Click on a configuration row to view its related description and\n        parameters\n      </h4>\n    </div>\n  );\n}\n\nfunction CancelConfirmation(\n  appName: string,\n  changedConfigList: ReactNode,\n  confirmFunction: () => void,\n  cancelFunction: () => void\n): JSX.Element {\n  return (\n    <ConfirmationModal\n      buttonRow={[\n        <button\n          className=\"p-button--neutral\"\n          key=\"cancel\"\n          onClick={cancelFunction}\n        >\n          Continue editing\n        </button>,\n        <button\n          className=\"p-button--negative\"\n          key=\"save\"\n          onClick={confirmFunction}\n        >\n          Yes, I'm sure\n        </button>,\n      ]}\n    >\n      <h4>Are you sure you wish to cancel?</h4>\n      <p>\n        You have edited the following values to the {appName} configuration:\n      </p>\n      {changedConfigList}\n    </ConfirmationModal>\n  );\n}\n\nfunction SaveConfirmation(\n  appName: string,\n  changedConfigList: ReactNode,\n  confirmFunction: () => void,\n  cancelFunction: () => void\n): JSX.Element {\n  return (\n    <ConfirmationModal\n      buttonRow={\n        <div>\n          <div className=\"config-panel__modal-button-row-hint\">\n            You can revert back to the applications default settings by clicking\n            the “Reset all values” button; or reset each edited field by\n            clicking “Use default”.\n          </div>\n          <div>\n            <button\n              className=\"p-button--neutral\"\n              key=\"cancel\"\n              onClick={cancelFunction}\n            >\n              Cancel\n            </button>\n            <button\n              className=\"p-button--positive\"\n              key=\"save\"\n              onClick={confirmFunction}\n            >\n              Yes, apply changes\n            </button>\n          </div>\n        </div>\n      }\n    >\n      <h4>Are you sure you wish to apply these changes?</h4>\n      <p>\n        You have edited the following values to the {appName} configuration:\n      </p>\n      {changedConfigList}\n    </ConfirmationModal>\n  );\n}\n","type data = {\n  th: string;\n  td: string;\n};\n\nexport const generatePanelTableRows = (data: data[]) => {\n  return data.map(({ th, td }) => {\n    return (\n      <tr className=\"panel__tr\" key={th + td}>\n        <th className=\"panel__th\">{th}</th>\n        <td className=\"panel__td\">{td}</td>\n      </tr>\n    );\n  });\n};\n","import useModelStatus from \"hooks/useModelStatus\";\nimport type { TSFixMe } from \"types\";\n\nimport { generatePanelTableRows } from \"../shared\";\n\nimport \"../_panels.scss\";\n\ntype Props = {\n  entity: string;\n};\n\ntype tableData = {\n  th: string;\n  td: string;\n};\n\nexport default function RemoteAppsPanel({ entity: appId }: Props): JSX.Element {\n  // Get model status info\n  const modelStatusData: TSFixMe = useModelStatus();\n\n  const remoteApp = modelStatusData[\"remote-applications\"]?.[appId];\n\n  const tableDataArr: tableData[] = [\n    { th: \"Offer name\", td: remoteApp[\"offer-name\"] || \"-\" },\n    { th: \"Application\", td: \"-\" },\n    { th: \"Charm\", td: \"-\" },\n    { th: \"Store\", td: \"-\" },\n    { th: \"Application\", td: remoteApp[\"offer-url\"] || \"-\" },\n    { th: \"Status\", td: remoteApp.status.status || \"-\" },\n    { th: \"Endpoint\", td: \"-\" },\n    { th: \"Interface\", td: \"-\" },\n  ];\n\n  return (\n    <div className=\"panel\">\n      <span className=\"p-muted-heading\">flannel:etcd</span>\n      <h5>Remote Offer info</h5>\n      <table className=\"panel__table\">\n        <tbody>{generatePanelTableRows(tableDataArr)}</tbody>\n      </table>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport useModelStatus from \"hooks/useModelStatus\";\nimport type { TSFixMe } from \"types\";\n\nimport { generatePanelTableRows } from \"../shared\";\n\nimport \"../_panels.scss\";\n\ntype Props = {\n  entity: string;\n};\n\ntype tableData = {\n  th: string;\n  td: string;\n};\n\nexport default function OffersPanel({\n  entity: application,\n}: Props): JSX.Element {\n  const modelStatusData: TSFixMe = useModelStatus();\n  const offers = modelStatusData?.offers[application];\n\n  const [accordionPanelId, setAccordionPanelId] = useState(\"\");\n\n  const handleAccordionToggle = (id: string) => {\n    setAccordionPanelId(id === accordionPanelId ? \"\" : id);\n  };\n\n  const offerInfo: tableData[] = [\n    { th: \"Offer name\", td: offers[\"offer-name\"] },\n    { th: \"Application\", td: application },\n    { th: \"Charm\", td: \"-\" },\n    { th: \"Store\", td: \"-\" },\n    { th: \"URL\", td: \"-\" },\n  ];\n\n  const tab1: tableData[] = [\n    { th: \"Endpoint\", td: \"-\" },\n    { th: \"Interface\", td: \"-\" },\n    { th: \"Role\", td: \"-\" },\n  ];\n\n  const tab2: tableData[] = [\n    { th: \"UUID\", td: \"-\" },\n    { th: \"User\", td: \"-\" },\n    { th: \"Relation-id\", td: \"-\" },\n    { th: \"Status\", td: \"-\" },\n    { th: \"Ingress-subnets\", td: \"-\" },\n  ];\n\n  const tab3: tableData[] = [\n    { th: \"User\", td: \"-\" },\n    { th: \"display-name\", td: \"-\" },\n    { th: \"access\", td: \"-\" },\n  ];\n\n  return (\n    <div className=\"panel\">\n      <span className=\"p-muted-heading\">mysql:db</span>\n      <h5>Offer info</h5>\n      <table className=\"panel__table\">\n        <tbody>{generatePanelTableRows(offerInfo)}</tbody>\n      </table>\n\n      <aside className=\"p-accordion\">\n        <ul className=\"p-accordion__list\">\n          <li className=\"p-accordion__group\">\n            <button\n              type=\"button\"\n              className=\"p-accordion__tab\"\n              id=\"tab1\"\n              aria-controls=\"tab1-section\"\n              aria-expanded={accordionPanelId === \"tab1\"}\n              onClick={() => handleAccordionToggle(\"tab1\")}\n            >\n              Endpoint 1\n            </button>\n            <section\n              className=\"p-accordion__panel\"\n              id=\"tab1-section\"\n              aria-hidden={accordionPanelId !== \"tab1\"}\n              aria-labelledby=\"tab1\"\n            >\n              <table className=\"panel__table\">\n                <tbody>{generatePanelTableRows(tab1)}</tbody>\n              </table>\n            </section>\n          </li>\n          <li className=\"p-accordion__group\">\n            <button\n              type=\"button\"\n              className=\"p-accordion__tab\"\n              id=\"tab2\"\n              aria-controls=\"tab2-section\"\n              aria-expanded={accordionPanelId === \"tab2\"}\n              onClick={() => handleAccordionToggle(\"tab2\")}\n            >\n              Connection 0/0\n            </button>\n            <section\n              className=\"p-accordion__panel\"\n              id=\"tab2-section\"\n              aria-hidden={accordionPanelId !== \"tab2\"}\n              aria-labelledby=\"tab2\"\n            >\n              <table className=\"panel__table\">\n                <tbody>{generatePanelTableRows(tab2)}</tbody>\n              </table>\n            </section>\n          </li>\n          <li className=\"p-accordion__group\">\n            <button\n              type=\"button\"\n              className=\"p-accordion__tab\"\n              id=\"tab3\"\n              aria-controls=\"tab3-section\"\n              aria-expanded={accordionPanelId === \"tab3\"}\n              onClick={() => handleAccordionToggle(\"tab3\")}\n            >\n              Users\n            </button>\n            <section\n              className=\"p-accordion__panel\"\n              id=\"tab3-section\"\n              aria-hidden={accordionPanelId !== \"tab3\"}\n              aria-labelledby=\"tab3\"\n            >\n              <table className=\"panel__table\">\n                <tbody>{generatePanelTableRows(tab3)}</tbody>\n              </table>\n            </section>\n          </li>\n        </ul>\n      </aside>\n    </div>\n  );\n}\n","import { useEffect, useState, useCallback } from \"react\";\n\nimport { Spinner, Tabs } from \"@canonical/react-components\";\nimport { useSelector, useStore } from \"react-redux\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useQueryParams, StringParam, withDefault } from \"use-query-params\";\n\nimport BaseLayout from \"layout/BaseLayout/BaseLayout\";\n\nimport Header from \"components/Header/Header\";\nimport WebCLI from \"components/WebCLI/WebCLI\";\nimport SlidePanel from \"components/SlidePanel/SlidePanel\";\nimport Breadcrumb from \"components/Breadcrumb/Breadcrumb\";\n\nimport ConfigPanel from \"panels/ConfigPanel/ConfigPanel\";\nimport RemoteAppsPanel from \"panels/RemoteAppsPanel/RemoteAppsPanel\";\nimport OffersPanel from \"panels/OffersPanel/OffersPanel\";\n\nimport { getControllerDataByUUID, getUserPass } from \"app/selectors\";\nimport {\n  getModelApplications,\n  getModelInfo,\n  getModelUUID,\n} from \"juju/model-selectors\";\n\nimport useWindowTitle from \"hooks/useWindowTitle\";\n\nimport FadeIn from \"animations/FadeIn\";\n\nimport \"./_entity-details.scss\";\n\nfunction generatePanelContent(activePanel, entity, panelRowClick) {\n  switch (activePanel) {\n    case \"remoteApps\":\n      return <RemoteAppsPanel entity={entity} panelRowClick={panelRowClick} />;\n    case \"offers\":\n      return <OffersPanel entity={entity} panelRowClick={panelRowClick} />;\n  }\n}\n\nconst EntityDetails = ({ type, children, className = \"\" }) => {\n  const { userName, modelName } = useParams();\n  const history = useHistory();\n  const modelUUID = useSelector(getModelUUID(modelName, userName));\n  const modelInfo = useSelector(getModelInfo(modelUUID));\n  const applications = useSelector(getModelApplications(modelUUID));\n\n  const [query, setQuery] = useQueryParams({\n    panel: StringParam,\n    entity: StringParam,\n    activeView: withDefault(StringParam, \"apps\"),\n  });\n\n  const setActiveView = (view) => {\n    setQuery({ activeView: view });\n  };\n\n  const { panel: activePanel, entity, activeView } = query;\n  const closePanelConfig = { panel: undefined, entity: undefined };\n\n  const store = useStore();\n  const storeState = store.getState();\n\n  const [showWebCLI, setShowWebCLI] = useState(false);\n\n  // In a JAAS environment the controllerUUID will be the sub controller not\n  // the primary controller UUID that we connect to.\n  const controllerUUID = modelInfo?.[\"controller-uuid\"];\n  // The primary controller data is the controller endpoint we actually connect\n  // to. In the case of a normally bootstrapped controller this will be the\n  // same as the model controller, however in a JAAS environment, this primary\n  // controller will be JAAS and the model controller will be different.\n  const primaryControllerData = useSelector(\n    getControllerDataByUUID(controllerUUID)\n  );\n\n  let credentials = null;\n  let controllerWSHost = \"\";\n  if (primaryControllerData) {\n    credentials = getUserPass(primaryControllerData[0], storeState);\n    controllerWSHost = primaryControllerData[0]\n      .replace(\"wss://\", \"\")\n      .replace(\"/api\", \"\");\n  }\n\n  const handleNavClick = (e, section) => {\n    e.preventDefault();\n    e.target.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"end\",\n      inline: \"nearest\",\n    });\n    setActiveView(section);\n  };\n\n  useEffect(() => {\n    // XXX Remove me once we have the 2.9 build.\n    if (modelInfo && modelInfo?.version.indexOf(\"2.9\") !== -1) {\n      // The Web CLI is only available in Juju controller versions 2.9 and\n      // above. This will allow us to only show the shell on multi-controller\n      // setups with different versions where the correct controller version\n      // is available.\n      setShowWebCLI(true);\n    }\n  }, [modelInfo]);\n\n  useWindowTitle(modelInfo?.name ? `Model: ${modelInfo?.name}` : \"...\");\n\n  const panelRowClick = useCallback(\n    (entityName, entityPanel) => {\n      // This can be removed when all entities are moved to top level aside panels\n      if (entityPanel === \"apps\") {\n        history.push(`/models/${userName}/${modelName}/app/${entityName}`);\n      } else {\n        return setQuery({ panel: entityPanel, entity: entityName });\n      }\n    },\n    [setQuery, history, modelName, userName]\n  );\n\n  const generateActivePanel = () => {\n    if (activePanel === \"config\") {\n      return (\n        <ConfigPanel\n          appName={entity}\n          charm={applications?.[entity]?.[\"charm-url\"]}\n          modelUUID={modelUUID}\n          onClose={() => setQuery(closePanelConfig)}\n        />\n      );\n    } else if (activePanel === \"remoteApps\" || activePanel === \"offers\") {\n      return (\n        <SlidePanel\n          isActive={activePanel}\n          onClose={() => setQuery(closePanelConfig)}\n          isLoading={!entity}\n          className={`${activePanel}-panel`}\n        >\n          {generatePanelContent(activePanel, entity, panelRowClick)}\n        </SlidePanel>\n      );\n    }\n  };\n\n  const generateTabItems = () => {\n    let items = [\n      {\n        active: activeView === \"apps\",\n        label: \"Applications\",\n        onClick: (e) => handleNavClick(e, \"apps\"),\n      },\n      {\n        active: activeView === \"integrations\",\n        label: \"Integrations\",\n        onClick: (e) => handleNavClick(e, \"integrations\"),\n      },\n      {\n        active: activeView === \"action-logs\",\n        label: \"Action Logs\",\n        onClick: (e) => handleNavClick(e, \"action-logs\"),\n      },\n    ];\n\n    if (modelInfo.type !== \"kubernetes\") {\n      items.push({\n        active: activeView === \"machines\",\n        label: \"Machines\",\n        onClick: (e) => handleNavClick(e, \"machines\"),\n      });\n    }\n\n    return items;\n  };\n\n  return (\n    <BaseLayout className={className}>\n      <Header>\n        <div className=\"entity-details__header\">\n          <Breadcrumb />\n          <div\n            className=\"entity-details__view-selector\"\n            data-testid=\"view-selector\"\n          >\n            {modelInfo && type === \"model\" && (\n              <Tabs links={generateTabItems()} />\n            )}\n          </div>\n        </div>\n      </Header>\n      {!modelInfo ? (\n        <div className=\"entity-details__loading\" data-testid=\"loading-spinner\">\n          <Spinner />\n        </div>\n      ) : (\n        <FadeIn isActive={modelInfo}>\n          <div className=\"l-content\">\n            <div className={`entity-details entity-details__${type}`}>\n              <>\n                {children}\n                {generateActivePanel()}\n              </>\n            </div>\n          </div>\n        </FadeIn>\n      )}\n      {showWebCLI && (\n        <WebCLI\n          controllerWSHost={controllerWSHost}\n          credentials={credentials}\n          modelUUID={modelUUID}\n        />\n      )}\n    </BaseLayout>\n  );\n};\n\nexport default EntityDetails;\n","import type { ReactNode } from \"react\";\n\nimport \"./_entity-info.scss\";\n\ntype Props = {\n  data: { [key: string]: ReactNode };\n};\n\nexport default function EntityInfo({ data }: Props): JSX.Element {\n  return (\n    <div className=\"entity-info__grid\">\n      {Object.entries(data).map(([label, value]) => {\n        return (\n          <div className=\"entity-info__grid-item\" key={label}>\n            <h4 className=\"p-muted-heading\">{label}</h4>\n            <p data-name={label}>{value}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import { useEffect, useMemo, useState } from \"react\";\nimport { DefaultRootState, useSelector, useStore } from \"react-redux\";\nimport { useParams, Link } from \"react-router-dom\";\nimport classnames from \"classnames\";\n\nimport ModularTable from \"@canonical/react-components/dist/components/ModularTable/ModularTable\";\nimport Spinner from \"@canonical/react-components/dist/components/Spinner/Spinner\";\n\nimport { getModelUUID, getModelStatus } from \"app/selectors\";\nimport { queryOperationsList } from \"juju/index\";\nimport { generateIconImg, generateStatusElement } from \"app/utils/utils\";\n\nimport type { EntityDetailsRoute } from \"components/Routes/Routes\";\n\ntype ApplicationList = { [key: string]: any };\n\ntype Operations = Operation[];\n\ntype Operation = {\n  operation: string;\n  actions: Action[];\n};\n\ntype TableRows = TableRow[];\n\ntype TableRow = {\n  application: string;\n  id: string;\n  status: string;\n  taskId: string;\n  message: string;\n  completed: string;\n};\n\n// https://github.com/juju/js-libjuju/blob/master/api/facades/action-v6.ts#L27\ntype Action = {\n  action: ActionData;\n  enqueued: string;\n  started: string;\n  completed: string;\n  status: string;\n  message: string;\n};\n\ntype ActionData = {\n  tag: string;\n  receiver: string;\n  name: string;\n};\n\ntype ApplicationData = {\n  charm: string;\n};\n\nfunction generateLinkToApp(\n  appName: string,\n  userName: string,\n  modelName: string\n) {\n  return (\n    <Link to={`/models/${userName}/${modelName}/app/${appName}`}>\n      {appName}\n    </Link>\n  );\n}\n\nfunction generateAppIcon(\n  application: ApplicationData | undefined,\n  appName: string,\n  userName: string,\n  modelName: string\n) {\n  // If the user has executed actions with an application and then removed\n  // that application it'll no longer be in the model data so in this\n  // case we need to fail gracefully.\n  if (application) {\n    return (\n      <>\n        {generateIconImg(appName, application.charm)}\n        {generateLinkToApp(appName, userName, modelName)}\n      </>\n    );\n  }\n  return <>{appName}</>;\n}\n\nexport default function ActionLogs() {\n  const [operations, setOperations] = useState<Operations>([]);\n  const [fetchedOperations, setFetchedOperations] = useState(false);\n  const { userName, modelName } = useParams<EntityDetailsRoute>();\n  const appStore = useStore();\n  const getModelUUIDMemo = useMemo(() => getModelUUID(modelName), [modelName]);\n  // Selectors.js is not typescript yet and it complains about the return value\n  // of getModelUUID. TSFixMe\n  const modelUUID = useSelector(\n    getModelUUIDMemo as (state: DefaultRootState) => string\n  );\n  const modelStatusData = useSelector(\n    getModelStatus(modelUUID) as (state: DefaultRootState) => {\n      applications: ApplicationList;\n    }\n  );\n\n  const applicationList = () => Object.keys(modelStatusData.applications);\n\n  useEffect(() => {\n    async function fetchData() {\n      const operationList = await queryOperationsList(\n        {\n          applications: applicationList,\n        },\n        modelUUID,\n        appStore.getState()\n      );\n      setOperations(operationList.results);\n      setFetchedOperations(true);\n    }\n    fetchData();\n    // XXX Temporarily disabled.\n    // Used to stop it re-requesting every time state changes.\n    // appStore and applicationList removed from dependency graph\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [modelUUID]);\n\n  const tableData = useMemo(() => {\n    const rows: TableRows = [];\n    operations &&\n      operations.forEach((operationData) => {\n        const operationId = operationData.operation.split(\"-\")[1];\n        // The action name is being defined like this because the action name is\n        // only contained in the actions array and not on the operation level.\n        // Even though at the current time an operation is the same action\n        // performed across multiple units of the same application. I expect\n        // that the CLI may gain this functionality in the future and we'll have\n        // to update this code to display the correct action name.\n        let actionName = \"\";\n        operationData.actions.forEach((actionData, index) => {\n          actionName = actionData.action.name;\n          let defaultRow: TableRow = {\n            application: \"-\",\n            id: \"-\",\n            status: \"-\",\n            taskId: \"\",\n            message: \"\",\n            completed: \"\",\n          };\n          let newData = {};\n          if (index === 0) {\n            // If this is the first row then add the application row.\n            // The reciever is in the format \"unit-ceph-mon-0\" to \"ceph-mon\"\n            const parts = actionData.action.receiver.match(/unit-(.+)-\\d+/);\n            const appName = parts && parts[1];\n            if (!appName) {\n              console.error(\n                \"Unable to parse action receiver\",\n                actionData.action.receiver\n              );\n              return;\n            }\n            newData = {\n              application: generateAppIcon(\n                modelStatusData.applications[appName],\n                appName,\n                userName,\n                modelName\n              ),\n              id: `${operationId}/${actionName}`,\n              status: generateStatusElement(\n                actionData.status,\n                undefined,\n                true,\n                true\n              ),\n            };\n            rows.push({\n              ...defaultRow,\n              ...newData,\n            });\n          }\n          newData = {\n            application: (\n              <>\n                <span className=\"entity-details__unit-indent\">└</span>\n                <span>\n                  {actionData.action.receiver.replace(\n                    /unit-(.+)-(\\d+)/,\n                    \"$1/$2\"\n                  )}\n                </span>\n              </>\n            ),\n            id: \"\",\n            status: generateStatusElement(\n              actionData.status,\n              undefined,\n              true,\n              true\n            ),\n            taskId: actionData.action.tag.split(\"-\")[1],\n            message: actionData.message || \"-\",\n            completed: actionData.completed,\n          };\n\n          rows.push({\n            ...defaultRow,\n            ...newData,\n          });\n        });\n      });\n    return rows;\n  }, [operations, modelStatusData.applications, userName, modelName]);\n\n  const columnData = useMemo(\n    () => [\n      {\n        Header: \"application\",\n        accessor: \"application\",\n      },\n      {\n        Header: \"operation id/name\",\n        accessor: \"id\",\n      },\n      {\n        Header: \"status\",\n        accessor: \"status\",\n      },\n      {\n        Header: \"task id\",\n        accessor: \"taskId\",\n      },\n      {\n        Header: \"action message\",\n        accessor: \"message\",\n      },\n      {\n        Header: \"completion time\",\n        accessor: \"completed\",\n      },\n    ],\n    []\n  );\n\n  const emptyMsg = `There are no action logs available yet for ${modelName}`;\n\n  return (\n    <div\n      className={classnames(\"entity-details__action-logs\", {\n        \"entity-details__loading\": !fetchedOperations,\n      })}\n    >\n      {!fetchedOperations ? (\n        <Spinner />\n      ) : (\n        <ModularTable\n          emptyMsg={emptyMsg}\n          columns={columnData}\n          data={tableData}\n        />\n      )}\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\ntype Params = {\n  userName: string;\n  modelName: string;\n};\n\ntype Entity = {\n  id: string;\n  type: string;\n};\n\nexport default function useTableRowClick() {\n  const history = useHistory();\n  const [entity, setEntity] = useState<Entity | null>(null);\n  const { userName, modelName } = useParams<Params>();\n\n  useEffect(() => {\n    const entityId = entity && entity.id.replace(\"/\", \"-\");\n    if (entity?.type === \"unit\") {\n      const appName = entityId?.split(\"-\").slice(0, -1).join(\"-\");\n      userName &&\n        modelName &&\n        entity &&\n        appName &&\n        history.push(\n          `/models/${userName}/${modelName}/app/${appName}/${entity.type}/${entityId}/`\n        );\n    } else {\n      userName &&\n        modelName &&\n        entity &&\n        history.push(\n          `/models/${userName}/${modelName}/${entity.type}/${entityId}`\n        );\n    }\n  }, [entity, history, modelName, userName]);\n\n  return (entityType: string, entityId: string, e: MouseEvent) => {\n    const target = e.target as HTMLDivElement;\n    if (target.className.indexOf(\"p-checkbox\") !== -1) {\n      // If the user has clicked the checkbox or its labels then do not navigate\n      return;\n    }\n    setEntity({ type: entityType, id: entityId });\n  };\n}\n","import type { MachineChangeDelta, MachineData, UnitData } from \"juju/types\";\nimport type { TSFixMe } from \"types\";\n\nexport const incrementCounts = (\n  status: string,\n  counts: { [status: string]: number }\n) => {\n  if (counts[status]) {\n    counts[status] = counts[status] += 1;\n  } else {\n    counts[status] = 1;\n  }\n  return counts;\n};\n\nconst generateOfferCounts = (modelStatusData: TSFixMe) => {\n  let offerCount = 0;\n  Object.entries(modelStatusData[\"offers\"]).forEach((offer: TSFixMe) => {\n    const totalConnectedCount = offer[1][\"total-connected-count\"];\n    if (totalConnectedCount > 0) {\n      offerCount = offerCount + totalConnectedCount;\n    }\n  });\n  return { joined: offerCount };\n};\n\nconst generateSecondaryCounts = (\n  modelStatusData: TSFixMe,\n  segment: string,\n  selector: string\n) =>\n  modelStatusData[segment] &&\n  Object.entries(modelStatusData[segment]).reduce(\n    (counts, section: TSFixMe) => {\n      const status = section[1][selector].status;\n      return incrementCounts(status, counts);\n    },\n    {}\n  );\n\nexport function generateUnitCounts(\n  units: UnitData | null,\n  applicationName: string\n) {\n  const counts = {};\n  if (units) {\n    Object.entries(units).forEach(([unitId, unitData]) => {\n      if (unitData.application === applicationName) {\n        const status = unitData[\"agent-status\"].current;\n        if (status) {\n          return incrementCounts(status, counts);\n        }\n      }\n    });\n  }\n  return counts;\n}\n\nexport function generateMachineCounts(\n  machines: MachineData | null,\n  units: UnitData | null,\n  applicationName: string\n) {\n  const counts = {};\n  if (machines && units) {\n    const machineIds: MachineChangeDelta[\"id\"][] = [];\n    Object.entries(units).forEach(([unitId, unitData]) => {\n      if (unitData.application === applicationName) {\n        machineIds.push(unitData[\"machine-id\"]);\n      }\n    });\n    machineIds.forEach((id) => {\n      const status = machines[id][\"agent-status\"].current;\n      if (status) {\n        return incrementCounts(status, counts);\n      }\n    });\n  }\n  return counts;\n}\n\n/**\n  Generates a list of counts from the modelStatusData.\n  @param {String} countType The type of count to generate\n  @param {Object} modelStatusData The modelStatusData from the redux store.\n  @param {String} filterBy The value to filter the counts by. ex) \"grafana\" when\n    you only want to view the unit counts for grafana.\n*/\nexport const renderCounts = (\n  countType: string,\n  modelStatusData: TSFixMe,\n  filterBy = \"\"\n) => {\n  if (!modelStatusData) return null;\n  let chips = null;\n  switch (countType) {\n    case \"localApps\":\n      chips = generateSecondaryCounts(\n        modelStatusData,\n        \"applications\",\n        \"status\"\n      );\n      break;\n    case \"relations\":\n      chips = null;\n      break;\n    case \"offers\":\n      chips = generateOfferCounts(modelStatusData);\n      break;\n    case \"remoteApps\":\n      chips = generateSecondaryCounts(\n        modelStatusData,\n        \"remote-applications\",\n        \"status\"\n      );\n      break;\n  }\n  return chips;\n};\n","import { useMemo, useCallback } from \"react\";\nimport MainTable from \"@canonical/react-components/dist/components/MainTable\";\nimport {\n  useQueryParams,\n  useQueryParam,\n  StringParam,\n  withDefault,\n} from \"use-query-params\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  pluralize,\n  extractCloudName,\n  canAdministerModelAccess,\n} from \"app/utils/utils\";\nimport { useSelector } from \"react-redux\";\n\nimport {\n  appsOffersTableHeaders,\n  machineTableHeaders,\n  relationTableHeaders,\n  offersTableHeaders,\n  consumedTableHeaders,\n  localApplicationTableHeaders,\n  remoteApplicationTableHeaders,\n} from \"tables/tableHeaders\";\n\nimport {\n  generateLocalApplicationRows,\n  generateRemoteApplicationRows,\n  generateConsumedRows,\n  generateMachineRows,\n  generateRelationRows,\n  generateOffersRows,\n  generateAppOffersRows,\n} from \"tables/tableRows\";\n\nimport InfoPanel from \"components/InfoPanel/InfoPanel\";\nimport ContentReveal from \"components/ContentReveal/ContentReveal\";\n\nimport EntityDetails from \"pages/EntityDetails/EntityDetails\";\nimport EntityInfo from \"components/EntityInfo/EntityInfo\";\nimport ActionLogs from \"pages/EntityDetails/Model/ActionLogs/ActionLogs\";\n\nimport useModelStatus from \"hooks/useModelStatus\";\nimport useTableRowClick from \"hooks/useTableRowClick\";\nimport useActiveUser from \"hooks/useActiveUser\";\n\nimport ChipGroup from \"components/ChipGroup/ChipGroup\";\n\nimport {\n  getAllModelApplicationStatus,\n  getModelApplications,\n  getModelInfo,\n  getModelMachines,\n  getModelRelations,\n  getModelUnits,\n  getModelUUID,\n} from \"juju/model-selectors\";\n\nimport type { EntityDetailsRoute } from \"components/Routes/Routes\";\nimport type { TSFixMe } from \"types\";\n\nimport { renderCounts } from \"../counts\";\n\nconst shouldShow = (segment: string, activeView: string) => {\n  switch (activeView) {\n    case \"apps\":\n      if (segment === \"apps\") {\n        return true;\n      }\n      return false;\n    case \"units\":\n    case \"machines\":\n    case \"integrations\":\n    case \"action-logs\":\n      if (segment === \"relations-title\") {\n        return true;\n      }\n      return segment === activeView;\n  }\n};\n\nconst generateCloudAndRegion = (cloudTag: string, region: string) => {\n  if (cloudTag && region) {\n    return `${extractCloudName(cloudTag)} / ${region}`;\n  }\n  return \"\";\n};\n\nconst Model = () => {\n  const modelStatusData: TSFixMe = useModelStatus();\n  const activeUser = useActiveUser();\n  const history = useHistory();\n\n  const { userName, modelName } = useParams<EntityDetailsRoute>();\n\n  const [query, setQuery] = useQueryParams({\n    panel: StringParam,\n    entity: StringParam,\n    activeView: withDefault(StringParam, \"apps\"),\n  });\n\n  const modelUUID = useSelector(getModelUUID(modelName, userName));\n\n  const tableRowClick = useTableRowClick();\n\n  const panelRowClick = useCallback(\n    (entityName, entityPanel) => {\n      // This can be removed when all entities are moved to top level aside panels\n      if (entityPanel === \"apps\") {\n        history.push(`/models/${userName}/${modelName}/app/${entityName}`);\n      } else {\n        return setQuery({ panel: entityPanel, entity: entityName });\n      }\n    },\n    [setQuery, history, modelName, userName]\n  );\n\n  const applications = useSelector(getModelApplications(modelUUID));\n  const relations = useSelector(getModelRelations(modelUUID));\n  const machines = useSelector(getModelMachines(modelUUID));\n  const units = useSelector(getModelUnits(modelUUID));\n\n  const applicationStatuses = useSelector(\n    getAllModelApplicationStatus(modelUUID)\n  );\n\n  const localApplicationTableRows = useMemo(() => {\n    return generateLocalApplicationRows(\n      applications,\n      applicationStatuses,\n      tableRowClick,\n      query\n    );\n  }, [applications, applicationStatuses, tableRowClick, query]);\n\n  const remoteApplicationTableRows = useMemo(() => {\n    return generateRemoteApplicationRows(modelStatusData, panelRowClick, query);\n  }, [modelStatusData, panelRowClick, query]);\n\n  const machinesTableRows = useMemo(() => {\n    return generateMachineRows(machines, units, tableRowClick, query?.entity);\n  }, [machines, units, tableRowClick, query]);\n\n  const relationTableRows = useMemo(\n    () => generateRelationRows(relations, applications),\n    [applications, relations]\n  );\n  const consumedTableRows = useMemo(\n    () => generateConsumedRows(modelStatusData),\n    [modelStatusData]\n  );\n\n  const offersTableRows = useMemo(\n    () => generateOffersRows(modelStatusData),\n    [modelStatusData]\n  );\n  const appOffersRows = useMemo(\n    () => generateAppOffersRows(modelStatusData, panelRowClick, query),\n    [modelStatusData, panelRowClick, query]\n  );\n\n  const modelInfoData = useSelector(getModelInfo(modelUUID));\n\n  const LocalAppChips = renderCounts(\"localApps\", modelStatusData);\n  const appOffersChips = renderCounts(\"offers\", modelStatusData);\n  const remoteAppChips = renderCounts(\"remoteApps\", modelStatusData);\n\n  const localAppTableLength = localApplicationTableRows?.length;\n  const appOffersTableLength = appOffersRows?.length;\n  const remoteAppsTableLength = remoteApplicationTableRows?.length;\n\n  const AppOffersHeader = () => (\n    <>\n      <span>\n        {appOffersTableLength} {pluralize(appOffersTableLength, \"Offer\")}\n      </span>\n      <ChipGroup chips={appOffersChips} descriptor={null} />\n    </>\n  );\n\n  const LocalAppsHeader = () => (\n    <>\n      <span>\n        {localAppTableLength}{\" \"}\n        {pluralize(localAppTableLength, \"Local application\")}\n      </span>\n      <ChipGroup chips={LocalAppChips} descriptor={null} />\n    </>\n  );\n\n  const RemoteAppsHeader = () => (\n    <>\n      <span>\n        {remoteAppsTableLength}{\" \"}\n        {pluralize(remoteAppsTableLength, \"Remote application\")}\n      </span>\n      <ChipGroup chips={remoteAppChips} descriptor={null} />\n    </>\n  );\n\n  const AppOffersTable = () => (\n    <>\n      {!!appOffersTableLength && (\n        <>\n          <MainTable\n            headers={appsOffersTableHeaders}\n            rows={appOffersRows}\n            className=\"entity-details__offers p-main-table\"\n            sortable\n            emptyStateMsg={\"There are no offers associated with this model\"}\n          />\n        </>\n      )}\n    </>\n  );\n\n  const LocalAppsTable = () => (\n    <>\n      {!!localAppTableLength && (\n        <MainTable\n          headers={localApplicationTableHeaders}\n          rows={localApplicationTableRows}\n          className=\"entity-details__apps p-main-table\"\n          sortable\n          emptyStateMsg={\"There are no local applications in this model\"}\n        />\n      )}\n    </>\n  );\n\n  const RemoteAppsTable = () => (\n    <>\n      {!!remoteAppsTableLength && (\n        <MainTable\n          headers={remoteApplicationTableHeaders}\n          rows={remoteApplicationTableRows}\n          className=\"entity-details__remote-apps p-main-table\"\n          sortable\n          emptyStateMsg={\"There are no remote applications in this model\"}\n        />\n      )}\n    </>\n  );\n\n  const getContentReveals = () => {\n    return (\n      <>\n        {!!appOffersTableLength && (\n          <ContentReveal title={AppOffersHeader()} openByDefault={true}>\n            {AppOffersTable()}\n          </ContentReveal>\n        )}\n\n        {!!localAppTableLength && (\n          <ContentReveal title={LocalAppsHeader()} openByDefault={true}>\n            {LocalAppsTable()}\n          </ContentReveal>\n        )}\n\n        {!!remoteAppsTableLength && (\n          <ContentReveal title={RemoteAppsHeader()} openByDefault={true}>\n            {RemoteAppsTable()}\n          </ContentReveal>\n        )}\n      </>\n    );\n  };\n\n  const countVisibleTables = (tablesLengths: number[]) => {\n    let numberOfTables = 0;\n    tablesLengths.forEach((tableLength) => {\n      tableLength > 0 && numberOfTables++;\n    });\n    return numberOfTables;\n  };\n\n  const visibleTables = countVisibleTables([\n    localAppTableLength,\n    remoteAppsTableLength,\n    appOffersTableLength,\n  ]);\n\n  const setPanelQs = useQueryParam(\"panel\", StringParam)[1];\n\n  return (\n    <EntityDetails type=\"model\">\n      <div>\n        <InfoPanel />\n        <div className=\"entity-details__actions\">\n          {canAdministerModelAccess(\n            activeUser,\n            modelStatusData?.info?.users\n          ) && (\n            <button\n              className=\"entity-details__action-button\"\n              data-test=\"model-access-btn\"\n              onClick={() => setPanelQs(\"share-model\")}\n            >\n              <i className=\"p-icon--share\"></i>Model access\n            </button>\n          )}\n        </div>\n        {modelInfoData && (\n          <EntityInfo\n            data={{\n              controller: modelInfoData.type,\n              \"Cloud/Region\": generateCloudAndRegion(\n                modelInfoData[\"cloud-tag\"],\n                modelInfoData.region\n              ),\n              version: modelInfoData.version,\n              sla: modelInfoData.sla?.level,\n            }}\n          />\n        )}\n      </div>\n      <div className=\"entity-details__main u-overflow--auto\">\n        {shouldShow(\"apps\", query.activeView) && (\n          <>\n            {visibleTables === 0 && (\n              <span>\n                There are no applications associated with this model. Learn\n                about{\" \"}\n                <a\n                  className=\"p-link--external\"\n                  href=\"https://juju.is/docs/deploying-applications\"\n                >\n                  deploying applications\n                </a>\n              </span>\n            )}\n            {visibleTables > 1 ? (\n              getContentReveals()\n            ) : (\n              <>\n                {LocalAppsTable()}\n                {AppOffersTable()}\n                {RemoteAppsTable()}\n              </>\n            )}\n          </>\n        )}\n        {shouldShow(\"machines\", query.activeView) &&\n          machinesTableRows.length > 0 && (\n            <MainTable\n              headers={machineTableHeaders}\n              rows={machinesTableRows}\n              className=\"entity-details__machines p-main-table\"\n              sortable\n              emptyStateMsg={\"There are no machines in this model\"}\n            />\n          )}\n        {shouldShow(\"integrations\", query.activeView) &&\n        relationTableRows.length > 0 ? (\n          <>\n            {shouldShow(\"relations-title\", query.activeView) && (\n              <h5>Relations ({relationTableRows.length})</h5>\n            )}\n            <MainTable\n              headers={relationTableHeaders}\n              rows={relationTableRows}\n              className=\"entity-details__relations p-main-table\"\n              sortable\n              emptyStateMsg={\"There are no relations in this model\"}\n            />\n            {shouldShow(\"relations-title\", query.activeView) && (\n              <>\n                {consumedTableRows.length > 0 ||\n                  (offersTableRows.length > 0 && (\n                    <h5>\n                      Cross-model relations (\n                      {consumedTableRows.length + offersTableRows.length})\n                    </h5>\n                  ))}\n              </>\n            )}\n            {consumedTableRows.length > 0 && (\n              <MainTable\n                headers={consumedTableHeaders}\n                rows={consumedTableRows}\n                className=\"entity-details__relations p-main-table\"\n                sortable\n                emptyStateMsg={\"There are no remote relations in this model\"}\n              />\n            )}\n            {offersTableRows.length > 0 && (\n              <MainTable\n                headers={offersTableHeaders}\n                rows={offersTableRows}\n                className=\"entity-details__relations p-main-table\"\n                sortable\n                emptyStateMsg={\"There are no connected offers in this model\"}\n              />\n            )}\n          </>\n        ) : (\n          <>\n            {query.activeView === \"integrations\" && (\n              <span data-testid=\"no-integrations-msg\">\n                There are no integrations associated with this model -{\" \"}\n                <a\n                  className=\"p-link--external\"\n                  href=\"https://juju.is/integration\"\n                >\n                  learn more about integration\n                </a>\n              </span>\n            )}\n          </>\n        )}\n        {shouldShow(\"action-logs\", query.activeView) && <ActionLogs />}\n      </div>\n    </EntityDetails>\n  );\n};\n\nexport default Model;\n","import { ReactNode, useEffect } from \"react\";\nimport { Form, useFormikContext } from \"formik\";\n\nexport type SetFieldValue = (fieldName: string, value: any) => void;\n\ntype Props = {\n  children: ReactNode;\n  onFormChange: (data: any) => void;\n  onSetup: (setFieldValue: SetFieldValue) => void;\n};\n\nexport default function FormikFormData({\n  children,\n  onFormChange = () => {},\n  onSetup = () => {},\n}: Props): JSX.Element {\n  const { values, setFieldValue } = useFormikContext<any>();\n\n  useEffect(() => {\n    onSetup(setFieldValue);\n  }, [onSetup, setFieldValue]);\n\n  useEffect(() => {\n    onFormChange(values);\n  }, [onFormChange, values]);\n\n  return <Form>{children}</Form>;\n}\n","export default __webpack_public_path__ + \"static/media/run-action-icon.341fa27f.svg\";","export default __webpack_public_path__ + \"static/media/action-logs-icon.1a01b6a9.svg\";","import { useMemo, useRef, useState } from \"react\";\nimport { Formik, Field } from \"formik\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport {\n  useQueryParam,\n  useQueryParams,\n  ArrayParam,\n  StringParam,\n  withDefault,\n} from \"use-query-params\";\nimport Button from \"@canonical/react-components/dist/components/Button\";\nimport MainTable from \"@canonical/react-components/dist/components/MainTable\";\n\nimport ButtonGroup from \"components/ButtonGroup/ButtonGroup\";\nimport InfoPanel from \"components/InfoPanel/InfoPanel\";\nimport EntityInfo from \"components/EntityInfo/EntityInfo\";\nimport ChipGroup from \"components/ChipGroup/ChipGroup\";\nimport FormikFormData from \"components/FormikFormData/FormikFormData\";\n\nimport EntityDetails from \"pages/EntityDetails/EntityDetails\";\n\nimport useTableRowClick from \"hooks/useTableRowClick\";\n\nimport { extractRevisionNumber, generateStatusElement } from \"app/utils/utils\";\n\nimport type { EntityDetailsRoute } from \"components/Routes/Routes\";\nimport type { SetFieldValue } from \"components/FormikFormData/FormikFormData\";\n\nimport { generateMachineRows, generateUnitRows } from \"tables/tableRows\";\nimport {\n  machineTableHeaders,\n  generateSelectableUnitTableHeaders,\n} from \"tables/tableHeaders\";\n\nimport runActionImage from \"static/images/run-action-icon.svg\";\nimport actionLogsImage from \"static/images/action-logs-icon.svg\";\n\nimport {\n  getModelApplications,\n  getModelInfo,\n  getModelMachines,\n  getModelUnits,\n  getModelUUID,\n} from \"juju/model-selectors\";\n\nimport type { MachineData, UnitData } from \"juju/types\";\n\nimport { generateMachineCounts, generateUnitCounts } from \"../counts\";\n\ntype FormData = {\n  selectAll: boolean;\n  selectedUnits: string[];\n};\n\nexport default function App(): JSX.Element {\n  const history = useHistory();\n  const {\n    appName: entity,\n    userName,\n    modelName,\n  } = useParams<EntityDetailsRoute>();\n\n  const [enableActionButtonRow, setEnableActionButtonRow] =\n    useState<boolean>(false);\n\n  const tablesRef = useRef<HTMLDivElement>(null);\n  const setFieldsValues = useRef<SetFieldValue>();\n  const selectedUnits = useRef<string[]>([]);\n  const selectAll = useRef<boolean>(false);\n\n  const modelUUID = useSelector(getModelUUID(modelName, userName));\n  const applications = useSelector(getModelApplications(modelUUID));\n  const units = useSelector(getModelUnits(modelUUID));\n  const machines = useSelector(getModelMachines(modelUUID));\n  const modelData = useSelector(getModelInfo(modelUUID));\n\n  const tableRowClick = useTableRowClick();\n\n  const filteredMachineList = useMemo(() => {\n    const filteredMachines: MachineData = {};\n    if (!units || !machines) {\n      return null;\n    }\n    Object.entries(units).forEach(([unitId, unitData]) => {\n      if (unitData.application === entity) {\n        const machineId = unitData[\"machine-id\"];\n        filteredMachines[machineId] = machines[machineId];\n      }\n    });\n    return filteredMachines;\n  }, [units, machines, entity]);\n\n  const machinesPanelRows = useMemo(\n    () => generateMachineRows(filteredMachineList, units, tableRowClick),\n    [filteredMachineList, units, tableRowClick]\n  );\n\n  const hideMachines = modelData?.type === \"kubernetes\";\n\n  const unitTableHeaders = useMemo(() => {\n    const fieldID = \"unit-list-select-all\";\n    return generateSelectableUnitTableHeaders(\n      {\n        content: (\n          <label className=\"p-checkbox--inline\" htmlFor={fieldID}>\n            <Field\n              id={fieldID}\n              type=\"checkbox\"\n              aria-labelledby=\"select-all-units\"\n              className=\"p-checkbox__input\"\n              name=\"selectAll\"\n            />\n            <span className=\"p-checkbox__label\" id=\"select-all-units\"></span>\n          </label>\n        ),\n        sortKey: \"\",\n        className: \"select-unit\",\n      },\n      hideMachines\n    );\n  }, [hideMachines]);\n\n  const filteredUnitList = useMemo(() => {\n    if (!units) {\n      return null;\n    }\n    const filteredUnits: UnitData = {};\n    Object.entries(units).forEach(([unitId, unitData]) => {\n      if (\n        unitData.application === entity ||\n        // Add any units that are a subordinate to the parent to the list\n        // It will be re-sorted in the unit table generation code.\n        (unitData.subordinate && unitData.principal.split(\"/\")[0] === entity)\n      ) {\n        filteredUnits[unitId] = unitData;\n      }\n    });\n    return filteredUnits;\n  }, [units, entity]);\n\n  const unitPanelRows = useMemo(\n    () => generateUnitRows(filteredUnitList, tableRowClick, true, hideMachines),\n    [filteredUnitList, tableRowClick, hideMachines]\n  );\n\n  const [tableView, setTableView] = useQueryParam(\n    \"tableview\",\n    withDefault(StringParam, \"units\")\n  );\n\n  const [query, setQuery] = useQueryParams({\n    activeView: withDefault(StringParam, \"apps\"),\n    entity: StringParam,\n    panel: StringParam,\n  });\n\n  const showConfig = () => {\n    query && setQuery({ panel: \"config\", entity: entity });\n  };\n\n  const application = applications?.[entity];\n\n  let appEntityData = {};\n  if (application) {\n    appEntityData = {\n      status: generateStatusElement(application.status?.current),\n      charm: application[\"charm-url\"],\n      os: \"Ubuntu\",\n      revision: extractRevisionNumber(application[\"charm-url\"]) || \"-\",\n      message: \"-\",\n      provider: modelData?.type || \"-\",\n    };\n  }\n\n  const unitChipData = useMemo(\n    () => generateUnitCounts(units, entity),\n    [units, entity]\n  );\n\n  const machineChipData = useMemo(\n    () => generateMachineCounts(machines, units, entity),\n    [machines, units, entity]\n  );\n\n  const [panel, setPanel] = useQueryParams({\n    panel: StringParam,\n    units: ArrayParam,\n  });\n  const showActions = () => {\n    setPanel({ panel: \"execute-action\", units: selectedUnits.current });\n  };\n\n  const navigateActionLogs = () => {\n    history.push(`/models/${userName}/${modelName}?activeView=action-logs`);\n  };\n\n  const onFormChange = (formData: FormData) => {\n    if (!setFieldsValues.current) return;\n    // If the app is a subordinate and has not been related to any other apps\n    // then its unit list will be `null`.\n\n    let unitList: string[] = [];\n    if (units) {\n      unitList = Object.keys(units).filter(\n        (unitId) => units[unitId].application === entity\n      );\n    }\n\n    // Handle the selectAll checkbox interactions.\n    if (selectAll.current && !formData.selectAll) {\n      if (selectedUnits.current.length === unitList.length) {\n        // Only reset them all to unchecked if they were all checked to\n        // begin with. This is to fix the issue when you uncheck one unit\n        // and it changes the selectAll button.\n        setFieldsValues.current(\"selectedUnits\", []);\n      }\n    } else if (!selectAll.current && formData.selectAll) {\n      // The user has switched the selectAll checkbox from unchecked to checked.\n      setFieldsValues.current(\"selectedUnits\", unitList);\n    }\n    selectAll.current = formData.selectAll;\n\n    // Handle the unit checkbox interactions.\n    if (\n      selectedUnits.current.length !== unitList.length &&\n      formData.selectedUnits.length === unitList.length\n    ) {\n      // If the user has checked all of the unit checkboxes.\n      setFieldsValues.current(\"selectAll\", true);\n    } else if (\n      selectedUnits.current.length === unitList.length &&\n      formData.selectedUnits.length !== unitList.length\n    ) {\n      // If the user has unchecked some of the unit checkboxes.\n      setFieldsValues.current(\"selectAll\", false);\n    }\n    if (selectedUnits.current.length !== formData.selectedUnits.length) {\n      // The user has updated the selected list of units so update the\n      // query param that stores the unit list.\n      if (panel.panel === \"execute-action\") {\n        selectedUnits.current = formData.selectedUnits;\n        showActions();\n      }\n    }\n    selectedUnits.current = formData.selectedUnits;\n    setEnableActionButtonRow(formData.selectedUnits.length > 0);\n  };\n\n  const onSetup = (setFieldValue: SetFieldValue) => {\n    setFieldsValues.current = setFieldValue;\n  };\n\n  return (\n    <EntityDetails type=\"app\" className=\"entity-details__app\">\n      <div>\n        <InfoPanel />\n        <>\n          <div className=\"entity-details__actions\">\n            <button\n              className=\"entity-details__action-button\"\n              onClick={showConfig}\n            >\n              <i className=\"p-icon--settings\"></i>Configure\n            </button>\n          </div>\n          <EntityInfo data={appEntityData} />\n        </>\n      </div>\n      <div className=\"entity-details__main u-overflow--auto\">\n        {!hideMachines && (\n          <ButtonGroup\n            buttons={[\"units\", \"machines\"]}\n            activeButton={tableView}\n            setActiveButton={setTableView}\n          />\n        )}\n        <div className=\"entity-details__tables\" ref={tablesRef}>\n          {tableView === \"units\" && (\n            <>\n              <ChipGroup chips={unitChipData} descriptor=\"units\" />\n              <div className=\"entity-details__action-button-row\">\n                <Button\n                  appearance=\"base\"\n                  className=\"entity-details__action-button\"\n                  hasIcon={true}\n                  onClick={showActions}\n                  disabled={!enableActionButtonRow}\n                  data-test=\"run-action-button\"\n                >\n                  <img\n                    className=\"entity-details__action-button-row-icon\"\n                    src={runActionImage}\n                    alt=\"\"\n                  />\n                  Run action\n                </Button>\n                <span className=\"entity-details__action-button-divider\"></span>\n                <Button\n                  appearance=\"base\"\n                  className=\"entity-details__action-button\"\n                  hasIcon={true}\n                  onClick={navigateActionLogs}\n                  data-test=\"show-action-logs\"\n                >\n                  <img\n                    className=\"entity-details__action-button-row-icon\"\n                    src={actionLogsImage}\n                    alt=\"\"\n                  />\n                  View Action Logs\n                </Button>\n              </div>\n              <Formik\n                initialValues={{\n                  selectAll: false,\n                  selectedUnits: [],\n                }}\n                onSubmit={() => {}}\n              >\n                <FormikFormData onFormChange={onFormChange} onSetup={onSetup}>\n                  <MainTable\n                    headers={unitTableHeaders}\n                    rows={unitPanelRows}\n                    className=\"entity-details__units p-main-table panel__table has-checkbox\"\n                    sortable\n                    emptyStateMsg={\"There are no units in this application\"}\n                    data-test=\"units-table\"\n                  />\n                </FormikFormData>\n              </Formik>\n            </>\n          )}\n          {tableView === \"machines\" && (\n            <>\n              <ChipGroup chips={machineChipData} descriptor=\"machines\" />\n              <MainTable\n                headers={machineTableHeaders}\n                rows={machinesPanelRows}\n                className=\"entity-details__machines p-main-table panel__table\"\n                sortable\n                emptyStateMsg={\"There are no machines in this model\"}\n                data-test=\"machines-table\"\n              />\n            </>\n          )}\n        </div>\n      </div>\n    </EntityDetails>\n  );\n}\n","import { useMemo } from \"react\";\nimport MainTable from \"@canonical/react-components/dist/components/MainTable\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport useTableRowClick from \"hooks/useTableRowClick\";\n\nimport {\n  machineTableHeaders,\n  localApplicationTableHeaders,\n} from \"tables/tableHeaders\";\n\nimport {\n  generateMachineRows,\n  generateLocalApplicationRows,\n} from \"tables/tableRows\";\n\nimport { extractRevisionNumber } from \"app/utils/utils\";\n\nimport EntityDetails from \"pages/EntityDetails/EntityDetails\";\nimport InfoPanel from \"components/InfoPanel/InfoPanel\";\nimport EntityInfo from \"components/EntityInfo/EntityInfo\";\n\nimport {\n  getModelApplications,\n  getAllModelApplicationStatus,\n  getModelInfo,\n  getModelMachines,\n  getModelUnits,\n  getModelUUID,\n} from \"juju/model-selectors\";\n\nimport type { EntityDetailsRoute } from \"components/Routes/Routes\";\nimport type { ApplicationData, MachineData } from \"juju/types\";\n\nexport default function Unit() {\n  const { modelName, userName, unitId } = useParams<EntityDetailsRoute>();\n  // The unit name might have a dash in it so we need to grab only the last one\n  // ex) content-cache-0.\n  const unitIdentifier = unitId.replace(/-(\\d+)$/, \"/$1\");\n  const tableRowClick = useTableRowClick();\n\n  const modelUUID = useSelector(getModelUUID(modelName, userName));\n  const applications = useSelector(getModelApplications(modelUUID));\n  const units = useSelector(getModelUnits(modelUUID));\n  const machines = useSelector(getModelMachines(modelUUID));\n  const modelData = useSelector(getModelInfo(modelUUID));\n\n  const filteredMachineList = useMemo(() => {\n    const filteredMachines: MachineData = {};\n    if (machines && units) {\n      const machineId = units[unitIdentifier][\"machine-id\"];\n      filteredMachines[machineId] = machines[machineId];\n    }\n    return filteredMachines;\n  }, [machines, units, unitIdentifier]);\n\n  const filteredApplicationList = useMemo(() => {\n    const filteredApps: ApplicationData = {};\n    if (applications && units) {\n      const appName = units[unitIdentifier].application;\n      filteredApps[appName] = applications[appName];\n    }\n    return filteredApps;\n  }, [applications, units, unitIdentifier]);\n\n  const applicationStatuses = useSelector(\n    getAllModelApplicationStatus(modelUUID)\n  );\n\n  const machineRows = useMemo(\n    () => generateMachineRows(filteredMachineList, units, tableRowClick),\n    [filteredMachineList, units, tableRowClick]\n  );\n\n  const applicationRows = useMemo(\n    () =>\n      generateLocalApplicationRows(\n        filteredApplicationList,\n        applicationStatuses,\n        tableRowClick\n      ),\n    [filteredApplicationList, applicationStatuses, tableRowClick]\n  );\n\n  const unit = units?.[unitIdentifier];\n  let unitEntityData = {};\n  if (unit) {\n    const charm = unit?.[\"charm-url\"] || \"-\";\n    unitEntityData = {\n      charm,\n      os: \"-\",\n      revision: extractRevisionNumber(charm) || \"-\",\n      version: unit?.[\"workload-status\"].version || \"-\",\n      message: unit?.[\"workload-status\"].message || \"-\",\n    };\n  }\n\n  return (\n    <EntityDetails type=\"unit\">\n      <div>\n        <InfoPanel />\n        <EntityInfo data={unitEntityData} />\n      </div>\n      <div className=\"entity-details__main u-overflow--auto\">\n        <div className=\"slide-panel__tables\">\n          {modelData?.type !== \"kubernetes\" && (\n            <MainTable\n              headers={machineTableHeaders}\n              rows={machineRows}\n              className=\"entity-details__machines p-main-table\"\n              sortable\n              emptyStateMsg={\"There are no machines in this model\"}\n            />\n          )}\n          <MainTable\n            headers={localApplicationTableHeaders}\n            rows={applicationRows}\n            className=\"entity-details__apps p-main-table\"\n            sortable\n            emptyStateMsg={\"There are no apps in this model\"}\n          />\n        </div>\n      </div>\n    </EntityDetails>\n  );\n}\n","import { useMemo } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport MainTable from \"@canonical/react-components/dist/components/MainTable\";\nimport { useSelector } from \"react-redux\";\n\nimport useTableRowClick from \"hooks/useTableRowClick\";\n\nimport {\n  getModelApplications,\n  getAllModelApplicationStatus,\n  getModelMachines,\n  getModelUnits,\n  getModelUUID,\n} from \"juju/model-selectors\";\n\nimport {\n  generateUnitRows,\n  generateLocalApplicationRows,\n} from \"tables/tableRows\";\n\nimport {\n  localApplicationTableHeaders,\n  unitTableHeaders,\n} from \"tables/tableHeaders\";\n\nimport EntityDetails from \"pages/EntityDetails/EntityDetails\";\n\nimport EntityInfo from \"components/EntityInfo/EntityInfo\";\nimport InfoPanel from \"components/InfoPanel/InfoPanel\";\n\nimport type { EntityDetailsRoute } from \"components/Routes/Routes\";\nimport type { ApplicationData, UnitData } from \"juju/types\";\n\nexport default function Machine() {\n  const { machineId, modelName, userName } = useParams<EntityDetailsRoute>();\n  const tableRowClick = useTableRowClick();\n  const modelUUID = useSelector(getModelUUID(modelName, userName));\n  const applications = useSelector(getModelApplications(modelUUID));\n  const units = useSelector(getModelUnits(modelUUID));\n  const machines = useSelector(getModelMachines(modelUUID));\n  const machine = machines?.[machineId];\n\n  const applicationStatuses = useSelector(\n    getAllModelApplicationStatus(modelUUID)\n  );\n\n  const filteredApplicationList = useMemo(() => {\n    if (!applications || !units) {\n      return null;\n    }\n    const filteredApps: ApplicationData = {};\n    const appList = new Set<string>();\n    Object.entries(units).forEach(([unitId, unitData]) => {\n      if (unitData[\"machine-id\"] === machineId) {\n        appList.add(unitData.application);\n      }\n    });\n    [...appList].forEach((appName) => {\n      filteredApps[appName] = applications[appName];\n    });\n    return filteredApps;\n  }, [applications, units, machineId]);\n\n  const filteredUnitList = useMemo(() => {\n    if (!units) {\n      return null;\n    }\n    const filteredUnits: UnitData = {};\n    Object.entries(units).forEach(([unitId, unitData]) => {\n      if (unitData[\"machine-id\"] === machineId) {\n        filteredUnits[unitId] = unitData;\n      }\n    });\n    return filteredUnits;\n  }, [units, machineId]);\n\n  const applicationRows = useMemo(\n    () =>\n      generateLocalApplicationRows(\n        filteredApplicationList,\n        applicationStatuses,\n        tableRowClick\n      ),\n    [filteredApplicationList, applicationStatuses, tableRowClick]\n  );\n\n  const unitRows = useMemo(\n    () => generateUnitRows(filteredUnitList, tableRowClick),\n    [filteredUnitList, tableRowClick]\n  );\n\n  const hardware = machine?.[\"hardware-characteristics\"];\n  const MachineEntityData = {\n    memory: hardware?.[\"mem\"] || \"-\",\n    disk: hardware?.[\"root-disk\"] || \"-\",\n    cpu: hardware?.[\"cpu-power\"] || \"-\",\n    cores: hardware?.[\"cpu-cores\"] || \"-\",\n    message: machine?.[\"agent-status\"].message || \"-\",\n  };\n\n  return (\n    <EntityDetails type=\"machine\">\n      <div>\n        <InfoPanel />\n        <EntityInfo data={MachineEntityData} />\n      </div>\n      <div className=\"entity-details__main u-overflow--auto\">\n        <div>\n          <div className=\"entity-detail__tables\">\n            <MainTable\n              headers={unitTableHeaders}\n              rows={unitRows}\n              className=\"entity-details__units p-main-table\"\n              sortable\n              emptyStateMsg={\"There are no units in this machine\"}\n            />\n            <MainTable\n              headers={localApplicationTableHeaders}\n              rows={applicationRows}\n              className=\"entity-details__apps p-main-table\"\n              sortable\n              emptyStateMsg={\"There are no apps in this machine\"}\n            />\n          </div>\n        </div>\n      </div>\n    </EntityDetails>\n  );\n}\n","import { Route, Switch, useParams } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector, useStore } from \"react-redux\";\n\nimport { startModelWatcher, stopModelWatcher } from \"juju/index\";\nimport { populateMissingAllWatcherData } from \"juju/actions\";\n\nimport type { TSFixMe } from \"types\";\nimport { getModelUUID } from \"juju/model-selectors\";\nimport { EntityDetailsRoute } from \"components/Routes/Routes\";\n\nimport Model from \"pages/EntityDetails/Model/Model\";\nimport App from \"pages/EntityDetails/App/App\";\nimport Unit from \"pages/EntityDetails/Unit/Unit\";\nimport Machine from \"pages/EntityDetails/Machine/Machine\";\n\nexport default function ModelDetails() {\n  const appState = useStore().getState();\n  const dispatch = useDispatch();\n  const { userName, modelName } = useParams<EntityDetailsRoute>();\n  const modelUUID = useSelector(getModelUUID(modelName, userName));\n\n  useEffect(() => {\n    let conn: TSFixMe = null;\n    let pingerIntervalId: number | null = null;\n    let watcherHandle: TSFixMe = null;\n\n    async function loadFullData() {\n      ({ conn, watcherHandle, pingerIntervalId } = await startModelWatcher(\n        modelUUID,\n        appState,\n        dispatch\n      ));\n      // Fetch the missing model status data. This data should eventually make\n      // its way into the all watcher at which point we can drop this additional\n      // request for data.\n      // https://bugs.launchpad.net/juju/+bug/1939341\n      const status = await conn.facades.client.fullStatus();\n      if (status !== null) {\n        dispatch(populateMissingAllWatcherData(modelUUID, status));\n      }\n    }\n    if (modelUUID) {\n      loadFullData();\n    }\n    return () => {\n      if (watcherHandle) {\n        stopModelWatcher(conn, watcherHandle[\"watcher-id\"], pingerIntervalId);\n      }\n    };\n    // Skipped as we need appState due to the call to `connectAndLoginToModel`\n    // this method will need to be updated to take specific values instead of\n    // the entire state.\n    // eslint-disable-next-line\n  }, [modelUUID]);\n\n  return (\n    <Switch>\n      <Route path=\"/models/:userName/:modelName\" exact>\n        <Model />\n      </Route>\n      <Route path=\"/models/:userName/:modelName/app/:appName\" exact>\n        <App />\n      </Route>\n      <Route\n        path=\"/models/:userName/:modelName/app/:appName/unit/:unitId\"\n        exact\n      >\n        <Unit />\n      </Route>\n      <Route path=\"/models/:userName/:modelName/machine/:machineId\" exact>\n        <Machine />\n      </Route>\n    </Switch>\n  );\n}\n","import Header from \"components/Header/Header\";\nimport BaseLayout from \"layout/BaseLayout/BaseLayout\";\n\nimport FadeIn from \"animations/FadeIn\";\n\nimport useLocalStorage from \"hooks/useLocalStorage\";\nimport useWindowTitle from \"hooks/useWindowTitle\";\n\nimport \"./settings.scss\";\n\nexport default function Settings() {\n  useWindowTitle(\"Settings\");\n\n  const [disableAnalytics, setDisableAnalytics] = useLocalStorage(\n    \"disableAnalytics\",\n    false\n  );\n\n  return (\n    <BaseLayout>\n      <Header>\n        <span className=\"l-content settings__header\">Settings</span>\n      </Header>\n      <FadeIn isActive={true}>\n        <div className=\"l-content settings\">\n          <div className=\"settings__toggles\">\n            <div className=\"settings__toggles-group\">\n              <label>\n                Disable analytics\n                <input\n                  type=\"checkbox\"\n                  className=\"p-switch\"\n                  defaultChecked={disableAnalytics}\n                  onChange={() => {\n                    setDisableAnalytics(!disableAnalytics);\n                  }}\n                />\n                <div className=\"p-switch__slider\"></div>\n              </label>\n              <div className=\"settings__toggles-info\">\n                You will need to refresh your browser for this setting to take\n                effect.\n              </div>\n            </div>\n          </div>\n        </div>\n      </FadeIn>\n    </BaseLayout>\n  );\n}\n","type Props = {\n  message: string;\n  children: JSX.Element;\n};\n\nexport default function NotFound({ message, children }: Props) {\n  return (\n    <>\n      <h1>\n        <span role=\"img\" aria-label=\"Shrug\">\n          ¯\\_(ツ)_/¯\n        </span>\n      </h1>\n      <h2>{message}</h2>\n      <div className=\"not-found__content\">{children}</div>\n    </>\n  );\n}\n","import { Link } from \"react-router-dom\";\n\nimport BaseLayout from \"layout/BaseLayout/BaseLayout\";\nimport NotFound from \"components/NotFound/NotFound\";\n\nimport useWindowTitle from \"hooks/useWindowTitle\";\n\nexport default function PageNotFound() {\n  useWindowTitle(\"404 - Page not found\");\n  return (\n    <BaseLayout>\n      <div className=\"p-strip\">\n        <div className=\"row\">\n          <NotFound message=\"Hmm, we can't seem to find that page...\">\n            <p>Are you looking for any of the pages below?</p>\n            <ul>\n              <li>\n                <Link to=\"/models\">Models</Link>\n              </li>\n              <li>\n                <Link to=\"/controllers\">Controllers</Link>\n              </li>\n              <li>\n                <Link to=\"/settings\">Settings</Link>\n              </li>\n            </ul>\n          </NotFound>\n        </div>\n      </div>\n    </BaseLayout>\n  );\n}\n","import { useEffect } from \"react\";\nimport { Route, Redirect, Switch, useLocation } from \"react-router-dom\";\n\nimport Login from \"components/LogIn/LogIn\";\n\nimport ControllersIndex from \"pages/ControllersIndex/ControllersIndex\";\nimport ModelsIndex from \"pages/ModelsIndex/ModelsIndex\";\n\n// Entity Detail pages\nimport ModelDetails from \"pages/ModelDetails/ModelDetails\";\n\nimport Settings from \"pages/Settings/Settings\";\n\n// Error pages\nimport PageNotFound from \"pages/PageNotFound/PageNotFound\";\n\nimport useAnalytics from \"hooks/useAnalytics\";\n\nexport type EntityDetailsRoute = {\n  userName: string;\n  modelName: string;\n  appName: string;\n  unitId: string;\n  machineId: string;\n};\n\nexport function Routes() {\n  const sendAnalytics = useAnalytics();\n  const location = useLocation();\n\n  useEffect(() => {\n    // Send an analytics event when the URL changes.\n    sendAnalytics({\n      path: window.location.href.replace(window.location.origin, \"\"),\n    });\n  }, [location, sendAnalytics]);\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact>\n        <Redirect to=\"/models\" />\n      </Route>\n      <Route path=\"/models\" exact>\n        <Login>\n          <ModelsIndex />\n        </Login>\n      </Route>\n      <Route path=\"/models/:userName/:modelName\">\n        <Login>\n          <ModelDetails />\n        </Login>\n      </Route>\n      <Route path=\"/controllers\" exact>\n        <Login>\n          <ControllersIndex />\n        </Login>\n      </Route>\n      <Route path=\"/settings\" exact>\n        <Login>\n          <Settings />\n        </Login>\n      </Route>\n      <Route>\n        <PageNotFound />\n      </Route>\n    </Switch>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { QueryParamProvider } from \"use-query-params\";\nimport ReactGA from \"react-ga\";\n\nimport ErrorBoundary from \"components/ErrorBoundary/ErrorBoundary\";\n\nimport { Routes } from \"components/Routes/Routes\";\n\nimport { getConfig } from \"app/selectors\";\nimport useLocalStorage from \"hooks/useLocalStorage\";\n\nimport \"../../scss/index.scss\";\n\nfunction App() {\n  const isProduction = process.env.NODE_ENV === \"production\" ?? true;\n  const { baseAppURL } = useSelector(getConfig);\n  const [disableAnalytics] = useLocalStorage(\"disableAnalytics\", false);\n  if (isProduction && (!disableAnalytics || disableAnalytics === \"false\")) {\n    ReactGA.initialize(\"UA-1018242-68\");\n    ReactGA.pageview(window.location.href.replace(window.location.origin, \"\"));\n  }\n\n  return (\n    <Router basename={baseAppURL}>\n      <ErrorBoundary>\n        <QueryParamProvider ReactRouterRoute={Route}>\n          <Routes />\n        </QueryParamProvider>\n      </ErrorBoundary>\n    </Router>\n  );\n}\n\nexport default App;\n","/*\n  Redux middleware that gates every request on authentication unless an action\n  has been allowed.\n*/\n\nimport { isLoggedIn } from \"app/selectors\";\n\nconst actionAllowlist = [\n  \"POPULATE_MISSING_ALLWATCHER_DATA\",\n  \"PROCESS_ALL_WATCHER_DELTAS\",\n  \"STORE_BAKERY\",\n  \"STORE_LOGIN_ERROR\",\n  \"STORE_CONFIG\",\n  \"STORE_USER_PASS\",\n  \"STORE_VERSION\",\n  \"UPDATE_CONTROLLER_CONNECTION\",\n  \"UPDATE_CONTROLLER_LIST\",\n  \"UPDATE_JUJU_API_INSTANCE\",\n  \"UPDATE_PINGER_INTERVAL_ID\",\n  \"LOG_OUT\",\n  \"CLEAR_CONTROLLER_DATA\",\n  \"CLEAR_MODEL_DATA\",\n  \"STORE_VISIT_URL\",\n  \"TOGGLE_USER_MENU\",\n  \"SIDENAV_COLLAPSED\",\n];\n\nconst thunkAllowlist = [\"connectAndStartPolling\", \"logOut\"];\n\nfunction error(name, wsControllerURL) {\n  console.log(\n    \"unable to perform action:\",\n    name,\n    \"user not authenticated for:\",\n    wsControllerURL\n  );\n}\n\nconst checkLoggedIn = (state, wsControllerURL) => {\n  if (!wsControllerURL) {\n    console.error(\"unable to determine logged in status\");\n  }\n  return isLoggedIn(wsControllerURL, state);\n};\n\n/**\n  Redux middleware to enable gating actions on the respective controller\n  authentication.\n  @param {Object} action The typical Redux action or thunk to execute\n  @param {Object} options Any options that this checker needs to perform an\n    appropriate auth check.\n      wsControllerURL: The full controller websocket url that the controller\n        is stored under in redux in order to determine it's logged in status.\n*/\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({ getState }) =>\n  (next) =>\n  async (action, options) => {\n    const state = getState();\n    const wsControllerURL = options?.wsControllerURL;\n\n    // If the action is a function then it's probably a thunk.\n    if (typeof action === \"function\") {\n      if (\n        thunkAllowlist.includes(action.NAME) ||\n        checkLoggedIn(state, wsControllerURL)\n      ) {\n        // Await the next to support async thunks\n        await next(action);\n        return;\n      } else {\n        error(action.NAME, wsControllerURL);\n      }\n    } else {\n      if (\n        actionAllowlist.includes(action.type) ||\n        checkLoggedIn(state, wsControllerURL)\n      ) {\n        next(action);\n        return;\n      } else {\n        error(action.type, wsControllerURL);\n      }\n    }\n  };\n","import immerProduce from \"immer\";\nimport cloneDeep from \"clone-deep\";\n\nimport { actionsList } from \"./actions\";\n\nfunction rootReducer(state = {}, action) {\n  return immerProduce(state, (draftState) => {\n    switch (action.type) {\n      case actionsList.updateControllerConnection:\n        const connections = cloneDeep(state.controllerConnections || {});\n        connections[action.payload.wsControllerURL] = action.payload.conn;\n        draftState.controllerConnections = connections;\n        break;\n      case actionsList.storeBakery:\n        draftState.bakery = action.payload;\n        break;\n      case actionsList.storeConfig:\n        draftState.config = action.payload;\n        break;\n      case actionsList.storeLoginError:\n        draftState.loginError = action.payload;\n        break;\n      case actionsList.storeUserPass:\n        const credentials = cloneDeep(state.credentials || {});\n        credentials[action.payload.wsControllerURL] = action.payload.credential;\n        draftState.credentials = credentials;\n        break;\n      case actionsList.storeVersion:\n        draftState.appVersion = action.payload;\n        break;\n      case actionsList.storeVisitURL:\n        draftState.visitURL = action.payload;\n        break;\n      case actionsList.logOut:\n        delete draftState.bakery.storage._store.identity;\n        delete draftState.controllerConnections;\n        delete draftState.visitURL;\n        break;\n      case actionsList.updateJujuAPIInstance:\n        const jujus = cloneDeep(state.jujus || {});\n        jujus[action.payload.wsControllerURL] = action.payload.juju;\n        draftState.jujus = jujus;\n        break;\n      case actionsList.updatePingerIntervalId:\n        const intervals = cloneDeep(state.pingerIntervalIds || {});\n        intervals[action.payload.wsControllerURL] = action.payload.intervalId;\n        draftState.pingerIntervalIds = intervals;\n        break;\n      default:\n        // no default value, fall through.\n        break;\n    }\n  });\n}\n\nexport default rootReducer;\n","import immerProduce from \"immer\";\nimport type { UIState } from \"types\";\n\nimport { actionsList, ActionType } from \"./actions\";\n\nfunction uiReducer(\n  state: UIState = {\n    userMenuActive: false,\n    confirmationModalActive: false,\n    sideNavCollapsed: false,\n  },\n  action: ActionType\n) {\n  return immerProduce(state, (draftState: UIState) => {\n    switch (action.type) {\n      case actionsList.userMenuActive:\n        draftState.userMenuActive = action.payload;\n        break;\n      case actionsList.confirmationModalActive:\n        draftState.confirmationModalActive = action.payload;\n        break;\n      case actionsList.sideNavCollapsed:\n        draftState.sideNavCollapsed = action.payload;\n        break;\n      default:\n        // no default value, fall through.\n        break;\n    }\n  });\n}\n\nexport default uiReducer;\n","// See https://github.com/juju/juju/blob/develop/apiserver/params/multiwatcher.go\n// for the Juju types for the AllWatcher responses.\n\nexport interface ActionData {\n  [id: string]: ActionChangeDelta;\n}\n\nexport interface AnnotationData {\n  [appName: string]: AnnotationInfo;\n}\n\nexport interface ApplicationData {\n  [appName: string]: ApplicationInfo;\n}\n\nexport interface MachineData {\n  [key: string]: MachineChangeDelta;\n}\n\nexport interface ModelCharmData {\n  [charmURL: string]: CharmChangeDelta;\n}\n\nexport interface ModelWatcherData {\n  [uuid: string]: ModelData;\n}\n\nexport interface RelationData {\n  [key: string]: RelationChangeDelta;\n}\n\nexport interface UnitData {\n  [unitName: string]: UnitChangeDelta;\n}\n\nexport type AllWatcherDelta =\n  | [DeltaEntityTypes.ACTION, DeltaChangeTypes.CHANGE, ActionChangeDelta]\n  | [\n      DeltaEntityTypes.ANNOTATION,\n      DeltaChangeTypes.CHANGE,\n      AnnotationChangeDelta\n    ]\n  | [\n      DeltaEntityTypes.APPLICATION,\n      DeltaChangeTypes.CHANGE,\n      ApplicationChangeDelta\n    ]\n  | [\n      DeltaEntityTypes.APPLICATION,\n      DeltaChangeTypes.REMOVE,\n      ApplicationChangeDelta\n    ]\n  | [DeltaEntityTypes.CHARM, DeltaChangeTypes.CHANGE, CharmChangeDelta]\n  | [DeltaEntityTypes.CHARM, DeltaChangeTypes.REMOVE, CharmChangeDelta]\n  | [DeltaEntityTypes.UNIT, DeltaChangeTypes.CHANGE, UnitChangeDelta]\n  | [DeltaEntityTypes.UNIT, DeltaChangeTypes.REMOVE, UnitChangeDelta]\n  | [DeltaEntityTypes.MACHINE, DeltaChangeTypes.CHANGE, MachineChangeDelta]\n  | [DeltaEntityTypes.MACHINE, DeltaChangeTypes.REMOVE, MachineChangeDelta]\n  | [DeltaEntityTypes.MODEL, DeltaChangeTypes.CHANGE, ModelChangeDelta]\n  | [DeltaEntityTypes.RELATION, DeltaChangeTypes.CHANGE, RelationChangeDelta]\n  | [DeltaEntityTypes.RELATION, DeltaChangeTypes.REMOVE, RelationChangeDelta];\n\nexport enum DeltaEntityTypes {\n  ACTION = \"action\",\n  ANNOTATION = \"annotation\",\n  APPLICATION = \"application\",\n  CHARM = \"charm\",\n  MACHINE = \"machine\",\n  MODEL = \"model\",\n  RELATION = \"relation\",\n  UNIT = \"unit\",\n}\n\nexport enum DeltaChangeTypes {\n  CHANGE = \"change\",\n  REMOVE = \"remove\",\n}\n\nexport enum ReduxDeltaEntityTypes {\n  ACTIONS = \"actions\",\n  ANNOTATIONS = \"annotations\",\n  APPLICATIONS = \"applications\",\n  CHARMS = \"charms\",\n  MACHINES = \"machines\",\n  MODEL = \"model\",\n  RELATIONS = \"relations\",\n  UNITS = \"units\",\n}\n\nexport type DeltaMessageData =\n  | ActionChangeDelta\n  | AnnotationChangeDelta\n  | ApplicationChangeDelta\n  | CharmChangeDelta\n  | UnitChangeDelta\n  | MachineChangeDelta\n  | ModelChangeDelta\n  | RelationChangeDelta;\n\nexport interface ModelData {\n  [ReduxDeltaEntityTypes.ACTIONS]: ActionData;\n  [ReduxDeltaEntityTypes.ANNOTATIONS]: AnnotationData;\n  [ReduxDeltaEntityTypes.APPLICATIONS]: ApplicationData;\n  [ReduxDeltaEntityTypes.CHARMS]: ModelCharmData;\n  [ReduxDeltaEntityTypes.MACHINES]: MachineData;\n  [ReduxDeltaEntityTypes.MODEL]: ModelInfo;\n  [ReduxDeltaEntityTypes.RELATIONS]: RelationData;\n  [ReduxDeltaEntityTypes.UNITS]: UnitData;\n}\n\nexport interface ModelInfo extends ModelChangeDelta {\n  \"cloud-tag\": string;\n  region: string;\n  type: string;\n  version: string;\n}\n\nexport interface AnnotationInfo {\n  [annotationName: string]: string;\n}\n\nexport interface ApplicationInfo extends ApplicationChangeDelta {\n  \"unit-count\"?: number;\n}\n\n// Shared Types\n\ntype IPAddress = string;\ntype UnitId = string;\ntype NumberAsString = string;\ntype Life = \"alive\" | \"dead\" | \"dying\" | \"\";\ntype ISO8601Date = string;\ntype DeprecatedString = string;\ninterface Status {\n  // See https://github.com/juju/juju/blob/develop/core/status/status.go\n  // For the possible status values for `current`.\n  // Possible statuses differ by entity type.\n  current: string;\n  message: string;\n  since?: ISO8601Date;\n  version: string;\n  data?: { [key: string]: any };\n  err?: string;\n}\ntype Config = { [key: string]: string | boolean };\ntype LXDProfile = {\n  config?: Config;\n  description?: string;\n  devices?: { [key: string]: { [key: string]: string } };\n} | null;\n\n// Delta Types\n\ninterface ActionChangeDelta {\n  \"model-uuid\": string;\n  id: NumberAsString;\n  receiver: UnitId;\n  name: string;\n  status: string;\n  message: string;\n  parameters?: { [key: string]: string };\n  results?: {\n    // Known values, add more as known.\n    Code: NumberAsString;\n    Stderr: string;\n    [key: string]: string;\n  };\n  enqueued: ISO8601Date;\n  started: ISO8601Date;\n  completed: ISO8601Date;\n}\n\ninterface AnnotationChangeDelta {\n  \"model-uuid\": string;\n  tag: string; // application-etcd\n  annotations: { [annotationName: string]: string };\n}\n\ninterface ApplicationChangeDelta {\n  \"charm-url\": string;\n  constraints: { [key: string]: string };\n  exposed: boolean;\n  life: Life;\n  \"min-units\": number;\n  \"model-uuid\": string;\n  name: string;\n  \"owner-tag\": string;\n  status?: WorkloadStatus;\n  subordinate: boolean;\n  \"workload-version\": string;\n}\n\ninterface CharmChangeDelta {\n  \"model-uuid\": string;\n  \"charm-url\": string;\n  \"charm-version\": string;\n  life: Life;\n  profile: LXDProfile;\n  config?: Config;\n}\n\nexport interface MachineChangeDelta {\n  addresses: AddressData[] | null;\n  \"agent-status\": MachineAgentStatus;\n  \"container-type\": string;\n  \"hardware-characteristics\"?: HardwareCharacteristics;\n  \"has-vote\": boolean;\n  id: NumberAsString;\n  \"instance-id\": string;\n  \"instance-status\": MachineAgentStatus;\n  jobs: [\"JobHostUnits\"] | [\"JobManageModel\"];\n  life: Life;\n  \"model-uuid\": string;\n  series: string;\n  \"supported-containers\": [\"none\" | \"lxd\" | \"kvm\"] | null;\n  \"supported-containers-known\": boolean;\n  \"wants-vote\": boolean;\n}\n\ninterface MachineAgentStatus extends Status {\n  current: \"down\" | \"error\" | \"pending\" | \"running\" | \"started\" | \"stopped\";\n}\n\ninterface AddressData {\n  value: IPAddress;\n  type: \"ipv4\" | \"ipv6\";\n  scope: \"public\" | \"local-cloud\" | \"local-fan\" | \"local-machine\";\n}\n\ninterface HardwareCharacteristics {\n  arch: string;\n  mem: number;\n  \"root-disk\": number;\n  \"cpu-cores\": number;\n  \"cpu-power\": number;\n  \"availability-zone\": string;\n}\n\ninterface ModelChangeDelta {\n  \"model-uuid\": string;\n  name: string;\n  life: Life;\n  owner: string;\n  \"controller-uuid\": string;\n  \"is-controller\": boolean;\n  config: Config;\n  status: ModelAgentStatus;\n  constraints: { [key: string]: any };\n  sla: {\n    level: string;\n    owner: string;\n  };\n}\n\ninterface ModelAgentStatus extends Status {\n  current: \"available\" | \"busy\" | \"\";\n}\n\ninterface RelationChangeDelta {\n  \"model-uuid\": string;\n  key: string;\n  id: number;\n  endpoints: Endpoint[];\n}\n\ninterface Endpoint {\n  \"application-name\": string;\n  relation: {\n    name: string;\n    role: \"peer\" | \"requirer\" | \"provider\";\n    interface: string;\n    optional: boolean;\n    limit: number;\n    scope: \"global\" | \"container\";\n  };\n}\n\ninterface UnitChangeDelta {\n  \"agent-status\": UnitAgentStatus;\n  \"charm-url\": string;\n  \"machine-id\": NumberAsString;\n  \"model-uuid\": string;\n  \"port-ranges\":\n    | {\n        \"from-port\": number;\n        \"to-port\": number;\n        protocol: string;\n      }[]\n    | null;\n  \"private-address\": DeprecatedString;\n  \"public-address\": DeprecatedString;\n  \"workload-status\": WorkloadStatus;\n  application: string;\n  life: Life;\n  name: string;\n  ports:\n    | {\n        protocol: string;\n        number: number;\n      }[]\n    | []\n    | null;\n  principal: string; // If subordinate is true this will have the parent.\n  series: string;\n  subordinate: boolean;\n}\n\ninterface UnitAgentStatus extends Status {\n  current:\n    | \"allocating\"\n    | \"executing\"\n    | \"failed\"\n    | \"idle\"\n    | \"lost\"\n    | \"rebooting\";\n}\n\ninterface WorkloadStatus extends Status {\n  current:\n    | \"active\"\n    | \"blocked\"\n    | \"maintenance\"\n    | \"terminated\"\n    | \"unknown\"\n    | \"unset\"\n    | \"waiting\";\n}\n","import mergeWith from \"lodash.mergewith\";\n\nimport type {\n  AllWatcherDelta,\n  ApplicationData,\n  DeltaMessageData,\n  ModelData,\n  ModelWatcherData,\n} from \"./types\";\n\nimport {\n  DeltaChangeTypes,\n  DeltaEntityTypes,\n  ReduxDeltaEntityTypes,\n} from \"./types\";\n\nfunction generateModelWatcherBase(): ModelData {\n  return {\n    actions: {},\n    annotations: {},\n    applications: {},\n    charms: {},\n    machines: {},\n    model: {\n      \"cloud-tag\": \"\",\n      \"controller-uuid\": \"\",\n      \"is-controller\": false,\n      \"model-uuid\": \"\",\n      config: {},\n      constraints: {},\n      life: \"\",\n      name: \"\",\n      owner: \"\",\n      region: \"\",\n      sla: {\n        level: \"\",\n        owner: \"\",\n      },\n      status: {\n        current: \"\",\n        message: \"\",\n        since: \"\",\n        version: \"\",\n      },\n      type: \"\",\n      version: \"\",\n    },\n    relations: {},\n    units: {},\n  };\n}\n\nfunction _processDelta(\n  actionType: string,\n  delta: DeltaMessageData,\n  modelData: ModelData,\n  entityType: ReduxDeltaEntityTypes,\n  key: string\n): void {\n  if (actionType === DeltaChangeTypes.CHANGE) {\n    const formatted = {\n      [key]: delta,\n    };\n    mergeWith(modelData[entityType], formatted);\n  } else if (\n    actionType === DeltaChangeTypes.REMOVE &&\n    entityType !== ReduxDeltaEntityTypes.MODEL\n  ) {\n    delete modelData[entityType][key];\n  }\n}\n\nexport function processDeltas(\n  modelWatcherData: ModelWatcherData,\n  deltas: AllWatcherDelta[]\n) {\n  if (!deltas) {\n    return;\n  }\n  deltas.forEach((delta) => {\n    // Delta is in the format of [entityType, actionType, data].\n    const modelUUID = delta[2][\"model-uuid\"];\n    if (!modelWatcherData[modelUUID]) {\n      modelWatcherData[modelUUID] = generateModelWatcherBase();\n    }\n    const modelData = modelWatcherData[modelUUID];\n    const _process = _processDelta.bind(null, delta[1], delta[2], modelData);\n    if (delta[0] === DeltaEntityTypes.ACTION) {\n      _process(ReduxDeltaEntityTypes.ACTIONS, delta[2].id);\n    } else if (delta[0] === DeltaEntityTypes.ANNOTATION) {\n      const appName = delta[2].tag.replace(\"application-\", \"\");\n      const formatted = {\n        [appName]: delta[2].annotations,\n      };\n      mergeWith(modelData[ReduxDeltaEntityTypes.ANNOTATIONS], formatted);\n    } else if (delta[0] === DeltaEntityTypes.APPLICATION) {\n      const formatted: ApplicationData = {\n        [delta[2].name]: delta[2],\n      };\n      if (formatted[delta[2].name][\"unit-count\"] === undefined) {\n        formatted[delta[2].name][\"unit-count\"] = 0;\n      }\n      mergeWith(modelData[ReduxDeltaEntityTypes.APPLICATIONS], formatted);\n    } else if (delta[0] === DeltaEntityTypes.CHARM) {\n      _process(ReduxDeltaEntityTypes.CHARMS, delta[2][\"charm-url\"]);\n    } else if (delta[0] === DeltaEntityTypes.MACHINE) {\n      _process(ReduxDeltaEntityTypes.MACHINES, delta[2].id);\n    } else if (delta[0] === DeltaEntityTypes.MODEL) {\n      if (delta[1] === DeltaChangeTypes.CHANGE) {\n        mergeWith(modelWatcherData[modelUUID].model, delta[2]);\n      }\n    } else if (delta[0] === DeltaEntityTypes.RELATION) {\n      _process(ReduxDeltaEntityTypes.RELATIONS, delta[2].key);\n    } else if (delta[0] === DeltaEntityTypes.UNIT) {\n      _process(ReduxDeltaEntityTypes.UNITS, delta[2].name);\n      const applicationUnitCounts: { [key: string]: number } = {};\n      // We loop through the full modelData units list every time there is a\n      // unit delta so that we don't have to keep reference to the delta type\n      // when adding and removing units to other applications. At the time\n      // of writing this does not appear to be a performance issue but something\n      // to keep an eye on for those with many hundreds of units.\n      Object.entries(modelData.units).forEach(([key, value]) => {\n        const applicationName = key.split(\"/\")[0];\n        if (applicationUnitCounts[applicationName] === undefined) {\n          applicationUnitCounts[applicationName] = 0;\n        }\n        applicationUnitCounts[applicationName] += 1;\n      });\n      Object.entries(applicationUnitCounts).forEach(\n        ([applicationName, count]) => {\n          if (!modelData.applications[applicationName]) {\n            // The following line is ignored because the type requires that\n            // the application has a number of pre-defined values.\n            // This is only here because sometimes the unit delta is parsed\n            // before the application delta arrives so it needs somewhere to\n            // store this information.\n            // This can be resolved by computing the unit-count in the\n            // selector instead of when the unit delta arrives.\n            // @ts-ignore TSFixMe XXX\n            modelData.applications[applicationName] = {};\n          }\n          modelData.applications[applicationName][\"unit-count\"] = count;\n        }\n      );\n    }\n  });\n  return modelWatcherData;\n}\n","import immerProduce from \"immer\";\nimport cloneDeep from \"clone-deep\";\nimport mergeWith from \"lodash.mergewith\";\n\nimport { actionsList } from \"./actions\";\nimport { processDeltas } from \"./watchers\";\n\nconst defaultState = {\n  models: {},\n  modelData: {},\n  modelWatcherData: {},\n};\n\nexport default function jujuReducer(state = defaultState, action) {\n  return immerProduce(state, (draftState) => {\n    const payload = action.payload;\n    switch (action.type) {\n      case actionsList.updateModelList:\n        const modelList = cloneDeep(state.models || {});\n        let userModels = action.payload[\"user-models\"];\n        if (!userModels) {\n          userModels = [];\n        }\n        userModels.forEach((model) => {\n          modelList[model.model.uuid] = {\n            lastConnection: model.lastConnection,\n            name: model.model.name,\n            ownerTag: model.model[\"owner-tag\"],\n            type: model.model.type,\n            uuid: model.model.uuid,\n          };\n        });\n        draftState.models = modelList;\n        break;\n      case actionsList.updateModelStatus:\n        const modelUUID = payload.modelUUID;\n\n        if (!draftState.modelData[modelUUID]) {\n          draftState.modelData[modelUUID] = {};\n        }\n        // There is some data that we don't want to store because it changes\n        // to often causing needless re-renders and is currently irrelevent\n        // like controllerTimestamp so we have a allowlist for top level keys.\n        const allowedKeys = [\n          \"annotations\",\n          \"applications\",\n          \"machines\",\n          \"model\",\n          \"offers\",\n          \"relations\",\n          \"remote-applications\",\n        ];\n\n        allowedKeys.forEach((key) => {\n          draftState.modelData[modelUUID][key] = payload.status[key];\n        });\n        // The status doesn't contain a top level uuid and when this data is\n        // fetched it doesn't contain the UUID.\n        draftState.modelData[modelUUID].uuid = modelUUID;\n        break;\n      case actionsList.updateModelInfo:\n        const modelInfo = payload.results[0].result;\n        // There don't appear to be any irrelevent data in the modelInfo so\n        // we overwrite the whole object every time it changes even though\n        // mostly that'll just be status timestamps.\n        const modelData = draftState.modelData[modelInfo.uuid];\n        // If any of the status requests timeout then it's possible the data\n        // won't be available. Just abandon saving any data in that case.\n        // This will go away with the new API.\n        if (modelData) {\n          draftState.modelData[modelInfo.uuid].info = modelInfo;\n        }\n        break;\n      case actionsList.clearModelData:\n        draftState.modelData = {};\n        draftState.models = {};\n        break;\n      case actionsList.clearControllerData:\n        draftState.controllers = {};\n        break;\n      case actionsList.updateControllerList:\n        const controllers = cloneDeep(state.controllers || {});\n        controllers[action.payload.wsControllerURL] =\n          action.payload.controllers;\n        draftState.controllers = controllers;\n        break;\n      case actionsList.populateMissingAllWatcherData:\n        if (!draftState.modelWatcherData?.[payload.uuid]?.model) {\n          if (!draftState.modelWatcherData?.[payload.uuid]) {\n            draftState.modelWatcherData[payload.uuid] = {};\n          }\n          draftState.modelWatcherData[payload.uuid].model = {};\n        }\n        mergeWith(draftState.modelWatcherData[payload.uuid].model, {\n          \"cloud-tag\": payload.status.model[\"cloud-tag\"],\n          type: payload.status.model.type,\n          region: payload.status.model.region,\n          version: payload.status.model.version,\n        });\n        break;\n      case actionsList.processAllWatcherDeltas:\n        draftState.modelWatcherData = processDeltas(\n          draftState.modelWatcherData,\n          payload\n        );\n        break;\n      default:\n        // No default value, fall through.\n        break;\n    }\n  });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { Bakery, BakeryStorage } from \"@canonical/macaroon-bakery\";\nimport * as Sentry from \"@sentry/browser\";\nimport App from \"components/App/App\";\nimport checkAuth from \"app/check-auth\";\nimport rootReducer from \"app/root\";\nimport uiReducer from \"ui\";\n\nimport {\n  connectAndStartPolling,\n  storeBakery,\n  storeConfig,\n  storeVersion,\n  storeVisitURL,\n} from \"app/actions\";\n\nimport jujuReducer from \"juju/reducer\";\n\nimport { version as appVersion } from \"../package.json\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nif (process.env.NODE_ENV === \"production\") {\n  Sentry.init({\n    dsn: \"https://5f679e274f34464194e9592a91ed65d4@sentry.is.canonical.com//29\",\n  });\n  Sentry.setTag(\"dashboardVersion\", appVersion);\n}\n\n// Sometimes the config.js file hasn't been parsed by the time this code is\n// executed. This is a simple debounce so that in the event it's not it'll wait\n// a few cycles before trying again.\nlet checkCounter = 0;\nconst checkConfigExists = () => {\n  if (!window.jujuDashboardConfig) {\n    if (checkCounter < 5) {\n      checkCounter++;\n      setTimeout(checkConfigExists, 500);\n      return;\n    } else {\n      console.error(\n        \"Configuration values not defined unable to bootstrap application\"\n      );\n    }\n  } else {\n    bootstrap();\n  }\n};\ncheckConfigExists();\n\nfunction bootstrap() {\n  const config = window.jujuDashboardConfig;\n  // It's possible that the charm is generating a relative path for the\n  // websocket because it is providing the API on the same host as the\n  // application assets.\n  // If we were provided with a relative path for the endpoint then we need\n  // to build the full correct path for the websocket to connect to.\n  const controllerAPIEndpoint = config.controllerAPIEndpoint;\n  if (controllerAPIEndpoint) {\n    if (!controllerAPIEndpoint.includes(\"://\")) {\n      const protocol = window.location.protocol.includes(\"https\")\n        ? \"wss\"\n        : \"ws\";\n      config.controllerAPIEndpoint = `${protocol}://${window.location.host}${controllerAPIEndpoint}`;\n    }\n  }\n  // Support Juju 2.9 deployments with the old configuration values.\n  // XXX This can be removed once we drop support for 2.9 with the 3.0 release.\n  if (config.baseControllerURL === null) {\n    const protocol = window.location.protocol.includes(\"https\") ? \"wss\" : \"ws\";\n    config.controllerAPIEndpoint = `${protocol}://${window.location.host}/api`;\n  }\n\n  if (process.env.NODE_ENV === \"production\") {\n    Sentry.setTag(\"isJuju\", config.isJuju);\n  }\n\n  const reduxStore = createStore(\n    combineReducers({\n      root: rootReducer,\n      juju: jujuReducer,\n      ui: uiReducer,\n    }),\n    // Order of the middleware is important\n    composeWithDevTools(applyMiddleware(checkAuth, thunk))\n  );\n\n  reduxStore.dispatch(storeConfig(config));\n  reduxStore.dispatch(storeVersion(appVersion));\n\n  const bakery = new Bakery({\n    visitPage: (resp) => {\n      reduxStore.dispatch(storeVisitURL(resp.Info.VisitURL));\n    },\n    storage: new BakeryStorage(localStorage, {}),\n  });\n  reduxStore.dispatch(storeBakery(bakery));\n  if (config.identityProviderAvailable) {\n    // If an identity provider is available then try and connect automatically\n    // If not then wait for the login UI to trigger this\n    reduxStore.dispatch(connectAndStartPolling(reduxStore, bakery));\n  }\n\n  const rootElement = document.getElementById(\"root\");\n\n  ReactDOM.render(\n    <Provider store={reduxStore}>\n      <StrictMode>\n        <App />\n      </StrictMode>\n    </Provider>,\n    rootElement\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}